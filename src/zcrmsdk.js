var classDetailMap = {"BluePrint.Model.BluePrint":{"processInfo":{"lookup":true,"structure_name":"BluePrint.Model.ProcessInfo","name":"process_info","type":"BluePrint.Model.ProcessInfo"},"data":{"structure_name":"Record.Model.Record","required-in-update":true,"skip-mandatory":true,"name":"data","type":"Record.Model.Record"},"transitionId":{"required-in-update":true,"name":"transition_id","type":"Long"},"transitions":{"lookup":true,"structure_name":"BluePrint.Model.Transition","name":"transitions","type":"List"}},"Tag.Model.Info":{"count":{"name":"count","type":"Integer"},"allowedCount":{"name":"allowed_count","type":"Integer"}},"Notification.Model.GetNotificationDetailsParam":{"perPage":{"name":"per_page","type":"Integer"},"module":{"name":"module","type":"String"},"page":{"name":"page","type":"Integer"},"channelId":{"name":"channel_id","type":"Long"}},"Record.Model.UpsertRecordsHeader":{"XEXTERNAL":{"name":"X-EXTERNAL","type":"String"}},"Territory.Model.APIException":{"code":{"values":["OAUTH_SCOPE_MISMATCH","INTERNAL_ERROR","INVALID_TOKEN","INVALID_URL_PATTERN","INVALID_REQUEST_METHOD","INVALID_DATA","CURRENCIES_NOT_ENABLED","FEATURE_NOT_SUPPORTED"],"name":"code","type":"util.Model.Choice"},"details":{"name":"details","type":"Map"},"message":{"values":["invalid oauth token","Please check if the URL trying to access is a correct one","The http request method type is not a valid one","Internal server error occurred."],"name":"message","type":"util.Model.Choice"},"status":{"values":["error"],"name":"status","type":"util.Model.Choice"}},"Function.Model.ExecuteFunctionUsingRequestBodyHeader":{"customFunctionsHeader":{"name":"custom_functions_header","type":"Map"}},"Record.Model.PricingDetails":{"discount":{"name":"discount","type":"Double","required":true},"toRange":{"name":"to_range","type":"Double","required":true},"fromRange":{"name":"from_range","type":"Double","required":true}},"Notification.Model.BodyWrapper":{"watch":{"structure_name":"Notification.Model.Notification","name":"watch","max-length":100,"type":"List","required":true,"min-length":1}},"Record.Model.Record":{"modifiedTime":{"name":"Modified_Time","type":"DateTime"},"createdBy":{"lookup":true,"structure_name":"User.Model.User","name":"Created_By","type":"User.Model.User"},"createdTime":{"name":"Created_Time","type":"DateTime"},"modifiedBy":{"lookup":true,"structure_name":"User.Model.User","name":"Modified_By","type":"User.Model.User"},"id":{"name":"id","type":"Long","primary":true},"tag":{"structure_name":"Tag.Model.Tag","skip-mandatory":true,"name":"Tag","type":"List"}},"Record.Model.GetMassUpdateStatusParam":{"jobId":{"name":"job_id","type":"String"}},"Notification.Model.Notification":{"resourceId":{"name":"resource_id","type":"String"},"deleteevents":{"name":"_delete_events","type":"Boolean"},"notifyOnRelatedAction":{"name":"notify_on_related_action","type":"Boolean"},"notifyUrl":{"name":"notify_url","type":"String","required":true},"resourceName":{"name":"resource_name","type":"String"},"resourceUri":{"name":"resource_uri","type":"String"},"channelExpiry":{"name":"channel_expiry","type":"DateTime"},"fields":{"name":"fields","type":"Map"},"channelId":{"name":"channel_id","type":"Long","required":true,"primary":true},"events":{"required-in-update":true,"name":"events","type":"List","required":true},"token":{"name":"token","max-length":50,"type":"String","min-length":1}},"Note.Model.ResponseHandler":{"classes":["Note.Model.APIException","Note.Model.ResponseWrapper"],"interface":true},"RelatedList.Model.ResponseHandler":{"classes":["RelatedList.Model.ResponseWrapper","RelatedList.Model.APIException"],"interface":true},"BulkRead.Model.APIException":{"code":{"values":["INVALID_TOKEN","INVALID_URL_PATTERN","INVALID_REQUEST_METHOD","INVALID_SERVICE_NAME","INVALID_BULK_OPERATION","RESOURCE_NOT_FOUND","MEDIA_TYPE_NOT_SUPPORTED","REQUEST_BODY_NOT_READABLE","REQUEST_BODY_IS_EMPTY","MODULE_NOT_AVAILABLE","NOT_SUPPORTED_FEATURE","NO_PERMISSION","MODULE_NOT_SUPPORTED","JOB_NOT_SUPPORTED","QUERY_NOT_SUPPORTED","INVALID_CALLBACK_URL","INVALID_CALLBACK_METHOD","JOIN_LIMIT_EXCEEDED","CRITERIA_NOT_SUPPORTED","INVALID_CRITERIA","AMBIGUOUS_CRITERIA","AMBIGUOUS_GROUP_IN_CRITERIA","CRITERIA_LIMIT_EXCEEDED","FIELD_IN_CRITERIA_NOT_SUPPORTED","FIELD_AND_COMPARATOR_IN_CRITERIA_NOT_COMPATIBLE","FIELD_IN_CRITERIA_NOT_AVAILABLE","FIELD_COMPARATOR_IN_CRITERIA_NOT_SUPPORTED","VALUE_IN_CRITERIA_NOT_SUPPORTED","FIELD_AND_VALUE_IN_CRITERIA_NOT_COMPATIBLE","COMPARATOR_AND_VALUE_IN_CRITERIA_NOT_COMPATIBLE","COMPARATOR_AND_ENCRYPTED_VALUE_IN_CRITERIA_NOT_COMPATIBLE","GROUP_OPERATOR_NOT_SUPPORTED","FIELD_NOT_AVAILABLE","FIELD_NOT_SUPPORTED","VALUE_LIMIT_EXCEEDED_IN_CRITERIA","PAGE_NOT_SUPPORTED","PAGE_RANGE_EXCEEDED","TOO_MANY_REQUESTS","CALLBACK_FAILURE","INTERNAL_SERVER_ERROR","INTERNAL_ERROR"],"name":"code","type":"util.Model.Choice"},"details":{"keys":[{"name":"resource","type":"String"},{"name":"message","type":"String"},{"name":"expected_data_type","type":"String"},{"name":"info_message","type":"String"},{"name":"parent_api_name","type":"String"},{"name":"comparator","type":"String"},{"name":"value","type":"String"},{"name":"api_name","type":"String"}],"name":"details","type":"Map"},"message":{"values":["invalid oauth token","Please check if the URL trying to access is a correct one","The http request method type is not a valid one","Provided service name %s is not valid/not supported","Requested operation is an invalid bulk operation","record not in process","The requested resource doesn't exist.","Media type is not supported.","Unable to parse the request body.","Request body is empty.","Requested module '%s' is not available.","Feature is not supported"," permission denied","Invalid module for the query. Module '%s' is not supported.","Invalid bulk %s job.","Invalid query for bulk %s job. Query '%s' is not supported.","Invalid URL '%s' for callback.","Invalid request method %s for callback.","Join limit exceeded for the query. Maximum number of joins supported in a query is %d","Invalid criteria for the query. Criteria %s is not supported.","Invalid criteria %s for the query.","Ambiguous criteria %s. Criteria can have either {group"," group_operator} or {api_name"," comparator"," value}.","Ambiguous group in criteria %s. Group should be used only when there are more than one criteria","Number of criteria exceeded the maximum limit of %d","Field api name '%s' for criteria %s is not supported.","Field api name '%s' is not supported with comparator '%s' for criteria %s.","Field api name '%s' is not available for criteria %s. Check visibility and permission for the field","Field api name '%s' doesn't support this comparator '%s' for criteria %s.","Value '%s' is not supported for criteria %s.","Field '%s' is not supported with value '%s' for criteria %s.","Comparator '%s' is not supported with value '%s' for criteria %s.","Comparator '%s' is not supported with value '%s' for criteria %s as the value is encrypted.","Criteria %s doesn't support this logical group operator '%s'. Supported operators are 'and'"," 'or'.","Requested field api name '%s' is not available for the module '%s'. Check permission or visibility for the field.","Invalid field for the module provided in fields. Field api name '%s' is not supported for this module '%s'.","Value exceeded limit %d","Invalid page number for query. Page %s is not supported for the query.","Invalid page number for query. Page %s is not supported for the query. Page range is from %d to %d.","Many requests fired in concurrent than the allowed limit","Callback failed after %d attempts.","Internal server error occurred."],"name":"message","type":"util.Model.Choice"},"status":{"values":["error"],"name":"status","type":"util.Model.Choice"}},"User.Model.CustomizeInfo":{"bcView":{"name":"bc_view","type":"String"},"showDetailView":{"name":"show_detail_view","type":"Boolean"},"showHome":{"name":"show_home","type":"Boolean"},"showRightPanel":{"name":"show_right_panel","type":"String"},"notesDesc":{"name":"notes_desc","type":"Boolean"},"unpinRecentItem":{"name":"unpin_recent_item","type":"String"}},"Function.Model.SuccessResponse":{"code":{"values":["success"],"name":"code","type":"util.Model.Choice"},"details":{"keys":[{"name":"userMessage","type":"List"},{"name":"output_type","type":"String"},{"name":"id","type":"String"},{"name":"output","type":"String"}],"name":"details","type":"Map"},"message":{"values":["function executed successfully"],"name":"message","type":"util.Model.Choice"}},"Note.Model.Note":{"owner":{"lookup":true,"structure_name":"User.Model.User","name":"Owner","type":"User.Model.User"},"modifiedTime":{"name":"Modified_Time","type":"DateTime"},"noteTitle":{"name":"Note_Title","type":"String"},"noteContent":{"name":"Note_Content","type":"String","required":true},"attachments":{"lookup":true,"structure_name":"Attachment.Model.Attachment","name":"$attachments","type":"List"},"voiceNote":{"name":"$voice_note","type":"Boolean"},"editable":{"name":"$editable","type":"Boolean"},"isSharedToClient":{"name":"$is_shared_to_client","type":"Boolean"},"parentId":{"lookup":true,"structure_name":"Record.Model.Record","name":"Parent_Id","type":"Record.Model.Record","required":true},"seModule":{"name":"$se_module","type":"String","required":true},"size":{"name":"$size","type":"String"},"createdBy":{"lookup":true,"structure_name":"User.Model.User","name":"Created_By","type":"User.Model.User"},"createdTime":{"name":"Created_Time","type":"DateTime"},"modifiedBy":{"lookup":true,"structure_name":"User.Model.User","name":"Modified_By","type":"User.Model.User"},"state":{"name":"$state","type":"String"},"id":{"name":"id","type":"Long","primary":true}},"Layout.Model.GetLayoutsParam":{"module":{"name":"module","type":"String"}},"Record.Model.GetRecordsHeader":{"IfModifiedSince":{"name":"If-Modified-Since","type":"DateTime"},"XEXTERNAL":{"name":"X-EXTERNAL","type":"String"}},"RelatedRecord.Model.GetRelatedRecordsUsingExternalIDHeader":{"xExternal":{"name":"X-EXTERNAL","type":"String"},"IfModifiedSince":{"name":"If-Modified-Since","type":"DateTime"}},"Org.Model.APIException":{"code":{"values":["INVALID_TOKEN","INVALID_URL_PATTERN","INVALID_REQUEST_METHOD","INTERNAL_ERROR","INVALID_DATA"],"name":"code","type":"util.Model.Choice"},"details":{"name":"details","type":"Map"},"message":{"values":["invalid oauth token","Please check if the URL trying to access is a correct one","The http request method type is not a valid one","The module name given seems to be invalid","the request does not contain any file","invalid file type","Internal server error occurred."],"name":"message","type":"util.Model.Choice"},"status":{"values":["error"],"name":"status","type":"util.Model.Choice"}},"Tag.Model.GetRecordCountForTagParam":{"module":{"name":"module","type":"String","required":true}},"BluePrint.Model.ActionResponse":{"classes":["BluePrint.Model.SuccessResponse","BluePrint.Model.APIException"],"interface":true},"Layout.Model.GetLayoutParam":{"module":{"name":"module","type":"String"}},"Tag.Model.CreateTagsParam":{"module":{"name":"module","type":"String","required":true}},"Query.Model.BodyWrapper":{"selectQuery":{"name":"select_query","type":"String","required":true}},"ContactRole.Model.DeleteContactRolesParam":{"ids":{"name":"ids","type":"String"}},"CustomView.Model.APIException":{"code":{"values":["NO_PERMISSION","INVALID_TOKEN","INVALID_URL_PATTERN","INVALID_REQUEST_METHOD","REQUIRED_PARAM_MISSING","INVALID_MODULE","INTERNAL_ERROR","INVALID_DATA"],"name":"code","type":"util.Model.Choice"},"details":{"keys":[{"name":"permissions","type":"List"},{"name":"expected_data_type","type":"String"},{"name":"api_name","type":"String"},{"structure_name":"CustomView.Model.Range","name":"range","type":"CustomView.Model.Range"},{"name":"json_path","type":"String"},{"name":"resource_path_index","type":"Integer"}],"name":"details","type":"Map"},"message":{"values":["invalid oauth token","Please check if the URL trying to access is a correct one","The http request method type is not a valid one","The module name given seems to be invalid","The given module is not supported in API","invalid data","Invalid ID","Internal server error occurred."],"name":"message","type":"util.Model.Choice"},"status":{"values":["error"],"name":"status","type":"util.Model.Choice"}},"RelatedRecord.Model.GetRelatedRecordsHeader":{"xExternal":{"name":"X-EXTERNAL","type":"String"},"IfModifiedSince":{"name":"If-Modified-Since","type":"DateTime"}},"Org.Model.LicenseDetails":{"paidType":{"name":"paid_type","type":"String"},"trialType":{"name":"trial_type","type":"String"},"paidExpiry":{"name":"paid_expiry","type":"DateTime"},"paid":{"name":"paid","type":"Boolean"},"usersLicensePurchased":{"name":"users_license_purchased","type":"Long"},"trialExpiry":{"name":"trial_expiry","type":"String"}},"Module.Model.ResponseWrapper":{"modules":{"structure_name":"Module.Model.Module","name":"modules","type":"List"}},"Record.Model.Criteria":{"comparator":{"values":["equal","not_equal","in","not_in","less_than","less_equal","greater_than","greater_equal","contains","not_contains","starts_with","ends_with","between","not_between"],"name":"comparator","type":"util.Model.Choice"},"groupOperator":{"values":["and","or"],"name":"group_operator","type":"util.Model.Choice"},"field":{"name":"field","type":"String"},"value":{"name":"value","type":"Object"},"group":{"lookup":true,"structure_name":"Record.Model.Criteria","name":"group","type":"List"}},"Notification.Model.ActionHandler":{"classes":["Notification.Model.APIException","Notification.Model.ActionWrapper"],"interface":true},"Tax.Model.ActionWrapper":{"taxes":{"structure_name":"Tax.Model.ActionResponse","name":"taxes","type":"List"}},"ShareRecord.Model.ActionResponse":{"classes":["ShareRecord.Model.SuccessResponse","ShareRecord.Model.APIException"],"interface":true},"Tag.Model.RecordActionWrapper":{"lockedCount":{"name":"locked_count","type":"Integer"},"data":{"structure_name":"Tag.Model.RecordActionResponse","name":"data","type":"List"},"successCount":{"name":"success_count","type":"String"},"wfScheduler":{"name":"wf_scheduler","type":"Boolean"}},"VariableGroup.Model.ResponseWrapper":{"variableGroups":{"structure_name":"VariableGroup.Model.VariableGroup","name":"variable_groups","type":"List"}},"User.Model.GetUsersParam":{"perPage":{"name":"per_page","type":"Integer"},"page":{"name":"page","type":"Integer"},"type":{"name":"type","type":"String","required":true}},"Record.Model.Info":{"perPage":{"name":"per_page","type":"Integer"},"moreRecords":{"name":"more_records","type":"Boolean"},"count":{"name":"count","type":"Integer"},"page":{"name":"page","type":"Integer"}},"Field.Model.ResponseWrapper":{"fields":{"structure_name":"Field.Model.Field","name":"fields","type":"List"}},"ContactRole.Model.ContactRole":{"sequenceNumber":{"name":"sequence_number","type":"Integer"},"name":{"unique":true,"name":"name","type":"String","required":true},"id":{"name":"id","type":"Long","primary":true}},"BulkRead.Model.JobDetail":{"result":{"structure_name":"BulkRead.Model.Result","name":"result","type":"BulkRead.Model.Result"},"createdBy":{"structure_name":"User.Model.User","name":"created_by","type":"User.Model.User"},"query":{"structure_name":"BulkRead.Model.Query","name":"query","type":"BulkRead.Model.Query"},"createdTime":{"name":"created_time","type":"DateTime"},"id":{"name":"id","type":"Long","primary":true},"state":{"values":["COMPLETED","IN PROGRESS","ADDED","FAILURE"],"name":"state","type":"util.Model.Choice"},"operation":{"name":"operation","type":"String"},"fileType":{"name":"file_type","type":"String"}},"Note.Model.ActionHandler":{"classes":["Note.Model.ActionWrapper","Note.Model.APIException"],"interface":true},"Module.Model.ActionWrapper":{"modules":{"structure_name":"Module.Model.ActionResponse","name":"modules","type":"List"}},"User.Model.Territory":{"manager":{"name":"manager","type":"Boolean"},"name":{"name":"name","type":"String"},"id":{"name":"id","type":"Long"}},"Tag.Model.RecordActionHandler":{"classes":["Tag.Model.APIException","Tag.Model.RecordActionWrapper"],"interface":true},"ContactRole.Model.ContactRoleWrapper":{"contactRole":{"required-in-update":true,"name":"Contact_Role","type":"String"}},"VariableGroup.Model.ResponseHandler":{"classes":["VariableGroup.Model.ResponseWrapper","VariableGroup.Model.APIException"],"interface":true},"Module.Model.ResponseHandler":{"classes":["Module.Model.APIException","Module.Model.ResponseWrapper"],"interface":true},"Field.Model.GetFieldsParam":{"module":{"name":"module","type":"String"},"type":{"name":"type","type":"String"}},"BulkWrite.Model.APIException":{"code":{"values":["INVALID_TOKEN","INVALID_URL_PATTERN","INVALID_REQUEST_METHOD","FILE_TOO_LARGE","INVALID_FILE_FORMAT","MANDATORY_FIELDS_NOT_MAPPED","MANDATORY_NOT_FOUND","INVALID_FIELD","INVALID_FORMAT","INVALID_FILE_ID","HEADER_LIMIT_EXCEEDED","COLUMN_INDEX_NOT_FOUND","MODULE_NOT_AVAILABLE","INVALID_DATA","DUPLICATE_DATA","NOT_APPROVED","BLOCKED_RECORD","CANNOT_PROCESS","LIMIT_EXCEEDED","RESOURCE_NOT_FOUND","MISSING_REQUIRED_KEY","INVALID_FIELD_NAME","FILE_NOT_SUPPORTED","INTERNAL_ERROR"],"name":"code","type":"util.Model.Choice"},"xError":{"values":["check if headers [feature:X-CRM-ORG] are present and valid"],"name":"x-error","type":"util.Model.Choice"},"httpStatus":{"name":"http_status","type":"String"},"errorMessage":{"values":["Bad Request"],"name":"ERROR_MESSAGE","type":"util.Model.Choice"},"errorCode":{"name":"ERROR_CODE","type":"Integer"},"details":{"name":"details","type":"Map"},"xInfo":{"values":["Link not valid"],"name":"x-info","type":"util.Model.Choice"},"message":{"values":["invalid oauth token","Please check if the URL trying to access is a correct one","The http request method type is not a valid one","invalid file format. only zip format is supported","File size too large to process","The requested resource doesn't exist.","required key operation is not found in request body.","improper file id","required key index for field Company is not found in request body.","All mandatory fields are not mapped for the layout","Requested module 'asdf' is not available.","invalid mapping. invalid api_name ast_Name.","File not supported for bulk write","Internal server error occurred."],"name":"message","type":"util.Model.Choice"},"status":{"values":["error"],"name":"status","type":"util.Model.Choice"},"info":{"values":["Forbidden"],"name":"info","type":"util.Model.Choice"}},"RelatedRecord.Model.GetRelatedRecordsParam":{"perPage":{"name":"per_page","type":"Integer"},"page":{"name":"page","type":"Integer"}},"User.Model.User":{"country":{"name":"country","type":"String"},"lastName":{"name":"last_name","type":"String","required":true},"role":{"lookup":true,"structure_name":"Role.Model.Role","name":"role","type":"Role.Model.Role","required":true},"decimalSeparator":{"name":"decimal_separator","type":"String"},"signature":{"name":"signature","type":"String"},"city":{"name":"city","type":"String"},"dateFormat":{"name":"date_format","type":"String"},"language":{"name":"language","type":"String"},"countryLocale":{"name":"country_locale","type":"String"},"locale":{"name":"locale","type":"String"},"microsoft":{"name":"microsoft","type":"Boolean"},"isonline":{"name":"Isonline","type":"Boolean"},"nameFormat":{"name":"name_format","type":"String"},"street":{"name":"street","type":"String"},"alias":{"name":"alias","type":"String"},"currency":{"name":"Currency","type":"String"},"theme":{"lookup":true,"structure_name":"User.Model.Theme","name":"theme","type":"User.Model.Theme"},"personalAccount":{"name":"personal_account","type":"Boolean"},"state":{"name":"state","type":"String"},"fax":{"name":"fax","type":"String"},"email":{"name":"email","type":"String","required":true},"reportingTo":{"lookup":true,"structure_name":"User.Model.User","name":"Reporting_To","type":"User.Model.User"},"zip":{"name":"zip","type":"String"},"website":{"name":"website","type":"String"},"offset":{"name":"offset","type":"Long"},"profile":{"lookup":true,"structure_name":"Profile.Model.Profile","name":"profile","type":"Profile.Model.Profile","required":true},"mobile":{"name":"mobile","type":"String"},"timeZone":{"name":"time_zone","type":"String"},"fullName":{"name":"full_name","type":"String"},"customizeInfo":{"lookup":true,"structure_name":"User.Model.CustomizeInfo","name":"customize_info","type":"User.Model.CustomizeInfo"},"zuid":{"name":"zuid","type":"String"},"confirm":{"name":"confirm","type":"Boolean"},"firstName":{"name":"first_name","type":"String"},"territories":{"lookup":true,"structure_name":"User.Model.Territory","name":"territories","type":"List"},"phone":{"name":"phone","type":"String"},"dob":{"name":"dob","type":"String"},"timeFormat":{"name":"time_format","type":"String"},"name":{"name":"name","type":"String"},"defaultTabGroup":{"name":"default_tab_group","type":"String"},"status":{"name":"status","type":"String"}},"Record.Model.DownloadHandler":{"classes":["Record.Model.APIException","Record.Model.FileBodyWrapper"],"interface":true},"util.Model.Model":{"classes":["Attachment.Model.SuccessResponse","Attachment.Model.APIException","Attachment.Model.Attachment","Attachment.Model.ActionWrapper","Attachment.Model.ResponseWrapper","Attachment.Model.FileBodyWrapper","Note.Model.ActionWrapper","Note.Model.SuccessResponse","Note.Model.BodyWrapper","Note.Model.APIException","Note.Model.Info","Note.Model.ResponseWrapper","Note.Model.Note","Function.Model.APIException","Function.Model.BodyWrapper","Function.Model.FileBodyWrapper","Function.Model.SuccessResponse","Role.Model.Role","Role.Model.APIException","Role.Model.ResponseWrapper","RelatedList.Model.ResponseWrapper","RelatedList.Model.RelatedList","RelatedList.Model.APIException","Tax.Model.Preference","Tax.Model.ActionWrapper","Tax.Model.SuccessResponse","Tax.Model.APIException","Tax.Model.ResponseWrapper","Tax.Model.BodyWrapper","Tax.Model.Tax","Layout.Model.ResponseWrapper","Layout.Model.Section","Layout.Model.APIException","Layout.Model.Properties","Layout.Model.Layout","BulkWrite.Model.CallBack","BulkWrite.Model.SuccessResponse","BulkWrite.Model.RequestWrapper","BulkWrite.Model.APIException","BulkWrite.Model.BulkWriteResponse","BulkWrite.Model.File","BulkWrite.Model.Resource","BulkWrite.Model.FieldMapping","BulkWrite.Model.FileBodyWrapper","BulkWrite.Model.Result","CustomView.Model.SharedDetails","CustomView.Model.Translation","CustomView.Model.ResponseWrapper","CustomView.Model.Info","CustomView.Model.CustomView","CustomView.Model.Criteria","CustomView.Model.Range","CustomView.Model.APIException","Notification.Model.SuccessResponse","Notification.Model.Info","Notification.Model.BodyWrapper","Notification.Model.APIException","Notification.Model.ActionWrapper","Notification.Model.ResponseWrapper","Notification.Model.Notification","BluePrint.Model.Transition","BluePrint.Model.BluePrint","BluePrint.Model.SuccessResponse","BluePrint.Model.BodyWrapper","BluePrint.Model.NextTransition","BluePrint.Model.ProcessInfo","BluePrint.Model.ResponseWrapper","BluePrint.Model.APIException","BluePrint.Model.ValidationError","File.Model.BodyWrapper","File.Model.SuccessResponse","File.Model.ActionWrapper","File.Model.APIException","File.Model.FileBodyWrapper","Record.Model.ResponseWrapper","Record.Model.Consent","Record.Model.SuccessResponse","Record.Model.ConvertActionWrapper","Record.Model.MassUpdateBodyWrapper","Record.Model.APIException","Record.Model.Territory","Record.Model.SuccessfulConvert","Record.Model.LeadConverter","Record.Model.BodyWrapper","Record.Model.Criteria","Record.Model.MassUpdateActionWrapper","Record.Model.Info","Record.Model.FileBodyWrapper","Record.Model.InventoryLineItems","Record.Model.MassUpdate","Record.Model.ActionWrapper","Record.Model.Record","Record.Model.RemindAt","Record.Model.Participants","Record.Model.ConvertBodyWrapper","Record.Model.MassUpdateResponseWrapper","Record.Model.FileDetails","Record.Model.Reminder","Record.Model.DeletedRecordsWrapper","Record.Model.DeletedRecord","Record.Model.LineTax","Record.Model.RecurringActivity","Record.Model.LineItemProduct","Record.Model.Comment","Record.Model.CarryOverTags","Record.Model.MassUpdateSuccessResponse","Record.Model.PricingDetails","RelatedRecord.Model.APIException","RelatedRecord.Model.SuccessResponse","RelatedRecord.Model.BodyWrapper","RelatedRecord.Model.ActionWrapper","RelatedRecord.Model.ResponseWrapper","RelatedRecord.Model.FileBodyWrapper","ShareRecord.Model.SuccessResponse","ShareRecord.Model.SharedThrough","ShareRecord.Model.APIException","ShareRecord.Model.ResponseWrapper","ShareRecord.Model.ShareRecord","ShareRecord.Model.DeleteActionWrapper","ShareRecord.Model.BodyWrapper","ShareRecord.Model.ActionWrapper","BulkRead.Model.Criteria","BulkRead.Model.Query","BulkRead.Model.RequestWrapper","BulkRead.Model.SuccessResponse","BulkRead.Model.JobDetail","BulkRead.Model.Result","BulkRead.Model.CallBack","BulkRead.Model.ResponseWrapper","BulkRead.Model.APIException","BulkRead.Model.ActionWrapper","BulkRead.Model.FileBodyWrapper","Variable.Model.ResponseWrapper","Variable.Model.BodyWrapper","Variable.Model.APIException","Variable.Model.Variable","Variable.Model.SuccessResponse","Variable.Model.ActionWrapper","Org.Model.SuccessResponse","Org.Model.ResponseWrapper","Org.Model.Org","Org.Model.LicenseDetails","Org.Model.APIException","Org.Model.FileBodyWrapper","Query.Model.ResponseWrapper","Query.Model.BodyWrapper","Query.Model.APIException","Profile.Model.APIException","Profile.Model.Category","Profile.Model.Profile","Profile.Model.PermissionDetail","Profile.Model.Section","Profile.Model.ResponseWrapper","User.Model.ActionWrapper","User.Model.SuccessResponse","User.Model.ResponseWrapper","User.Model.Territory","User.Model.CustomizeInfo","User.Model.Theme","User.Model.BodyWrapper","User.Model.Info","User.Model.Shift","User.Model.RequestWrapper","User.Model.User","User.Model.APIException","User.Model.TabTheme","Module.Model.Module","Module.Model.Territory","Module.Model.APIException","Module.Model.SuccessResponse","Module.Model.ActionWrapper","Module.Model.ResponseWrapper","Module.Model.Argument","Module.Model.RelatedListProperties","Module.Model.BodyWrapper","Tag.Model.MergeWrapper","Tag.Model.ActionWrapper","Tag.Model.BodyWrapper","Tag.Model.ResponseWrapper","Tag.Model.Tag","Tag.Model.Info","Tag.Model.SuccessResponse","Tag.Model.APIException","Tag.Model.RecordActionWrapper","Tag.Model.CountWrapper","Tag.Model.ConflictWrapper","Territory.Model.Territory","Territory.Model.APIException","Territory.Model.ResponseWrapper","ContactRole.Model.ResponseWrapper","ContactRole.Model.SuccessResponse","ContactRole.Model.RecordBodyWrapper","ContactRole.Model.BodyWrapper","ContactRole.Model.RecordActionWrapper","ContactRole.Model.ContactRoleWrapper","ContactRole.Model.RecordResponseWrapper","ContactRole.Model.APIException","ContactRole.Model.ActionWrapper","ContactRole.Model.ContactRole","Field.Model.RelatedDetails","Field.Model.Field","Field.Model.Unique","Field.Model.Crypt","Field.Model.ViewType","Field.Model.AutoNumber","Field.Model.MultiSelectLookup","Field.Model.PickListValue","Field.Model.ResponseWrapper","Field.Model.ToolTip","Field.Model.Currency","Field.Model.Formula","Field.Model.Private","Field.Model.LookupField","Field.Model.APIException","Field.Model.Module","Field.Model.AssociationDetails","VariableGroup.Model.ResponseWrapper","VariableGroup.Model.VariableGroup","VariableGroup.Model.APIException","Currency.Model.Currency","Currency.Model.ResponseWrapper","Currency.Model.SuccessResponse","Currency.Model.BaseCurrencyWrapper","Currency.Model.ActionWrapper","Currency.Model.APIException","Currency.Model.BodyWrapper","Currency.Model.Format","Currency.Model.BaseCurrencyActionWrapper"],"interface":true},"Tag.Model.UpdateTagsParam":{"module":{"name":"module","type":"String","required":true}},"Record.Model.MassUpdateBodyWrapper":{"cvid":{"name":"cvid","type":"String"},"data":{"structure_name":"Record.Model.Record","skip-mandatory":true,"name":"data","type":"List","required":true},"criteria":{"structure_name":"Record.Model.Criteria","name":"criteria","type":"List"},"ids":{"name":"ids","type":"List"},"territory":{"structure_name":"Record.Model.Territory","name":"territory","type":"Record.Model.Territory"},"overWrite":{"name":"over_write","type":"Boolean"}},"File.Model.SuccessResponse":{"code":{"values":["SUCCESS"],"name":"code","type":"util.Model.Choice"},"details":{"keys":[{"name":"name","type":"String"},{"name":"id","type":"String"}],"name":"details","type":"Map"},"message":{"values":["uploaded Succeessfully"],"name":"message","type":"util.Model.Choice"},"status":{"values":["success"],"name":"status","type":"util.Model.Choice"}},"BluePrint.Model.Transition":{"executionTime":{"name":"execution_time","type":"DateTime"},"criteriaMatched":{"name":"criteria_matched","type":"Boolean"},"percentPartialSave":{"name":"percent_partial_save","type":"Double"},"data":{"structure_name":"Record.Model.Record","skip-mandatory":true,"name":"data","type":"Record.Model.Record"},"nextTransitions":{"lookup":true,"structure_name":"BluePrint.Model.NextTransition","name":"next_transitions","type":"List"},"name":{"name":"name","type":"String"},"criteriaMessage":{"name":"criteria_message","type":"String"},"nextFieldValue":{"name":"next_field_value","type":"String"},"id":{"name":"id","type":"Long"},"fields":{"lookup":true,"structure_name":"Field.Model.Field","name":"fields","type":"List"},"type":{"name":"type","type":"String"}},"User.Model.GetUsersHeader":{"IfModifiedSince":{"name":"If-Modified-Since","type":"DateTime"}},"Attachment.Model.ActionResponse":{"classes":["Attachment.Model.SuccessResponse","Attachment.Model.APIException"],"interface":true},"Record.Model.Reminder":{"period":{"name":"period","type":"String","required":true},"unit":{"name":"unit","type":"String","required":true}},"Profile.Model.APIException":{"code":{"values":["INVALID_TOKEN","INVALID_URL_PATTERN","INVALID_REQUEST_METHOD","INTERNAL_ERROR"],"name":"code","type":"util.Model.Choice"},"details":{"name":"details","type":"Map"},"message":{"values":["invalid oauth token","Please check if the URL trying to access is a correct one","The http request method type is not a valid one","The module name given seems to be invalid","Internal server error occurred."],"name":"message","type":"util.Model.Choice"},"status":{"values":["error"],"name":"status","type":"util.Model.Choice"}},"ContactRole.Model.BodyWrapper":{"contactRoles":{"structure_name":"ContactRole.Model.ContactRole","name":"contact_roles","max-length":100,"type":"List","required":true,"min-length":1}},"Territory.Model.Territory":{"modifiedTime":{"name":"modified_time","type":"DateTime"},"manager":{"structure_name":"User.Model.User","name":"manager","type":"User.Model.User"},"createdBy":{"structure_name":"User.Model.User","name":"created_by","type":"User.Model.User"},"criteria":{"structure_name":"CustomView.Model.Criteria","name":"criteria","type":"CustomView.Model.Criteria"},"name":{"name":"name","type":"String"},"createdTime":{"name":"created_time","type":"DateTime"},"description":{"name":"description","type":"String"},"modifiedBy":{"structure_name":"User.Model.User","name":"modified_by","type":"User.Model.User"},"id":{"name":"id","type":"Long","primary":true},"parentId":{"name":"parent_id","type":"String"}},"RelatedRecord.Model.UpdateRelatedRecordHeader":{"xExternal":{"name":"X-EXTERNAL","type":"String"}},"Attachment.Model.APIException":{"code":{"values":["NO_PERMISSION","INVALID_TOKEN","INVALID_URL_PATTERN","INVALID_REQUEST_METHOD","INVALID_DATA","INTERNAL_ERROR"],"name":"code","type":"util.Model.Choice"},"details":{"keys":[{"name":"permissions","type":"List"},{"name":"id","type":"Long"},{"name":"resource_path_index","type":"Integer"},{"name":"related_status","type":"String"},{"name":"param_name","type":"String"}],"name":"details","type":"Map"},"message":{"values":["As it is a linked attachment"," you can not download it","invalid oauth token","Please check if the URL trying to access is a correct one","The http request method type is not a valid one","record not deleted","the related id given seems to be invalid","Attachment link already exists","Internal server error occurred."],"name":"message","type":"util.Model.Choice"},"status":{"values":["error"],"name":"status","type":"util.Model.Choice"}},"Attachment.Model.GetAttachmentsParam":{"perPage":{"name":"per_page","type":"Integer"},"page":{"name":"page","type":"Integer"},"fields":{"name":"fields","type":"String"}},"Profile.Model.Profile":{"displayLabel":{"name":"display_label","type":"String"},"modifiedTime":{"name":"modified_time","type":"DateTime"},"permissionsDetails":{"structure_name":"Profile.Model.PermissionDetail","name":"permissions_details","type":"List"},"description":{"name":"description","type":"String"},"delete1":{"name":"_delete","type":"Boolean"},"sections":{"structure_name":"Profile.Model.Section","name":"sections","type":"List"},"createdBy":{"structure_name":"User.Model.User","name":"created_by","type":"User.Model.User"},"default1":{"name":"default","type":"Boolean"},"name":{"name":"name","type":"String"},"createdTime":{"name":"created_time","type":"DateTime"},"modifiedBy":{"structure_name":"User.Model.User","name":"modified_by","type":"User.Model.User"},"id":{"name":"id","type":"Long","primary":true},"category":{"name":"category","type":"Boolean"}},"Tax.Model.ActionResponse":{"classes":["Tax.Model.SuccessResponse","Tax.Model.APIException"],"interface":true},"Note.Model.ResponseWrapper":{"data":{"structure_name":"Note.Model.Note","name":"data","type":"List"},"info":{"structure_name":"Note.Model.Info","name":"info","type":"Note.Model.Info"}},"BulkWrite.Model.ResponseHandler":{"classes":["BulkWrite.Model.APIException","BulkWrite.Model.FileBodyWrapper"],"interface":true},"Tag.Model.RemoveTagsFromRecordParam":{"tagNames":{"name":"tag_names","type":"String","required":true}},"Variable.Model.ActionResponse":{"classes":["Variable.Model.APIException","Variable.Model.SuccessResponse"],"interface":true},"Tax.Model.APIException":{"code":{"values":["OAUTH_SCOPE_MISMATCH","INVALID_TOKEN","INVALID_URL_PATTERN","INVALID_REQUEST_METHOD","MANDATORY_NOT_FOUND","INVALID_DATA","INTERNAL_ERROR"],"name":"code","type":"util.Model.Choice"},"details":{"keys":[{"name":"api_name","type":"String"},{"name":"id","type":"Long"},{"name":"name","type":"String"},{"name":"value","type":"String"},{"name":"maximum_length","type":"Integer"}],"name":"details","type":"Map"},"message":{"values":["invalid oauth token","Please check if the URL trying to access is a correct one","The http request method type is not a valid one","required field not found","Sequence number out of range","Sequence number cannot be repeated in same request","Given ID does not exist","tax not deleted"],"name":"message","type":"util.Model.Choice"},"status":{"values":["error"],"name":"status","type":"util.Model.Choice"}},"ShareRecord.Model.ResponseHandler":{"classes":["ShareRecord.Model.APIException","ShareRecord.Model.ResponseWrapper"],"interface":true},"RelatedRecord.Model.UpdateRelatedRecordsHeader":{"xExternal":{"name":"X-EXTERNAL","type":"String"}},"Record.Model.MassUpdateResponse":{"classes":["Record.Model.APIException","Record.Model.MassUpdate"],"interface":true},"Profile.Model.GetProfilesHeader":{"ifModifiedSince":{"name":"If-Modified-Since","type":"DateTime"}},"Variable.Model.SuccessResponse":{"code":{"values":["SUCCESS"],"name":"code","type":"util.Model.Choice"},"details":{"keys":[{"name":"id","type":"Long"}],"name":"details","type":"Map"},"message":{"values":["variable added","variable updated","variable deleted"],"name":"message","type":"util.Model.Choice"},"status":{"values":["success"],"name":"status","type":"util.Model.Choice"}},"Record.Model.MassUpdateActionHandler":{"classes":["Record.Model.APIException","Record.Model.MassUpdateActionWrapper"],"interface":true},"ShareRecord.Model.DeleteActionHandler":{"classes":["ShareRecord.Model.APIException","ShareRecord.Model.DeleteActionWrapper"],"interface":true},"BulkWrite.Model.ActionResponse":{"classes":["BulkWrite.Model.SuccessResponse","BulkWrite.Model.APIException"],"interface":true},"RelatedList.Model.GetRelatedListParam":{"module":{"name":"module","type":"String"}},"Variable.Model.ActionWrapper":{"variables":{"structure_name":"Variable.Model.ActionResponse","name":"variables","type":"List","required":true}},"Layout.Model.ResponseHandler":{"classes":["Layout.Model.ResponseWrapper","Layout.Model.APIException"],"interface":true},"RelatedList.Model.ResponseWrapper":{"relatedLists":{"structure_name":"RelatedList.Model.RelatedList","name":"related_lists","type":"List"}},"User.Model.Shift":{"name":{"name":"name","type":"String"},"id":{"name":"id","type":"Long"}},"Record.Model.DeleteRecordHeader":{"XEXTERNAL":{"name":"X-EXTERNAL","type":"String"}},"Field.Model.AutoNumber":{"startNumber":{"name":"start_number","type":"Integer"},"prefix":{"name":"prefix","type":"String"},"suffix":{"name":"suffix","type":"String"}},"BluePrint.Model.NextTransition":{"name":{"name":"name","type":"String"},"id":{"name":"id","type":"Long"}},"Variable.Model.APIException":{"code":{"values":["UNABLE_TO_PARSE_DATA_TYPE","REQUIRED_PARAM_MISSING","DUPLICATE_DATA","INVALID_DATA","OAUTH_SCOPE_MISMATCH","INVALID_TOKEN","INTERNAL_ERROR","INVALID_URL_PATTERN","INVALID_REQUEST_METHOD"],"name":"code","type":"util.Model.Choice"},"details":{"keys":[{"name":"param","type":"String"},{"name":"api_name","type":"String"},{"name":"id","type":"Long"}],"name":"details","type":"Map"},"message":{"values":["either the request body or parameters is in wrong format","One of the expected parameter is missing","duplicate data","variable not deleted","invalid oauth token","Please check if the URL trying to access is a correct one","The http request method type is not a valid one","Internal server error occurred."],"name":"message","type":"util.Model.Choice"},"status":{"values":["error"],"name":"status","type":"util.Model.Choice"}},"BulkRead.Model.Result":{"perPage":{"name":"per_page","type":"Integer"},"moreRecords":{"name":"more_records","type":"Boolean"},"count":{"name":"count","type":"Integer"},"downloadUrl":{"name":"download_url","type":"String"},"page":{"name":"page","type":"Integer"}},"Function.Model.APIException":{"code":{"values":["SERVICE_NOT_FOUND","CONNECTION_TIMEOUT","AUTHORIZATION_FAILED","NO_PERMISSION","INVALID_DATA","MANDATORY_NOT_FOUND","NO_PERMISSION","FEATURE_NOT_AVAILABLE","UNCONFIRMED_EMAIL","PATTERN_NOT_MATCHED","INVALID_DATA","FUNCTION_NOT_CREATED","FUNCTION_NOT_UPDATED","FUNCTION_NOT_DELETED","NO_PERMISSION"],"name":"code","type":"util.Model.Choice"},"details":{"keys":[{"name":"api_name","type":"String"},{"name":"permissions","type":"List"}],"name":"details","type":"Map"},"message":{"values":["service unavailable. please try after sometime","unable to connect. please try after sometime","unable to authorize your request.","no permission to perform an action on this record","your edition doesn't support this feature","please confirm your email","failed to update function","unable to delete a configured function.","permission denied","invalid file type"],"name":"message","type":"util.Model.Choice"},"status":{"values":["error"],"name":"status","type":"util.Model.Choice"}},"Tag.Model.RemoveTagsFromMultipleRecordsParam":{"ids":{"name":"ids","type":"Long","required":true},"tagNames":{"name":"tag_names","type":"String","required":true}},"Record.Model.Consent":{"owner":{"lookup":true,"structure_name":"User.Model.User","name":"Owner","type":"User.Model.User"},"mailSentTime":{"name":"Mail_Sent_Time","type":"DateTime"},"consentThrough":{"name":"Consent_Through","type":"String"},"contactThroughSocial":{"name":"Contact_Through_Social","type":"Boolean"},"contactThroughPhone":{"name":"Contact_Through_Phone","type":"Boolean"},"contactThroughSurvey":{"name":"Contact_Through_Survey","type":"Boolean"},"consentDate":{"name":"Consent_Date","type":"LocalDate"},"dataProcessingBasis":{"name":"Data_Processing_Basis","type":"String"},"contactThroughEmail":{"name":"Contact_Through_Email","type":"Boolean"},"consentRemarks":{"name":"Consent_Remarks","type":"String"}},"Layout.Model.APIException":{"code":{"values":["INVALID_TOKEN","INVALID_URL_PATTERN","INVALID_REQUEST_METHOD","INVALID_MODULE","REQUIRED_PARAM_MISSING","INTERNAL_ERROR","NO_PERMISSION","INVALID_DATA"],"name":"code","type":"util.Model.Choice"},"details":{"name":"details","type":"Map"},"message":{"values":["invalid oauth token","Please check if the URL trying to access is a correct one","The http request method type is not a valid one","User does not have permission to access this layout.","Layout does not belongs to the given module","Internal server error occurred."],"name":"message","type":"util.Model.Choice"},"status":{"values":["error"],"name":"status","type":"util.Model.Choice"}},"Org.Model.ResponseHandler":{"classes":["Org.Model.ResponseWrapper","Org.Model.APIException"],"interface":true},"Record.Model.DeleteRecordsHeader":{"XEXTERNAL":{"name":"X-EXTERNAL","type":"String"}},"Module.Model.BodyWrapper":{"modules":{"structure_name":"Module.Model.Module","name":"modules","max-length":1,"type":"List","min-length":1}},"Note.Model.Info":{"perPage":{"name":"per_page","type":"Integer"},"moreRecords":{"name":"more_records","type":"Boolean"},"count":{"name":"count","type":"Integer"},"page":{"name":"page","type":"Integer"}},"Function.Model.ExecuteFunctionUsingFileParam":{"uploadFileParam":{"name":"upload_file_param","type":"Map"},"arguments1":{"name":"arguments","type":"Map"},"authType":{"name":"auth_type","type":"String"}},"Record.Model.RemindAt":{"alarm":{"name":"ALARM","type":"String","required":true}},"Record.Model.GetDeletedRecordsHeader":{"IfModifiedSince":{"name":"If-Modified-Since","type":"DateTime"}},"BulkWrite.Model.Result":{"downloadUrl":{"name":"download_url","type":"String"}},"File.Model.ActionWrapper":{"data":{"structure_name":"File.Model.ActionResponse","name":"data","type":"List"}},"Tag.Model.ActionResponse":{"classes":["Tag.Model.SuccessResponse","Tag.Model.APIException"],"interface":true},"Variable.Model.DeleteVariablesParam":{"ids":{"name":"ids","type":"Long","required":true}},"Currency.Model.ResponseHandler":{"classes":["Currency.Model.ResponseWrapper","Currency.Model.APIException"],"interface":true},"Record.Model.SuccessfulConvert":{"deals":{"name":"Deals","type":"String"},"accounts":{"name":"Accounts","type":"String"},"contacts":{"name":"Contacts","type":"String"}},"Record.Model.ConvertActionHandler":{"classes":["Record.Model.ConvertActionWrapper","Record.Model.APIException"],"interface":true},"Record.Model.GetRecordHeader":{"IfModifiedSince":{"name":"If-Modified-Since","type":"DateTime"},"XEXTERNAL":{"name":"X-EXTERNAL","type":"String"}},"Field.Model.ViewType":{"view":{"name":"view","type":"Boolean"},"edit":{"name":"edit","type":"Boolean"},"quickCreate":{"name":"quick_create","type":"Boolean"},"create":{"name":"create","type":"Boolean"}},"Tag.Model.APIException":{"code":{"values":["REQUIRED_PARAM_MISSING","MANDATORY_NOT_FOUND","INVALID_MODULE","DUPLICATE_DATA","TAG_ID_NOT_FOUND","FAILURE","INTERNAL_ERROR","NO_PERMISSION","INVALID_TOKEN","INVALID_URL_PATTERN","INVALID_REQUEST_METHOD","INVALID_DATA","LICENSE_LIMIT_EXCEEDED"],"name":"code","type":"util.Model.Choice"},"details":{"keys":[{"name":"api_name","type":"String"},{"name":"id","type":"Long"},{"name":"param","type":"String"},{"name":"permissions","type":"List"},{"name":"maximum_length","type":"Integer"}],"name":"details","type":"Map"},"message":{"values":["tags not found","special characters found in the given name","One of the expected parameter is missing","invalid oauth token","Please check if the URL trying to access is a correct one","The http request method type is not a valid one","record not deleted","the related id given seems to be invalid","Internal server error occurred.","The relation name given seems to be invalid","duplicate data","tag edition limit exceeded","invalid data","tags not updated successfully"],"name":"message","type":"util.Model.Choice"},"status":{"values":["error"],"name":"status","type":"util.Model.Choice"}},"Profile.Model.ResponseHandler":{"classes":["Profile.Model.APIException","Profile.Model.ResponseWrapper"],"interface":true},"RelatedRecord.Model.UpdateRelatedRecordUsingExternalIDHeader":{"xExternal":{"name":"X-EXTERNAL","type":"String"}},"File.Model.BodyWrapper":{"file":{"name":"file","max-length":10,"type":"List","required":true,"min-length":1}},"Notification.Model.SuccessResponse":{"code":{"values":["SUCCESS"],"name":"code","type":"util.Model.Choice"},"details":{"keys":[{"structure_name":"Notification.Model.Notification","name":"events","type":"List"},{"name":"resource_uri","type":"String"},{"name":"resource_id","type":"String"},{"name":"channel_id","type":"Long"}],"name":"details","type":"Map"},"message":{"values":["Successfully subscribed for actions-watch of the given module","Successfully un-subscribed from actions-watch","Successfully updated the subscribe details","Successfully removed the subscribe details"],"name":"message","type":"util.Model.Choice"},"status":{"values":["success"],"name":"status","type":"util.Model.Choice"}},"Tax.Model.ActionHandler":{"classes":["Tax.Model.ActionWrapper","Tax.Model.APIException"],"interface":true},"BulkWrite.Model.ResponseWrapper":{"classes":["BulkWrite.Model.APIException","BulkWrite.Model.BulkWriteResponse"],"interface":true},"Field.Model.Formula":{"expression":{"name":"expression","type":"String"},"returnType":{"name":"return_type","type":"String"}},"BulkWrite.Model.RequestWrapper":{"resource":{"structure_name":"BulkWrite.Model.Resource","name":"resource","type":"List","required":true},"callback":{"structure_name":"BulkWrite.Model.CallBack","name":"callback","type":"BulkWrite.Model.CallBack"},"characterEncoding":{"name":"character_encoding","type":"String"},"operation":{"values":["insert","update","upsert"],"name":"operation","type":"util.Model.Choice","required":true}},"Tag.Model.AddTagsToMultipleRecordsParam":{"ids":{"name":"ids","type":"Long","required":true},"tagNames":{"name":"tag_names","type":"String","required":true},"overWrite":{"name":"over_write","type":"String"}},"Currency.Model.BaseCurrencyActionHandler":{"classes":["Currency.Model.APIException","Currency.Model.BaseCurrencyActionWrapper"],"interface":true},"Profile.Model.GetProfileHeader":{"ifModifiedSince":{"name":"If-Modified-Since","type":"DateTime"}},"ContactRole.Model.ActionHandler":{"classes":["ContactRole.Model.APIException","ContactRole.Model.ActionWrapper"],"interface":true},"Currency.Model.BaseCurrencyActionWrapper":{"baseCurrency":{"structure_name":"Currency.Model.ActionResponse","name":"base_currency","interface":true,"type":"Currency.Model.ActionResponse"}},"Attachment.Model.ResponseWrapper":{"data":{"structure_name":"Attachment.Model.Attachment","name":"data","type":"List"},"info":{"structure_name":"Record.Model.Info","name":"info","type":"Record.Model.Info"}},"Tag.Model.UpdateTagParam":{"module":{"name":"module","type":"String","required":true}},"CustomView.Model.GetCustomViewsParam":{"perPage":{"name":"per_page","type":"Integer"},"module":{"name":"module","type":"String"},"page":{"name":"page","type":"Integer"}},"Record.Model.DeletedRecord":{"createdBy":{"structure_name":"User.Model.User","name":"created_by","type":"User.Model.User"},"displayName":{"name":"display_name","type":"String"},"id":{"name":"id","type":"Long","primary":true},"type":{"name":"type","type":"String"},"deletedTime":{"name":"deleted_time","type":"DateTime"},"deletedBy":{"structure_name":"User.Model.User","name":"deleted_by","type":"User.Model.User"}},"Currency.Model.ActionResponse":{"classes":["Currency.Model.SuccessResponse","Currency.Model.APIException"],"interface":true},"Record.Model.DeleteRecordParam":{"wfTrigger":{"name":"wf_trigger","type":"Boolean"}},"Field.Model.MultiSelectLookup":{"displayLabel":{"name":"display_label","type":"String"},"apiName":{"name":"api_name","type":"String"},"connectedlookupApiname":{"name":"connectedlookup_apiname","type":"String"},"lookupApiname":{"name":"lookup_apiname","type":"String"},"linkingModule":{"name":"linking_module","type":"String"},"id":{"name":"id","type":"Long"}},"Record.Model.ConvertActionResponse":{"classes":["Record.Model.APIException","Record.Model.SuccessfulConvert"],"interface":true},"Record.Model.MassUpdateActionResponse":{"classes":["Record.Model.APIException","Record.Model.MassUpdateSuccessResponse"],"interface":true},"Org.Model.ActionResponse":{"classes":["Org.Model.SuccessResponse","Org.Model.APIException"],"interface":true},"ShareRecord.Model.ActionWrapper":{"share":{"structure_name":"ShareRecord.Model.ActionResponse","name":"share","type":"List"}},"Function.Model.ExecuteFunctionUsingRequestBodyParam":{"arguments1":{"name":"arguments","type":"Map"},"customFunctionsParam":{"name":"custom_functions_param","type":"Map"},"authType":{"name":"auth_type","type":"String"}},"CustomView.Model.Info":{"perPage":{"name":"per_page","type":"Integer"},"moreRecords":{"name":"more_records","type":"Boolean"},"default1":{"name":"default","type":"String"},"count":{"name":"count","type":"Integer"},"translation":{"structure_name":"CustomView.Model.Translation","name":"translation","type":"CustomView.Model.Translation"},"page":{"name":"page","type":"Integer"}},"Field.Model.Currency":{"roundingOption":{"name":"rounding_option","type":"String"},"precision":{"name":"precision","type":"Integer"}},"BulkRead.Model.ResponseWrapper":{"data":{"structure_name":"BulkRead.Model.JobDetail","name":"data","type":"List"}},"CustomView.Model.Translation":{"createdByMe":{"name":"created_by_me","type":"String"},"otherUsersViews":{"name":"other_users_views","type":"String"},"publicViews":{"name":"public_views","type":"String"},"sharedWithMe":{"name":"shared_with_me","type":"String"}},"CustomView.Model.ResponseHandler":{"classes":["CustomView.Model.ResponseWrapper","CustomView.Model.APIException"],"interface":true},"Module.Model.ActionHandler":{"classes":["Module.Model.APIException","Module.Model.ActionWrapper"],"interface":true},"ShareRecord.Model.ActionHandler":{"classes":["ShareRecord.Model.APIException","ShareRecord.Model.ActionWrapper"],"interface":true},"Layout.Model.Layout":{"modifiedTime":{"name":"modified_time","type":"DateTime"},"createdFor":{"structure_name":"User.Model.User","name":"created_for","type":"User.Model.User"},"visible":{"name":"visible","type":"Boolean"},"createdBy":{"structure_name":"User.Model.User","name":"created_by","type":"User.Model.User"},"name":{"name":"name","type":"String"},"profiles":{"structure_name":"Profile.Model.Profile","name":"profiles","type":"List"},"createdTime":{"name":"created_time","type":"DateTime"},"modifiedBy":{"structure_name":"User.Model.User","name":"modified_by","type":"User.Model.User"},"id":{"name":"id","type":"Long","primary":true},"sections":{"structure_name":"Layout.Model.Section","name":"sections","type":"List"},"convertMapping":{"name":"convert_mapping","type":"Map"},"status":{"name":"status","type":"Integer"}},"Variable.Model.GetVariableByIDParam":{"group":{"name":"group","type":"String","required":true}},"Field.Model.LookupField":{"name":{"name":"name","type":"String"},"id":{"name":"id","type":"Long"}},"Notification.Model.ResponseHandler":{"classes":["Notification.Model.APIException","Notification.Model.ResponseWrapper"],"interface":true},"Note.Model.DeleteNotesParam":{"ids":{"name":"ids","type":"Long","required":true}},"Tag.Model.ActionHandler":{"classes":["Tag.Model.ActionWrapper","Tag.Model.APIException"],"interface":true},"Record.Model.DeleteRecordUsingExternalIDParam":{"wfTrigger":{"name":"wf_trigger","type":"Boolean"}},"RelatedRecord.Model.APIException":{"code":{"values":["NO_PERMISSION","CANNOT_BE_UPDATED","INVALID_TOKEN","INVALID_URL_PATTERN","INVALID_REQUEST_METHOD","INVALID_DATA","INTERNAL_ERROR"],"name":"code","type":"util.Model.Choice"},"details":{"keys":[{"name":"permissions","type":"List"},{"name":"id","type":"Long"},{"name":"param_name","type":"String"}],"name":"details","type":"Map"},"message":{"values":["invalid data","invalid oauth token","Please check if the URL trying to access is a correct one","The http request method type is not a valid one","record not deleted","the related id given seems to be invalid","Internal server error occurred.","The relation name given seems to be invalid"],"name":"message","type":"util.Model.Choice"},"status":{"values":["error"],"name":"status","type":"util.Model.Choice"}},"BulkWrite.Model.FieldMapping":{"apiName":{"name":"api_name","type":"String","required":true},"defaultValue":{"name":"default_value","type":"Map"},"module":{"name":"module","type":"String"},"format":{"name":"format","type":"String"},"index":{"name":"index","type":"Integer"},"findBy":{"name":"find_by","type":"String"}},"Currency.Model.ResponseWrapper":{"currencies":{"structure_name":"Currency.Model.Currency","name":"currencies","type":"List"}},"Variable.Model.GetVariablesParam":{"group":{"name":"group","type":"String","required":true}},"Note.Model.GetNoteHeader":{"IfModifiedSince":{"name":"If-Modified-Since","type":"DateTime","required":true}},"VariableGroup.Model.APIException":{"code":{"values":["INTERNAL_ERROR","OAUTH_SCOPE_MISMATCH","INVALID_TOKEN","INVALID_URL_PATTERN","INVALID_REQUEST_METHOD"],"name":"code","type":"util.Model.Choice"},"details":{"name":"details","type":"Map"},"message":{"values":["invalid oauth token","Please check if the URL trying to access is a correct one","The http request method type is not a valid one","Internal server error occurred."],"name":"message","type":"util.Model.Choice"},"status":{"values":["error"],"name":"status","type":"util.Model.Choice"}},"Field.Model.Module":{"layout":{"structure_name":"Layout.Model.Layout","name":"layout","type":"Layout.Model.Layout"},"displayLabel":{"name":"display_label","type":"String"},"apiName":{"name":"api_name","type":"String"},"module":{"name":"module","type":"String"},"moduleName":{"name":"module_name","type":"String"},"id":{"name":"id","type":"Long"}},"Attachment.Model.Attachment":{"owner":{"lookup":true,"structure_name":"User.Model.User","name":"Owner","type":"User.Model.User"},"modifiedTime":{"name":"Modified_Time","type":"DateTime"},"fileName":{"name":"File_Name","type":"String"},"editable":{"name":"$editable","type":"Boolean"},"description":{"name":"description","type":"String"},"type":{"name":"$type","type":"String"},"parentId":{"lookup":true,"structure_name":"Record.Model.Record","name":"Parent_Id","type":"Record.Model.Record"},"seModule":{"name":"$se_module","type":"String"},"size":{"name":"Size","type":"Long"},"createdBy":{"lookup":true,"structure_name":"User.Model.User","name":"Created_By","type":"User.Model.User"},"linkUrl":{"name":"$link_url","type":"String"},"createdTime":{"name":"Created_Time","type":"DateTime"},"modifiedBy":{"lookup":true,"structure_name":"User.Model.User","name":"Modified_By","type":"User.Model.User"},"state":{"name":"$state","type":"String"},"id":{"name":"id","type":"Long","primary":true},"category":{"name":"category","type":"String"},"fileId":{"name":"$file_id","type":"String"}},"Function.Model.ExecuteFunctionUsingParametersHeader":{"getCustomFunctionsHeader":{"name":"get_custom_functions_header","type":"Map"}},"Field.Model.PickListValue":{"displayValue":{"name":"display_value","type":"String"},"sequenceNumber":{"name":"sequence_number","type":"Integer"},"maps":{"name":"maps","type":"List"},"actualValue":{"name":"actual_value","type":"String"},"sysRefName":{"name":"sys_ref_name","type":"String"},"expectedDataType":{"name":"expected_data_type","type":"String"},"type":{"name":"type","type":"String"}},"Currency.Model.ActionWrapper":{"currencies":{"structure_name":"Currency.Model.ActionResponse","name":"currencies","type":"List"}},"Layout.Model.ResponseWrapper":{"layouts":{"structure_name":"Layout.Model.Layout","name":"layouts","type":"List"}},"ShareRecord.Model.GetSharedRecordDetailsParam":{"view":{"name":"view","type":"String"},"sharedTo":{"name":"sharedTo","type":"Long"}},"Module.Model.ActionResponse":{"classes":["Module.Model.APIException","Module.Model.SuccessResponse"],"interface":true},"User.Model.ActionResponse":{"classes":["User.Model.SuccessResponse","User.Model.APIException"],"interface":true},"Attachment.Model.DeleteAttachmentsParam":{"ids":{"name":"ids","type":"Long","required":true}},"Record.Model.ConvertActionWrapper":{"data":{"structure_name":"Record.Model.ConvertActionResponse","name":"data","type":"List"}},"Record.Model.SearchRecordsHeader":{"XEXTERNAL":{"name":"X-EXTERNAL","type":"String"}},"File.Model.GetFileParam":{"id":{"name":"id","type":"String","required":true}},"Module.Model.SuccessResponse":{"code":{"values":["SUCCESS"],"name":"code","type":"util.Model.Choice"},"details":{"keys":[{"name":"id","type":"Long"},{"name":"api_name","type":"String"}],"name":"details","type":"Map"},"message":{"values":["module updated successfully"],"name":"message","type":"util.Model.Choice"},"status":{"values":["success"],"name":"status","type":"util.Model.Choice"}},"User.Model.SuccessResponse":{"code":{"values":["SUCCESS"],"name":"code","type":"util.Model.Choice"},"details":{"keys":[{"name":"id","type":"Long"},{"name":"email","type":"String"}],"name":"details","type":"Map"},"message":{"values":["User added","User updated","User deleted"],"name":"message","type":"util.Model.Choice"},"status":{"values":["success"],"name":"status","type":"util.Model.Choice"}},"Tax.Model.Tax":{"displayLabel":{"name":"display_label","type":"String"},"sequenceNumber":{"name":"sequence_number","type":"Integer"},"name":{"name":"name","type":"String","required":true},"id":{"name":"id","type":"Long","primary":true},"value":{"name":"value","type":"Double","required":true}},"Record.Model.UpdateRecordHeader":{"XEXTERNAL":{"name":"X-EXTERNAL","type":"String"}},"Role.Model.APIException":{"code":{"values":["INVALID_TOKEN","INVALID_URL_PATTERN","INVALID_REQUEST_METHOD","INVALID_DATA","INTERNAL_ERROR"],"name":"code","type":"util.Model.Choice"},"details":{"name":"details","type":"Map"},"message":{"values":["invalid oauth token","Please check if the URL trying to access is a correct one","The http request method type is not a valid one","record not deleted","the related id given seems to be invalid","Internal server error occurred.","The relation name given seems to be invalid"],"name":"message","type":"util.Model.Choice"},"status":{"values":["error"],"name":"status","type":"util.Model.Choice"}},"Tax.Model.Preference":{"modifyTaxRates":{"name":"modify_tax_rates","type":"Boolean"},"autoPopulateTax":{"name":"auto_populate_tax","type":"Boolean"}},"Notification.Model.DisableNotificationsParam":{"channelIds":{"name":"channel_ids","type":"Long"}},"Tag.Model.BodyWrapper":{"tags":{"structure_name":"Tag.Model.Tag","name":"tags","type":"List","required":true}},"Notification.Model.Info":{"perPage":{"name":"per_page","type":"Integer"},"moreRecords":{"name":"more_records","type":"Boolean"},"count":{"name":"count","type":"Integer"},"page":{"name":"page","type":"Integer"}},"Record.Model.RecurringActivity":{"rrule":{"name":"RRULE","type":"String","required":true}},"ShareRecord.Model.ShareRecord":{"shareRelatedRecords":{"name":"share_related_records","type":"Boolean"},"sharedThrough":{"lookup":true,"structure_name":"ShareRecord.Model.SharedThrough","name":"shared_through","type":"ShareRecord.Model.SharedThrough"},"sharedTime":{"name":"shared_time","type":"DateTime"},"sharedBy":{"lookup":true,"structure_name":"User.Model.User","name":"shared_by","type":"User.Model.User"},"permission":{"required-in-update":true,"name":"permission","type":"String","required":true},"user":{"lookup":true,"structure_name":"User.Model.User","required-in-update":true,"name":"user","type":"User.Model.User","required":true}},"ShareRecord.Model.BodyWrapper":{"share":{"structure_name":"ShareRecord.Model.ShareRecord","name":"share","max-length":10,"type":"List","required":true,"min-length":1}},"Org.Model.ResponseWrapper":{"org":{"structure_name":"Org.Model.Org","name":"org","type":"List"}},"File.Model.FileBodyWrapper":{"file":{"name":"file","type":"StreamWrapper.Model.StreamWrapper","required":true}},"CustomView.Model.Range":{"from":{"name":"from","type":"Integer"},"to":{"name":"to","type":"Integer"}},"User.Model.BodyWrapper":{"users":{"structure_name":"User.Model.User","name":"users","max-length":100,"type":"List","required":true,"min-length":1}},"BulkRead.Model.ActionResponse":{"classes":["BulkRead.Model.SuccessResponse","BulkRead.Model.APIException"],"interface":true},"ContactRole.Model.APIException":{"code":{"values":["INVALID_TOKEN","INVALID_URL_PATTERN","INVALID_REQUEST_METHOD","INVALID_MODULE","DUPLICATE_DATA","LIMIT_EXCEEDED","MANDATORY_NOT_FOUND","INVALID_DATA","INTERNAL_ERROR"],"name":"code","type":"util.Model.Choice"},"details":{"keys":[{"name":"api_name","type":"String"},{"name":"id","type":"Long"},{"name":"limit","type":"Integer"}],"name":"details","type":"Map"},"message":{"values":["invalid oauth token","Please check if the URL trying to access is a correct one","The http request method type is not a valid one","the module name given seems to be invalid","duplicate data","Contact Role feature limit exceeded","required field not found","invalid data","contact role not deleted","Internal server error occurred."],"name":"message","type":"util.Model.Choice"},"status":{"values":["error"],"name":"status","type":"util.Model.Choice"}},"RelatedRecord.Model.FileBodyWrapper":{"file":{"name":"file","type":"StreamWrapper.Model.StreamWrapper","required":true}},"User.Model.TabTheme":{"background":{"name":"background","type":"String"},"fontColor":{"name":"font_color","type":"String"}},"Record.Model.DeleteRecordUsingExternalIDHeader":{"XEXTERNAL":{"name":"X-EXTERNAL","type":"String"}},"Attachment.Model.UploadLinkAttachmentParam":{"attachmentUrl":{"name":"attachmentUrl","type":"String"}},"Record.Model.MassUpdateActionWrapper":{"data":{"structure_name":"Record.Model.MassUpdateActionResponse","name":"data","type":"List"}},"Variable.Model.ActionHandler":{"classes":["Variable.Model.APIException","Variable.Model.ActionWrapper"],"interface":true},"Field.Model.AssociationDetails":{"lookupField":{"structure_name":"Field.Model.LookupField","name":"lookup_field","type":"Field.Model.LookupField"},"relatedField":{"structure_name":"Field.Model.LookupField","name":"related_field","type":"Field.Model.LookupField"}},"Module.Model.APIException":{"code":{"values":["INVALID_TOKEN","INVALID_URL_PATTERN","INVALID_REQUEST_METHOD","INTERNAL_ERROR","INVALID_MODULE","INVALID_DATA","LIMIT_EXCEEDED","DUPLICATE_DATA","NOT_ALLOWED","NO_PERMISSION"],"name":"code","type":"util.Model.Choice"},"details":{"keys":[{"name":"api_name","type":"String"},{"name":"json_path","type":"String"},{"name":"limit","type":"Integer"},{"name":"maximum_length","type":"Integer"},{"name":"permissions","type":"List"}],"name":"details","type":"Map"},"message":{"values":["invalid oauth token","Please check if the URL trying to access is a correct one","The http request method type is not a valid one","The module name given seems to be invalid","the given module is not supported in api","invalid data","Api name duplicate","Api name is not valid","System keyword not allowed in api name","Api name update not allowed","No permission to update API name","Internal server error occurred."],"name":"message","type":"util.Model.Choice"},"status":{"values":["error"],"name":"status","type":"util.Model.Choice"}},"Record.Model.FileHandler":{"classes":["Record.Model.SuccessResponse","Record.Model.APIException"],"interface":true},"RelatedRecord.Model.ResponseHandler":{"classes":["RelatedRecord.Model.APIException","RelatedRecord.Model.ResponseWrapper","RelatedRecord.Model.FileBodyWrapper"],"interface":true},"Profile.Model.Section":{"name":{"name":"name","type":"String"},"categories":{"structure_name":"Profile.Model.Category","name":"categories","type":"List"}},"Record.Model.Comment":{"commentedTime":{"name":"commented_time","type":"DateTime"},"commentContent":{"name":"comment_content","type":"String"},"id":{"name":"id","type":"Long"},"commentedBy":{"name":"commented_by","type":"String"}},"Tag.Model.ResponseWrapper":{"tags":{"structure_name":"Tag.Model.Tag","name":"tags","type":"List"},"info":{"structure_name":"Tag.Model.Info","name":"info","type":"Tag.Model.Info"}},"BulkRead.Model.Criteria":{"groupOperator":{"values":["and","or"],"name":"group_operator","type":"util.Model.Choice"},"comparator":{"values":["equal","not_equal","in","not_in","less_than","less_equal","greater_than","greater_equal","contains","not_contains","starts_with","ends_with","between","not_between"],"name":"comparator","type":"util.Model.Choice"},"apiName":{"name":"api_name","type":"String"},"value":{"name":"value","type":"Object"},"group":{"structure_name":"BulkRead.Model.Criteria","name":"group","type":"List"}},"ContactRole.Model.RecordResponseWrapper":{"data":{"structure_name":"Record.Model.Record","name":"data","type":"List"},"info":{"structure_name":"Record.Model.Info","name":"info","type":"Record.Model.Info"}},"File.Model.APIException":{"code":{"values":["VIRUS_DETECTED","failure_in_attachment_handling","INTERNAL_ERROR","INVALID_TOKEN","INVALID_DATA","MANDATORY_NOT_FOUND","NO_PERMISSION","INVALID_MODULE","NOT_SUPPORTED","PATTERN_NOT_MATCHED","OAUTH_SCOPE_MISMATCH","DUPLICATE_DATA","INVALID_QUERY","MAPPING_MISMATCH","ID_ALREADY_CONVERTED","FILE_SIZE_MORE_THAN_ALLOWED_SIZE","RECORD_IN_BLUEPRINT","INVALID_URL_PATTERN","INVALID_REQUEST_METHOD","Not Modified","AUTHENTICATION_FAILURE","REQUIRED_PARAM_MISSING"],"name":"code","type":"util.Model.Choice"},"details":{"keys":[{"name":"id","type":"String"}],"name":"details","type":"Map"},"message":{"values":["Unable to process your request. Virus has been detected.","Problem in uploading attachment. kindly upload the file properly","invalid oauth token","Please check if the URL trying to access is a correct one","The http request method type is not a valid one","The module name given seems to be invalid","invalid data","permission denied","Internal server error occurred.","duplicate data","required field not found","record not deleted","record not deletable","Authentication failed","One of the expected parameter is missing","mandatory param missing","unable to process your request. please verify whether you have entered proper method name"," parameter and parameter values."],"name":"message","type":"util.Model.Choice"},"status":{"values":["error"],"name":"status","type":"util.Model.Choice"}},"User.Model.APIException":{"code":{"values":["ID_ALREADY_DELETED","CANNOT_UPDATE_DELETED_USER","AUTHORIZATION_FAILED","PATTERN_NOT_MATCHED","INVALID_REQUEST","LICENSE_LIMIT_EXCEEDED","DUPLICATE_DATA","INVALID_DATA","UNAPPROVABLE","MANDATORY_NOT_FOUND","INTERNAL_ERROR","EMAIL_UPDATE_NOT_ALLOWED","ID_ALREADY_DEACTIVATED","ID_ALREADY_ACTIVE","FEATURE_PERMISSION","OAUTH_SCOPE_MISMATCH","INVALID_TOKEN","INVALID_URL_PATTERN","INVALID_REQUEST_METHOD"],"name":"code","type":"util.Model.Choice"},"details":{"keys":[{"name":"api_name","type":"String"}],"name":"details","type":"Map"},"message":{"values":["invalid oauth token","Please check if the URL trying to access is a correct one","The http request method type is not a valid one","Internal server error occurred.","Cannot add user under CRM Plus account. Kindly use CRMPlus URL to add user","Request exceeds your license limit. Need to upgrade in order to add","Failed to add user since same email id is already present","Email Id should not contain @skydesk.jp. Please choose a different email id","Invalid Email Id. Please choose a different email id","Cannot add user for CRMPlus account from CRM. Kindly add user through CRMPlus","Company Name is required","Error occurred in resending the invitation of CRMPLUS user in CRM account","Cannot update the time_zone of another User","Either trial has expired or user does not have sufficient privilege to perform this action","Error occurred while updating CRMPlus User in CRM Account","invalid_data","Deleted user cannot be updated","Re-invite is not allowed for a confirmed user","Cannot update email of a confirmed CRM User","User with same email id is already in CRM Plus","User is already deactivated","Primary Contact cannot be deactivated","User is already active","Share among Subordinates Feature is not available","Profile and Role cannot be Updated by the user.","the_id_given_seems_to_be_invalid","Primary contact cannot be deleted","User is already deleted","User does not have sufficient privilege to delete users"],"name":"message","type":"util.Model.Choice"},"status":{"values":["error"],"name":"status","type":"util.Model.Choice"}},"Record.Model.CreateRecordsHeader":{"XEXTERNAL":{"name":"X-EXTERNAL","type":"String"}},"Currency.Model.BodyWrapper":{"currencies":{"structure_name":"Currency.Model.Currency","name":"currencies","max-length":10,"type":"List","required":true,"min-length":1}},"Record.Model.InventoryLineItems":{"unitPrice":{"name":"unit_price","type":"Double"},"quantityInStock":{"name":"quantity_in_stock","type":"Double"},"product":{"lookup":true,"structure_name":"Record.Model.LineItemProduct","name":"product","type":"Record.Model.LineItemProduct","required":true},"quantity":{"name":"quantity","type":"Double","required":true},"book":{"name":"book","type":"Double"},"discount":{"name":"Discount","type":"String"},"tax":{"name":"Tax","type":"Double"},"totalAfterDiscount":{"name":"total_after_discount","type":"Double"},"total":{"name":"total","type":"Double"},"netTotal":{"name":"net_total","type":"Double"},"lineTax":{"lookup":true,"structure_name":"Record.Model.LineTax","name":"line_tax","type":"List"},"listPrice":{"name":"list_price","type":"Double"},"productDescription":{"name":"product_description","type":"String"}},"Layout.Model.Properties":{"maximumRows":{"name":"maximum_rows","type":"Integer"},"tooltip":{"structure_name":"Field.Model.ToolTip","name":"tooltip","type":"Field.Model.ToolTip"},"reorderRows":{"name":"reorder_rows","type":"Boolean"}},"Profile.Model.PermissionDetail":{"displayLabel":{"name":"display_label","type":"String"},"module":{"name":"module","type":"String"},"name":{"name":"name","type":"String"},"id":{"name":"id","type":"Long"},"enabled":{"name":"enabled","type":"Boolean"}},"Note.Model.ActionResponse":{"classes":["Note.Model.SuccessResponse","Note.Model.APIException"],"interface":true},"File.Model.ResponseHandler":{"classes":["File.Model.APIException","File.Model.FileBodyWrapper"],"interface":true},"Record.Model.BodyWrapper":{"process":{"name":"process","type":"List"},"data":{"structure_name":"Record.Model.Record","name":"data","max-length":100,"type":"List","required":true,"min-length":1},"larId":{"name":"lar_id","type":"String"},"wfTrigger":{"name":"wf_trigger","type":"String"},"trigger":{"name":"trigger","type":"List"},"duplicateCheckFields":{"name":"duplicate_check_fields","type":"List"}},"Tax.Model.ResponseWrapper":{"preference":{"structure_name":"Tax.Model.Preference","name":"preference","type":"Tax.Model.Preference"},"taxes":{"structure_name":"Tax.Model.Tax","name":"taxes","type":"List"}},"Currency.Model.ActionHandler":{"classes":["Currency.Model.ActionWrapper","Currency.Model.APIException"],"interface":true},"Record.Model.GetRecordsParam":{"cvid":{"name":"cvid","type":"String"},"endDateTime":{"name":"endDateTime","type":"DateTime"},"includeChild":{"name":"include_child","type":"String"},"uid":{"name":"uid","type":"String"},"approved":{"name":"approved","type":"String"},"perPage":{"name":"per_page","type":"Integer"},"startDateTime":{"name":"startDateTime","type":"DateTime"},"converted":{"name":"converted","type":"String"},"sortOrder":{"name":"sort_order","type":"String"},"ids":{"name":"ids","type":"String","required":true},"territoryId":{"name":"territory_id","type":"String"},"sortBy":{"name":"sort_by","type":"String"},"page":{"name":"page","type":"Integer"},"fields":{"name":"fields","type":"String"}},"BluePrint.Model.BodyWrapper":{"blueprint":{"structure_name":"BluePrint.Model.BluePrint","name":"blueprint","max-length":1,"type":"List","required":true,"min-length":1}},"Territory.Model.ResponseWrapper":{"territories":{"structure_name":"Territory.Model.Territory","name":"territories","type":"List"}},"Role.Model.ResponseWrapper":{"roles":{"structure_name":"Role.Model.Role","name":"roles","type":"List"}},"Tag.Model.AddTagsToRecordParam":{"tagNames":{"name":"tag_names","type":"String","required":true},"overWrite":{"name":"over_write","type":"String"}},"Tag.Model.ConflictWrapper":{"conflictId":{"name":"conflict_id","type":"String","required":true}},"Role.Model.ResponseHandler":{"classes":["Role.Model.APIException","Role.Model.ResponseWrapper"],"interface":true},"Notification.Model.ResponseWrapper":{"watch":{"structure_name":"Notification.Model.Notification","name":"watch","type":"List"},"info":{"structure_name":"Notification.Model.Info","name":"info","type":"Notification.Model.Info"}},"Module.Model.Module":{"relatedListProperties":{"structure_name":"Module.Model.RelatedListProperties","name":"related_list_properties","type":"Module.Model.RelatedListProperties"},"modifiedTime":{"name":"modified_time","type":"DateTime"},"apiName":{"name":"api_name","type":"String","primary":true},"generatedType":{"values":["default","web","custom","linking"],"name":"generated_type","type":"util.Model.Choice"},"webLink":{"name":"web_link","type":"String"},"deletable":{"name":"deletable","type":"Boolean"},"moduleName":{"name":"module_name","type":"String"},"description":{"name":"description","type":"String"},"scoringSupported":{"name":"scoring_supported","type":"Boolean"},"filterSupported":{"name":"filter_supported","type":"Boolean"},"feedsRequired":{"name":"feeds_required","type":"Boolean"},"creatable":{"name":"creatable","type":"Boolean"},"customView":{"lookup":true,"structure_name":"CustomView.Model.CustomView","name":"custom_view","type":"CustomView.Model.CustomView"},"webformSupported":{"name":"webform_supported","type":"Boolean"},"kanbanViewSupported":{"name":"kanban_view_supported","type":"Boolean"},"modifiedBy":{"lookup":true,"structure_name":"User.Model.User","name":"modified_by","type":"User.Model.User"},"id":{"name":"id","type":"Long","primary":true},"showAsTab":{"name":"show_as_tab","type":"Boolean"},"sequenceNumber":{"name":"sequence_number","type":"Integer"},"globalSearchSupported":{"name":"global_search_supported","type":"Boolean"},"visibility":{"name":"visibility","type":"Integer"},"convertable":{"name":"convertable","type":"Boolean"},"editable":{"name":"editable","type":"Boolean"},"quickCreate":{"name":"quick_create","type":"Boolean"},"profiles":{"lookup":true,"structure_name":"Profile.Model.Profile","name":"profiles","type":"List"},"filterStatus":{"name":"filter_status","type":"Boolean"},"presenceSubMenu":{"name":"presence_sub_menu","type":"Boolean"},"pluralLabel":{"name":"plural_label","type":"String"},"singularLabel":{"name":"singular_label","type":"String"},"parentModule":{"lookup":true,"structure_name":"Module.Model.Module","name":"parent_module","type":"Module.Model.Module"},"businessCardFieldLimit":{"name":"business_card_field_limit","type":"Integer"},"perPage":{"name":"per_page","type":"Integer"},"viewable":{"name":"viewable","type":"Boolean"},"apiSupported":{"name":"api_supported","type":"Boolean"},"name":{"name":"name","type":"String"},"displayField":{"name":"display_field","type":"String"},"arguments1":{"structure_name":"Module.Model.Argument","name":"arguments","type":"List"},"emailtemplateSupport":{"name":"emailTemplate_support","type":"Boolean"},"triggersSupported":{"name":"triggers_supported","type":"Boolean"},"kanbanView":{"name":"kanban_view","type":"Boolean"},"inventoryTemplateSupported":{"name":"inventory_template_supported","type":"Boolean"},"properties":{"name":"$properties","type":"List"},"searchLayoutFields":{"name":"search_layout_fields","type":"List"},"territory":{"lookup":true,"structure_name":"Module.Model.Territory","name":"territory","type":"Module.Model.Territory"}},"BulkWrite.Model.File":{"updatedCount":{"name":"updated_count","type":"Integer"},"name":{"name":"name","type":"String"},"skippedCount":{"name":"skipped_count","type":"Integer"},"addedCount":{"name":"added_count","type":"Integer"},"totalCount":{"name":"total_count","type":"Integer"},"status":{"values":["ADDED","IN PROGRESS","COMPLETED","SKIPPED","FAILED"],"name":"status","type":"util.Model.Choice"}},"User.Model.ActionHandler":{"classes":["User.Model.ActionWrapper","User.Model.APIException"],"interface":true},"CustomView.Model.CustomView":{"criteria":{"structure_name":"CustomView.Model.Criteria","name":"criteria","type":"CustomView.Model.Criteria"},"displayValue":{"name":"display_value","type":"String"},"offline":{"name":"offline","type":"Boolean"},"systemName":{"name":"system_name","type":"String"},"default1":{"name":"default","type":"Boolean"},"sortOrder":{"name":"sort_order","type":"String"},"sharedDetails":{"structure_name":"CustomView.Model.SharedDetails","name":"shared_details","type":"List"},"name":{"name":"name","type":"String"},"sharedType":{"name":"shared_type","type":"String"},"sortBy":{"name":"sort_by","type":"String"},"id":{"name":"id","type":"Long","primary":true},"category":{"name":"category","type":"String"},"systemDefined":{"name":"system_defined","type":"Boolean"},"fields":{"name":"fields","type":"List"},"favorite":{"name":"favorite","type":"Integer"}},"Record.Model.MassUpdateResponseWrapper":{"data":{"structure_name":"Record.Model.MassUpdateResponse","name":"data","type":"List"}},"Record.Model.GetRecordUsingExternalIDHeader":{"IfModifiedSince":{"name":"If-Modified-Since","type":"DateTime"},"XEXTERNAL":{"name":"X-EXTERNAL","type":"String"}},"ShareRecord.Model.SuccessResponse":{"code":{"values":["SUCCESS"],"name":"code","type":"util.Model.Choice"},"details":{"keys":[{"name":"id","type":"Long"}],"name":"details","type":"Map"},"message":{"values":["record will be shared successfully","Sharing Revoked"],"name":"message","type":"util.Model.Choice"},"status":{"values":["success"],"name":"status","type":"util.Model.Choice"}},"BulkRead.Model.FileBodyWrapper":{"file":{"name":"file","type":"StreamWrapper.Model.StreamWrapper","required":true}},"Record.Model.MassUpdate":{"failedCount":{"name":"Failed_Count","type":"Integer"},"updatedCount":{"name":"Updated_Count","type":"Integer"},"notUpdatedCount":{"name":"Not_Updated_Count","type":"Integer"},"totalCount":{"name":"Total_Count","type":"Integer"},"status":{"values":["COMPLETED","SCHEDULED","RUNNING","FAILED"],"name":"Status","type":"util.Model.Choice"}},"Profile.Model.ResponseWrapper":{"profiles":{"structure_name":"Profile.Model.Profile","name":"profiles","type":"List"}},"User.Model.Theme":{"newBackground":{"name":"new_background","type":"String"},"normalTab":{"lookup":true,"structure_name":"User.Model.TabTheme","name":"normal_tab","type":"User.Model.TabTheme"},"background":{"name":"background","type":"String"},"screen":{"name":"screen","type":"String"},"type":{"name":"type","type":"String"},"selectedTab":{"lookup":true,"structure_name":"User.Model.TabTheme","name":"selected_tab","type":"User.Model.TabTheme"}},"Variable.Model.BodyWrapper":{"variables":{"structure_name":"Variable.Model.Variable","name":"variables","max-length":100,"type":"List","required":true,"min-length":1}},"CustomView.Model.ResponseWrapper":{"customViews":{"structure_name":"CustomView.Model.CustomView","name":"custom_views","type":"List"},"info":{"structure_name":"CustomView.Model.Info","name":"info","type":"CustomView.Model.Info"}},"Tax.Model.DeleteTaxesParam":{"ids":{"name":"ids","type":"Long","required":true}},"Record.Model.MassUpdateResponseHandler":{"classes":["Record.Model.APIException","Record.Model.MassUpdateResponseWrapper"],"interface":true},"ShareRecord.Model.DeleteActionResponse":{"classes":["ShareRecord.Model.SuccessResponse","ShareRecord.Model.APIException"],"interface":true},"ContactRole.Model.RecordActionWrapper":{"data":{"structure_name":"ContactRole.Model.ActionResponse","name":"data","max-length":100,"type":"List"}},"RelatedList.Model.GetRelatedListsParam":{"module":{"name":"module","type":"String"}},"Record.Model.ResponseWrapper":{"data":{"structure_name":"Record.Model.Record","name":"data","type":"List"},"info":{"structure_name":"Record.Model.Info","name":"info","type":"Record.Model.Info"}},"Record.Model.FileDetails":{"extn":{"name":"extn","type":"String"},"fileName":{"name":"file_Name","type":"String"},"previewUrl":{"name":"preview_Url","type":"String"},"isPreviewAvailable":{"name":"is_Preview_Available","type":"Boolean"},"downloadUrl":{"name":"download_Url","type":"String"},"creatorId":{"name":"creator_Id","type":"String"},"entityId":{"name":"entity_Id","type":"String"},"delete1":{"name":"_delete","type":"String"},"mode":{"name":"mode","type":"String"},"linkDocs":{"name":"link_Docs","type":"Integer"},"fileSize":{"name":"file_Size","type":"String"},"deleteUrl":{"name":"delete_Url","type":"String"},"attachmentId":{"name":"attachment_Id","type":"String"},"originalSizeByte":{"name":"original_Size_Byte","type":"String"},"fileId":{"name":"file_Id","type":"String","required":true}},"Record.Model.ConvertBodyWrapper":{"data":{"structure_name":"Record.Model.LeadConverter","name":"data","max-length":1,"type":"List","required":true,"min-length":1}},"BulkRead.Model.CallBack":{"method":{"values":["post"],"name":"method","type":"util.Model.Choice","required":true},"url":{"name":"url","type":"String","required":true}},"Record.Model.APIException":{"code":{"values":["FEATURE_NOT_SUPPORTED","CONVERTED_RECORD","NOT_FOUND","NO_RECORDS_FOUND","NOT_APPROVED","LIMIT_EXCEEDED","ALREADY_SCHEDULED","CANNOT_PERFORM_ACTION","CANNOT_PROCESS","INTERNAL_ERROR","INVALID_TOKEN","INVALID_DATA","MANDATORY_NOT_FOUND","NO_PERMISSION","INVALID_MODULE","NOT_SUPPORTED","PATTERN_NOT_MATCHED","OAUTH_SCOPE_MISMATCH","DUPLICATE_DATA","INVALID_QUERY","MAPPING_MISMATCH","ID_ALREADY_CONVERTED","FILE_SIZE_MORE_THAN_ALLOWED_SIZE","RECORD_IN_BLUEPRINT","INVALID_URL_PATTERN","INVALID_REQUEST_METHOD","Not Modified","AUTHENTICATION_FAILURE","CANNOT_DELETE","REQUIRED_PARAM_MISSING","DATA_MISMATCH","RECORD_LOCKED"],"name":"code","type":"util.Model.Choice"},"details":{"keys":[{"name":"permissions","type":"List"},{"name":"param_name","type":"String"},{"name":"api_name","type":"String"},{"name":"id","type":"Long"},{"name":"module","type":"String"},{"name":"expected_data_type","type":"String"},{"name":"index","type":"Integer"},{"name":"maximum_length","type":"String"},{"name":"mapped_field","type":"String"},{"name":"reason","type":"String"},{"name":"operator","type":"String"},{"name":"allowed_count","type":"Integer"},{"name":"limit","type":"Integer"},{"name":"json_path","type":"String"},{"name":"parent_api_name","type":"String"},{"name":"param","type":"String"}],"name":"details","type":"Map"},"message":{"values":["The value of the external field is invalid.","There is no data for the ID specified or there is no matching record in the given module.","The external field contains duplicate data.","The external ID of the lookup field or the Price Book is incorrect","the id given seems to be invalid.","Already an Mass Action scheduler is runing for the given cvid","Scheduled Mass Operation feature is not available in your edition","can't update the converted record","Field cannot be updated in Scheduled Mass Update","Field is not visible","Field cannot be updated as it is associated with a validation rule.","Field cannot be updated as it is associated with a layout rule.This field cannot be updated in the Mass Update","Max field limit exceeded","Maximum lookup field limit in criteria exceeded","No field found","invalid oauth token","Please check if the URL trying to access is a correct one","The http request method type is not a valid one","The module name given seems to be invalid","Territory is not supported for the given module","Please check whether the input values are correct","invalid data","permission denied","Internal server error occurred.","duplicate data","required field not found","Layout doesn't contain the Pipeline","Pipeline doesn't contain the Stage","the id given seems to be invalid","record not deleted","record not deletable","Authentication failed","One of the expected parameter is missing","mandatory param missing","invalid query formed","id already converted","body","given id is invalid","Already a Mass Action scheduler is running for the given cvid","The record is in stop processing","The record is in blue print","no permission to perform an action on this record","Record count exceeded","record not approved","no record found to update","Field Edit Permission not given","Customview not accessible","Empty response","give contact id is mismatched with the data","give account id is mismatched with the data"],"name":"message","type":"util.Model.Choice"},"status":{"values":["error"],"name":"status","type":"util.Model.Choice"}},"Record.Model.FileBodyWrapper":{"file":{"name":"file","type":"StreamWrapper.Model.StreamWrapper","required":true}},"ContactRole.Model.ActionWrapper":{"contactRoles":{"structure_name":"ContactRole.Model.ActionResponse","name":"contact_roles","type":"List"}},"Record.Model.GetDeletedRecordsParam":{"perPage":{"name":"per_page","type":"Integer"},"page":{"name":"page","type":"Integer"},"type":{"name":"type","type":"String"}},"RelatedRecord.Model.ActionHandler":{"classes":["RelatedRecord.Model.APIException","RelatedRecord.Model.ActionWrapper"],"interface":true},"BluePrint.Model.SuccessResponse":{"code":{"values":["SUCCESS"],"name":"code","type":"util.Model.Choice"},"details":{"name":"details","type":"Map"},"message":{"values":["transition updated successfully"],"name":"message","type":"util.Model.Choice"},"status":{"values":["success"],"name":"status","type":"util.Model.Choice"}},"Note.Model.SuccessResponse":{"code":{"values":["SUCCESS"],"name":"code","type":"util.Model.Choice"},"details":{"keys":[{"name":"Modified_Time","type":"DateTime"},{"structure_name":"User.Model.User","name":"Modified_By","type":"User.Model.User"},{"name":"Created_Time","type":"DateTime"},{"name":"id","type":"Long"},{"structure_name":"User.Model.User","name":"Created_By","type":"User.Model.User"}],"name":"details","type":"Map"},"message":{"values":["record added","record updated","record deleted"],"name":"message","type":"util.Model.Choice"},"status":{"values":["success"],"name":"status","type":"util.Model.Choice"}},"Territory.Model.ResponseHandler":{"classes":["Territory.Model.APIException","Territory.Model.ResponseWrapper"],"interface":true},"RelatedRecord.Model.SuccessResponse":{"code":{"values":["SUCCESS"],"name":"code","type":"util.Model.Choice"},"details":{"keys":[{"name":"id","type":"Long"},{"name":"External_Deal_ID","type":"String"}],"name":"details","type":"Map"},"message":{"values":["relation added","relation removed"],"name":"message","type":"util.Model.Choice"},"status":{"values":["success"],"name":"status","type":"util.Model.Choice"}},"Field.Model.APIException":{"code":{"values":["INVALID_TOKEN","INVALID_URL_PATTERN","INVALID_REQUEST_METHOD","INVALID_MODULE","INTERNAL_ERROR","REQUIRED_PARAM_MISSING"],"name":"code","type":"util.Model.Choice"},"details":{"keys":[{"name":"param","type":"String"}],"name":"details","type":"Map"},"message":{"values":["invalid oauth token","Please check if the URL trying to access is a correct one","The http request method type is not a valid one","the given module is not supported for this api","Internal server error occurred.","the module name given seems to be invalid"],"name":"message","type":"util.Model.Choice"},"status":{"values":["error"],"name":"status","type":"util.Model.Choice"}},"RelatedRecord.Model.UpdateRelatedRecordsUsingExternalIDHeader":{"xExternal":{"name":"X-EXTERNAL","type":"String"}},"Org.Model.FileBodyWrapper":{"file":{"name":"file","type":"StreamWrapper.Model.StreamWrapper","required":true}},"BluePrint.Model.ValidationError":{"apiName":{"name":"api_name","type":"String"},"message":{"name":"message","type":"String"}},"BluePrint.Model.ResponseWrapper":{"blueprint":{"structure_name":"BluePrint.Model.BluePrint","name":"blueprint","type":"BluePrint.Model.BluePrint"}},"RelatedRecord.Model.DeleteRelatedRecordsUsingExternalIDParam":{"ids":{"name":"ids","type":"String","required":true}},"File.Model.UploadFilesParam":{"type":{"name":"type","type":"String","required":true}},"Tax.Model.ResponseHandler":{"classes":["Tax.Model.APIException","Tax.Model.ResponseWrapper"],"interface":true},"BulkWrite.Model.Resource":{"file":{"structure_name":"BulkWrite.Model.File","name":"file","type":"BulkWrite.Model.File"},"module":{"name":"module","type":"String","required":true},"ignoreEmpty":{"name":"ignore_empty","type":"Boolean"},"findBy":{"name":"find_by","type":"String"},"fieldMappings":{"structure_name":"BulkWrite.Model.FieldMapping","name":"field_mappings","type":"List"},"type":{"values":["data"],"name":"type","type":"util.Model.Choice","required":true},"status":{"values":["ADDED","IN PROGRESS","COMPLETED","SKIPPED","FAILED"],"name":"status","type":"util.Model.Choice"},"fileId":{"name":"file_id","type":"String","required":true}},"Field.Model.GetFieldParam":{"module":{"name":"module","type":"String"}},"ContactRole.Model.RecordResponseHandler":{"classes":["ContactRole.Model.RecordResponseWrapper","ContactRole.Model.APIException"],"interface":true},"Note.Model.APIException":{"code":{"values":["NO_PERMISSION","INVALID_TOKEN","INVALID_URL_PATTERN","INVALID_REQUEST_METHOD","INTERNAL_ERROR","MANDATORY_NOT_FOUND","INVALID_DATA","NOT_SUPPORTED","REQUIRED_PARAM_MISSING"],"name":"code","type":"util.Model.Choice"},"details":{"keys":[{"name":"permissions","type":"List"},{"name":"api_name","type":"String"},{"name":"param","type":"String"},{"name":"id","type":"Long"}],"name":"details","type":"Map"},"message":{"values":["invalid oauth token","Please check if the URL trying to access is a correct one","The http request method type is not a valid one","The module name given seems to be invalid","the id given seems to be invalid","One of the expected parameter is missing","record not deleted","Internal server error occurred."],"name":"message","type":"util.Model.Choice"},"status":{"values":["error"],"name":"status","type":"util.Model.Choice"}},"Role.Model.Role":{"displayLabel":{"name":"display_label","type":"String"},"forecastManager":{"structure_name":"User.Model.User","name":"forecast_manager","type":"User.Model.User"},"adminUser":{"name":"admin_user","type":"Boolean"},"shareWithPeers":{"name":"share_with_peers","type":"Boolean"},"name":{"name":"name","type":"String"},"description":{"name":"description","type":"String"},"id":{"name":"id","type":"Long","primary":true},"reportingTo":{"structure_name":"User.Model.User","name":"reporting_to","type":"User.Model.User"}},"Field.Model.Field":{"apiName":{"name":"api_name","type":"String"},"webhook":{"name":"webhook","type":"Boolean"},"criteria":{"structure_name":"CustomView.Model.Criteria","name":"criteria","type":"CustomView.Model.Criteria"},"crypt":{"structure_name":"Field.Model.Crypt","name":"crypt","type":"Field.Model.Crypt"},"defaultValue":{"name":"default_value","type":"String"},"validationRule":{"name":"validation_rule","type":"Map"},"tooltip":{"structure_name":"Field.Model.ToolTip","name":"tooltip","type":"Field.Model.ToolTip"},"quickSequenceNumber":{"name":"quick_sequence_number","type":"Integer"},"relatedDetails":{"structure_name":"Field.Model.RelatedDetails","name":"related_details","type":"Field.Model.RelatedDetails"},"jsonType":{"name":"json_type","type":"String"},"type":{"name":"_type","type":"String"},"layouts":{"structure_name":"Layout.Model.Layout","name":"layouts","type":"Layout.Model.Layout"},"mandatory":{"name":"mandatory","type":"Boolean"},"content":{"name":"content","type":"String"},"blueprintSupported":{"name":"blueprint_supported","type":"Boolean"},"associationDetails":{"structure_name":"Field.Model.AssociationDetails","name":"association_details","type":"Field.Model.AssociationDetails"},"pickListValues":{"structure_name":"Field.Model.PickListValue","name":"pick_list_values","type":"List"},"fieldLabel":{"name":"field_label","type":"String"},"fieldReadOnly":{"name":"field_read_only","type":"Boolean"},"businesscardSupported":{"name":"businesscard_supported","type":"Boolean"},"currency":{"structure_name":"Field.Model.Currency","name":"currency","type":"Field.Model.Currency"},"id":{"name":"id","type":"Long","read-only":true,"primary":true},"displayLabel":{"name":"display_label","type":"String"},"personalityName":{"name":"personality_name","type":"String"},"lookup":{"structure_name":"Field.Model.Module","name":"lookup","type":"Field.Model.Module"},"visible":{"name":"visible","type":"Boolean"},"dataType":{"name":"data_type","type":"String","read-only":true},"length":{"name":"length","type":"Integer"},"readOnly":{"name":"read_only","type":"Boolean"},"historyTracking":{"name":"history_tracking","type":"Boolean"},"sectionId":{"name":"section_id","type":"Integer"},"systemMandatory":{"name":"system_mandatory","type":"Boolean"},"message":{"name":"message","type":"String"},"subform":{"structure_name":"Field.Model.Module","name":"subform","type":"Field.Model.Module"},"autoNumber":{"structure_name":"Field.Model.AutoNumber","name":"auto_number","type":"Field.Model.AutoNumber"},"private1":{"structure_name":"Field.Model.Private","name":"private","type":"Field.Model.Private"},"customField":{"name":"custom_field","type":"Boolean"},"decimalPlace":{"name":"decimal_place","type":"Integer"},"convertMapping":{"name":"convert_mapping","type":"Map"},"createdSource":{"name":"created_source","type":"String"},"multiModuleLookup":{"name":"multi_module_lookup","type":"Map"},"massUpdate":{"name":"mass_update","type":"Boolean"},"transitionSequence":{"name":"transition_sequence","type":"Integer"},"unique":{"structure_name":"Field.Model.Unique","name":"unique","type":"Field.Model.Unique"},"viewType":{"structure_name":"Field.Model.ViewType","name":"view_type","type":"Field.Model.ViewType"},"formula":{"structure_name":"Field.Model.Formula","name":"formula","type":"Field.Model.Formula"},"multiselectlookup":{"structure_name":"Field.Model.MultiSelectLookup","name":"multiselectlookup","type":"Field.Model.MultiSelectLookup"},"columnName":{"name":"column_name","type":"String"}},"ContactRole.Model.ResponseWrapper":{"contactRoles":{"structure_name":"ContactRole.Model.ContactRole","name":"contact_roles","type":"List"}},"Field.Model.Unique":{"casesensitive":{"name":"casesensitive","type":"String"}},"ContactRole.Model.GetAllContactRolesOfDealParam":{"ids":{"name":"ids","type":"String"}},"Note.Model.GetNoteParam":{"fields":{"name":"fields","type":"String"}},"Tag.Model.GetTagsParam":{"myTags":{"values":["true","false"],"name":"my_tags","type":"String"},"module":{"name":"module","type":"String","required":true}},"Currency.Model.BaseCurrencyWrapper":{"baseCurrency":{"structure_name":"Currency.Model.Currency","name":"base_currency","type":"Currency.Model.Currency","required":true}},"Record.Model.CarryOverTags":{"deals":{"name":"Deals","type":"List"},"accounts":{"name":"Accounts","type":"List"},"contacts":{"name":"Contacts","type":"List"}},"Query.Model.APIException":{"code":{"values":["INVALID_QUERY","OAUTH_SCOPE_MISMATCH","SYNTAX_ERROR","INVALID_TOKEN","INVALID_URL_PATTERN","INVALID_REQUEST_METHOD","INVALID_MODULE","DUPLICATE_DATA","LIMIT_EXCEEDED","MANDATORY_NOT_FOUND","INVALID_DATA","INTERNAL_ERROR"],"name":"code","type":"util.Model.Choice"},"details":{"keys":[{"name":"near","type":"String"},{"name":"column","type":"Integer"},{"name":"line","type":"Integer"},{"name":"clause","type":"String"},{"name":"by","type":"String"},{"name":"limit","type":"Integer"},{"name":"column_name","type":"String"},{"name":"reason","type":"String"},{"name":"module","type":"String"},{"name":"data_type","type":"String"},{"name":"expected_data_type","type":"String"},{"name":"operator","type":"String"}],"name":"details","type":"Map"},"message":{"values":["invalid query formed","value given seems to be invalid for the column","data type not supported","column given seems to be invalid","invalid oauth scope to access this URL","limit exceeded","given coql query not supported","select columns limit exceeded","join limit exceeded","missing clause","error occured while parsing the query","invalid oauth token","Please check if the URL trying to access is a correct one","The http request method type is not a valid one","the module name given seems to be invalid","duplicate data","required field not found","invalid data","Internal server error occurred."],"name":"message","type":"util.Model.Choice"},"status":{"values":["error"],"name":"status","type":"util.Model.Choice"}},"ContactRole.Model.SuccessResponse":{"code":{"values":["SUCCESS"],"name":"code","type":"util.Model.Choice"},"details":{"keys":[{"name":"id","type":"Long"}],"name":"details","type":"Map"},"message":{"values":["contact role added","contact role updated","contact role deleted"],"name":"message","type":"util.Model.Choice"},"status":{"values":["success"],"name":"status","type":"util.Model.Choice"}},"RelatedRecord.Model.GetRelatedRecordHeader":{"xExternal":{"name":"X-EXTERNAL","type":"String"},"IfModifiedSince":{"name":"If-Modified-Since","type":"DateTime"}},"ShareRecord.Model.APIException":{"code":{"values":["NO_PERMISSION","BAD_REQUEST","INVALID_MODULE","SHARE_LIMIT_EXCEEDED","OAUTH_SCOPE_MISMATCH","INTERNAL_ERROR","INVALID_TOKEN","INVALID_URL_PATTERN","INVALID_REQUEST_METHOD","DUPLICATE_DATA","LIMIT_EXCEEDED","MANDATORY_NOT_FOUND","INVALID_DATA","ENTITY_ID_INVALID"],"name":"code","type":"util.Model.Choice"},"details":{"keys":[{"name":"permissions","type":"List"}],"name":"details","type":"Map"},"message":{"values":["Scheduler is running","cannot share to the user","invalid oauth token","Please check if the URL trying to access is a correct one","The http request method type is not a valid one","record not deleted","the related id given seems to be invalid","Internal server error occurred.","The relation name given seems to be invalid.","invalid oauth scope to access this URL","Please check if the URL trying to access is a correct one.","Permission is invalid","record is already visible to the user.","Cannot share a record to more than 10 users.","No sharing through this record is available to revoke.","ENTITY_ID_INVALID"],"name":"message","type":"util.Model.Choice"},"status":{"values":["error"],"name":"status","type":"util.Model.Choice"}},"RelatedRecord.Model.DeleteRelatedRecordsUsingExternalIDHeader":{"xExternal":{"name":"X-EXTERNAL","type":"String"}},"RelatedRecord.Model.ResponseWrapper":{"data":{"structure_name":"Record.Model.Record","name":"data","type":"List"},"info":{"structure_name":"Record.Model.Info","name":"info","type":"Record.Model.Info"}},"Variable.Model.ResponseWrapper":{"variables":{"structure_name":"Variable.Model.Variable","name":"variables","type":"List"}},"File.Model.ActionResponse":{"classes":["File.Model.SuccessResponse","File.Model.APIException"],"interface":true},"User.Model.ResponseHandler":{"classes":["User.Model.ResponseWrapper","User.Model.APIException"],"interface":true},"Note.Model.BodyWrapper":{"data":{"structure_name":"Note.Model.Note","name":"data","max-length":100,"type":"List","required":true,"min-length":1}},"Notification.Model.ActionResponse":{"classes":["Notification.Model.SuccessResponse","Notification.Model.APIException"],"interface":true},"RelatedRecord.Model.GetRelatedRecordsUsingExternalIDParam":{"perPage":{"name":"per_page","type":"Integer"},"page":{"name":"page","type":"Integer"}},"VariableGroup.Model.VariableGroup":{"displayLabel":{"name":"display_label","type":"String"},"apiName":{"name":"api_name","type":"String"},"name":{"name":"name","type":"String"},"description":{"name":"description","type":"String"},"id":{"name":"id","type":"Long","primary":true}},"Tag.Model.CountHandler":{"classes":["Tag.Model.APIException","Tag.Model.CountWrapper"],"interface":true},"RelatedRecord.Model.DelinkRecordHeader":{"xExternal":{"name":"X-EXTERNAL","type":"String"}},"Currency.Model.Currency":{"symbol":{"name":"symbol","type":"String","required":true},"modifiedTime":{"name":"modified_time","type":"DateTime"},"format":{"structure_name":"Currency.Model.Format","name":"format","type":"Currency.Model.Format","required":true},"isActive":{"name":"is_active","type":"Boolean"},"exchangeRate":{"name":"exchange_rate","type":"String","required":true},"createdBy":{"lookup":true,"structure_name":"User.Model.User","name":"created_by","type":"User.Model.User"},"isoCode":{"name":"iso_code","type":"String","required":true},"name":{"name":"name","type":"String","required":true},"createdTime":{"name":"created_time","type":"DateTime"},"prefixSymbol":{"name":"prefix_symbol","type":"Boolean"},"modifiedBy":{"lookup":true,"structure_name":"User.Model.User","name":"modified_by","type":"User.Model.User"},"isBase":{"name":"is_base","type":"Boolean"},"id":{"name":"id","type":"Long","primary":true}},"Function.Model.FileBodyWrapper":{"inputfile":{"name":"inputFile","type":"StreamWrapper.Model.StreamWrapper","required":true}},"RelatedRecord.Model.ActionWrapper":{"data":{"structure_name":"RelatedRecord.Model.ActionResponse","name":"data","type":"List"}},"Record.Model.Participants":{"name":{"name":"name","type":"String"},"invited":{"name":"invited","type":"Boolean"},"type":{"name":"type","type":"String","required":true},"email":{"name":"Email","type":"String"},"participant":{"name":"participant","type":"String","required":true},"status":{"name":"status","type":"String"}},"BulkWrite.Model.CallBack":{"method":{"values":["post"],"name":"method","type":"util.Model.Choice","required":true},"url":{"name":"url","type":"String","required":true}},"CustomView.Model.SharedDetails":{"name":{"name":"name","type":"String"},"id":{"name":"id","type":"Long"},"type":{"name":"type","type":"String"},"subordinates":{"name":"subordinates","type":"Boolean"}},"Query.Model.ResponseWrapper":{"data":{"structure_name":"Record.Model.Record","name":"data","type":"List"},"info":{"structure_name":"Record.Model.Info","name":"info","type":"Record.Model.Info"}},"Currency.Model.Format":{"thousandSeparator":{"values":["Period","Comma","Space"],"name":"thousand_separator","type":"util.Model.Choice","required":true},"decimalPlaces":{"required-in-update":true,"values":["0","2","3"],"name":"decimal_places","type":"util.Model.Choice","required":true},"decimalSeparator":{"values":["Period","Comma"],"name":"decimal_separator","type":"util.Model.Choice","required":true}},"Function.Model.ExecuteFunctionUsingParametersParam":{"arguments1":{"name":"arguments","type":"Map"},"getCustomFunctionsParam":{"name":"get_custom_functions_param","type":"Map"},"authType":{"name":"auth_type","type":"String"}},"Record.Model.DeletedRecordsWrapper":{"data":{"structure_name":"Record.Model.DeletedRecord","name":"data","type":"List"},"info":{"structure_name":"Record.Model.Info","name":"info","type":"Record.Model.Info"}},"Tag.Model.SuccessResponse":{"code":{"values":["SUCCESS"],"name":"code","type":"util.Model.Choice"},"details":{"keys":[{"name":"created_time","type":"DateTime"},{"name":"modified_time","type":"DateTime"},{"structure_name":"User.Model.User","name":"modified_by","type":"User.Model.User"},{"name":"id","type":"Long"},{"structure_name":"User.Model.User","name":"created_by","type":"User.Model.User"},{"name":"tags","type":"List"}],"name":"details","type":"Map"},"message":{"values":["tags created successfully","tags updated successfully","tags deleted successfully"],"name":"message","type":"util.Model.Choice"},"status":{"values":["success"],"name":"status","type":"util.Model.Choice"}},"Note.Model.ActionWrapper":{"data":{"structure_name":"Note.Model.ActionResponse","name":"data","type":"List"}},"Record.Model.DeleteRecordsParam":{"ids":{"name":"ids","type":"String","required":true},"wfTrigger":{"name":"wf_trigger","type":"Boolean"}},"Tag.Model.ActionWrapper":{"tags":{"structure_name":"Tag.Model.ActionResponse","name":"tags","type":"List"}},"BulkRead.Model.ResponseHandler":{"classes":["BulkRead.Model.ResponseWrapper","BulkRead.Model.APIException","BulkRead.Model.FileBodyWrapper"],"interface":true},"Record.Model.LineTax":{"percentage":{"name":"percentage","type":"Double"},"name":{"name":"name","type":"String"},"id":{"name":"id","type":"Long"},"value":{"name":"value","type":"Double"}},"Module.Model.Territory":{"name":{"name":"name","type":"String"},"id":{"name":"id","type":"Long"},"subordinates":{"name":"subordinates","type":"Boolean"}},"Field.Model.ToolTip":{"name":{"name":"name","type":"String"},"value":{"name":"value","type":"String"}},"Field.Model.Crypt":{"mode":{"name":"mode","type":"String"},"column":{"name":"column","type":"String"},"encfldids":{"name":"encFldIds","type":"List"},"notify":{"name":"notify","type":"String"},"table":{"name":"table","type":"String"},"status":{"name":"status","type":"Integer"}},"BluePrint.Model.ResponseHandler":{"classes":["BluePrint.Model.ResponseWrapper","BluePrint.Model.APIException"],"interface":true},"RelatedRecord.Model.BodyWrapper":{"data":{"structure_name":"Record.Model.Record","name":"data","max-length":100,"type":"List","required":true,"min-length":1}},"BulkRead.Model.ActionHandler":{"classes":["BulkRead.Model.APIException","BulkRead.Model.ActionWrapper"],"interface":true},"BulkWrite.Model.FileBodyWrapper":{"file":{"name":"file","type":"StreamWrapper.Model.StreamWrapper","required":true}},"Record.Model.SuccessResponse":{"code":{"values":["SUCCESS"],"name":"code","type":"util.Model.Choice"},"duplicateField":{"name":"duplicate_field","type":"String"},"action":{"values":["insert","update"],"name":"action","type":"util.Model.Choice"},"details":{"keys":[{"name":"Modified_Time","type":"DateTime"},{"structure_name":"User.Model.User","name":"Modified_By","type":"User.Model.User"},{"name":"Created_Time","type":"DateTime"},{"name":"id","type":"String"},{"structure_name":"User.Model.User","name":"Created_By","type":"User.Model.User"},{"name":"External_Contact_ID","type":"String"}],"name":"details","type":"Map"},"message":{"values":["record updated","record deleted","record added","photo uploaded successfully","Photo deleted"],"name":"message","type":"util.Model.Choice"},"status":{"values":["success"],"name":"status","type":"util.Model.Choice"}},"ShareRecord.Model.SharedThrough":{"entityName":{"name":"entity_name","type":"String"},"module":{"lookup":true,"structure_name":"Module.Model.Module","name":"module","type":"Module.Model.Module"},"id":{"name":"id","type":"Long"}},"Attachment.Model.ResponseHandler":{"classes":["Attachment.Model.APIException","Attachment.Model.ResponseWrapper","Attachment.Model.FileBodyWrapper"],"interface":true},"RelatedRecord.Model.DelinkRecordsHeader":{"xExternal":{"name":"X-EXTERNAL","type":"String"}},"Record.Model.ActionWrapper":{"data":{"structure_name":"Record.Model.ActionResponse","name":"data","type":"List"}},"Notification.Model.APIException":{"code":{"values":["INVALID_TOKEN","INVALID_URL_PATTERN","INVALID_REQUEST_METHOD","INVALID_MODULE","DUPLICATE_DATA","LIMIT_EXCEEDED","MANDATORY_NOT_FOUND","INVALID_DATA","INTERNAL_ERROR","NOT_SUBSCRIBED"],"name":"code","type":"util.Model.Choice"},"details":{"keys":[{"name":"api_name","type":"String"},{"name":"expected_data_type","type":"String"},{"name":"maximum_length","type":"Integer"},{"name":"param","type":"String"}],"name":"details","type":"Map"},"message":{"values":["invalid oauth token","Please check if the URL trying to access is a correct one","The http request method type is not a valid one","the module name given seems to be invalid","duplicate data","Not subscribed for actions-watch of the given module/channel","required field not found","invalid data","Not subscribed for actions-watch of the given channel","Internal server error occurred."],"name":"message","type":"util.Model.Choice"},"status":{"values":["error"],"name":"status","type":"util.Model.Choice"}},"Record.Model.UpdateRecordsHeader":{"XEXTERNAL":{"name":"X-EXTERNAL","type":"String"}},"Record.Model.MassUpdateSuccessResponse":{"code":{"values":["SUCCESS"],"name":"code","type":"util.Model.Choice"},"details":{"keys":[{"name":"job_id","type":"String"},{"name":"id","type":"Long"},{"name":"Modified_Time","type":"DateTime"},{"name":"Created_Time","type":"DateTime"},{"structure_name":"User.Model.User","name":"Modified_By","type":"User.Model.User"},{"structure_name":"User.Model.User","name":"Created_By","type":"User.Model.User"}],"name":"details","type":"Map"},"message":{"values":["record updated","mass update scheduled successfully"],"name":"message","type":"util.Model.Choice"},"status":{"values":["success"],"name":"status","type":"util.Model.Choice"}},"Module.Model.Argument":{"name":{"name":"name","type":"String"},"value":{"name":"value","type":"String"}},"CustomView.Model.GetCustomViewParam":{"module":{"name":"module","type":"String"}},"Record.Model.ActionHandler":{"classes":["Record.Model.APIException","Record.Model.ActionWrapper"],"interface":true},"User.Model.RequestWrapper":{"users":{"structure_name":"User.Model.User","name":"users","max-length":1,"type":"List","required":true,"min-length":1}},"Record.Model.ResponseHandler":{"classes":["Record.Model.ResponseWrapper","Record.Model.APIException","Record.Model.FileBodyWrapper"],"interface":true},"RelatedRecord.Model.DelinkRecordsParam":{"ids":{"name":"ids","type":"String","required":true}},"BulkWrite.Model.UploadFileHeader":{"feature":{"values":["bulk-write"],"name":"feature","type":"String"},"XCRMORG":{"name":"X-CRM-ORG","type":"String"}},"Record.Model.UpdateRecordUsingExternalIDHeader":{"XEXTERNAL":{"name":"X-EXTERNAL","type":"String"}},"BluePrint.Model.ProcessInfo":{"apiName":{"name":"api_name","type":"String"},"fieldName":{"name":"field_name","type":"String"},"escalation":{"name":"escalation","type":"String"},"continuous":{"name":"continuous","type":"Boolean"},"fieldLabel":{"name":"field_label","type":"String"},"name":{"name":"name","type":"String"},"isContinuous":{"name":"is_continuous","type":"Boolean"},"id":{"name":"id","type":"Long"},"fieldValue":{"name":"field_value","type":"String"},"fieldId":{"name":"field_id","type":"String"},"columnName":{"name":"column_name","type":"String"}},"Currency.Model.SuccessResponse":{"code":{"values":["SUCCESS"],"name":"code","type":"util.Model.Choice"},"details":{"keys":[{"name":"id","type":"Long"}],"name":"details","type":"Map"},"message":{"values":["The multi-currency feature is enabled and given currency is created as the base currency.","The currency created successfully.","The currency updated successfully"],"name":"message","type":"util.Model.Choice"},"status":{"values":["success"],"name":"status","type":"util.Model.Choice"}},"ContactRole.Model.RecordActionHandler":{"classes":["ContactRole.Model.RecordActionWrapper","ContactRole.Model.APIException"],"interface":true},"Currency.Model.APIException":{"code":{"values":["OAUTH_SCOPE_MISMATCH","ALREADY_ENABLED","FEATURE_NOT_ENABLED","NOT_ALLOWED","ACTIVE_STATE_LIMIT_EXCEEDED","INTERNAL_ERROR","INVALID_TOKEN","INVALID_URL_PATTERN","INVALID_REQUEST_METHOD","DUPLICATE_DATA","LIMIT_EXCEEDED","MANDATORY_NOT_FOUND","INVALID_DATA","CURRENCIES_NOT_ENABLED","FEATURE_NOT_SUPPORTED","No Content"],"name":"code","type":"util.Model.Choice"},"details":{"keys":[{"name":"api_name","type":"String"},{"name":"json_path","type":"String"},{"name":"expected_data_type","type":"String"}],"name":"details","type":"Map"},"message":{"values":["invalid oauth token","Please check if the URL trying to access is a correct one.","The http request method type is not a valid one","The module name given seems to be invalid","The multi-currency is already enabled","Currency name is invalid.","ISO code is invalid.","Currency symbol is invalid.","The multi-currency feature is not available except the Enterprise and higher editions.","Required field not found.","unable to process your request. please verify whether you have entered proper method name"," parameter and parameter values.","Currency symbol  is invalid.","Multi currency is not enabled","No Content","Internal server error occurred."],"name":"message","type":"util.Model.Choice"},"status":{"values":["error"],"name":"status","type":"util.Model.Choice"}},"BulkRead.Model.Query":{"cvid":{"name":"cvid","type":"String"},"criteria":{"structure_name":"BulkRead.Model.Criteria","name":"criteria","type":"BulkRead.Model.Criteria"},"module":{"name":"module","type":"String","required":true},"page":{"name":"page","type":"Integer"},"fields":{"name":"fields","type":"List"}},"RelatedRecord.Model.ActionResponse":{"classes":["RelatedRecord.Model.APIException","RelatedRecord.Model.SuccessResponse"],"interface":true},"RelatedList.Model.APIException":{"code":{"values":["INVALID_MODULE","REQUIRED_PARAM_MISSING","INTERNAL_ERROR"],"name":"code","type":"util.Model.Choice"},"details":{"keys":[{"name":"param","type":"String"}],"name":"details","type":"Map"},"message":{"values":["the module name given seems to be invalid","the given module is not supported in api","One of the expected parameter is missing","Internal server error occurred."],"name":"message","type":"util.Model.Choice"},"status":{"values":["error"],"name":"status","type":"util.Model.Choice"}},"Attachment.Model.ActionHandler":{"classes":["Attachment.Model.APIException","Attachment.Model.ActionWrapper"],"interface":true},"Function.Model.ExecuteFunctionUsingFileHeader":{"uploadFileHeader":{"name":"upload_file_header","type":"Map"}},"Field.Model.ResponseHandler":{"classes":["Field.Model.ResponseWrapper","Field.Model.APIException"],"interface":true},"Field.Model.Private":{"export1":{"name":"export","type":"Boolean"},"restricted":{"name":"restricted","type":"Boolean"},"type":{"name":"type","type":"String"}},"Notification.Model.ActionWrapper":{"watch":{"structure_name":"Notification.Model.ActionResponse","name":"watch","type":"List"}},"Tax.Model.SuccessResponse":{"code":{"values":["SUCCESS"],"name":"code","type":"util.Model.Choice"},"details":{"keys":[{"name":"id","type":"Long"},{"name":"name","type":"String"},{"name":"value","type":"Integer"}],"name":"details","type":"Map"},"message":{"values":["tax added","record updated","tax deleted"],"name":"message","type":"util.Model.Choice"},"status":{"values":["success"],"name":"status","type":"util.Model.Choice"}},"Query.Model.ResponseHandler":{"classes":["Query.Model.ResponseWrapper","Query.Model.APIException"],"interface":true},"Module.Model.GetModulesHeader":{"IfModifiedSince":{"name":"If-Modified-Since","type":"DateTime"}},"Record.Model.Territory":{"id":{"name":"id","type":"Long"},"includeChild":{"name":"include_child","type":"Boolean"}},"Field.Model.RelatedDetails":{"displayLabel":{"name":"display_label","type":"String"},"apiName":{"name":"api_name","type":"String"},"module":{"structure_name":"Field.Model.Module","name":"module","type":"Field.Model.Module"},"id":{"name":"id","type":"Long"},"type":{"name":"_type","type":"String"}},"ContactRole.Model.ActionResponse":{"classes":["ContactRole.Model.SuccessResponse","ContactRole.Model.APIException"],"interface":true},"File.Model.ActionHandler":{"classes":["File.Model.ActionWrapper","File.Model.APIException"],"interface":true},"Attachment.Model.FileBodyWrapper":{"file":{"name":"file","type":"StreamWrapper.Model.StreamWrapper","required":true}},"Record.Model.LeadConverter":{"notifyLeadOwner":{"name":"notify_lead_owner","type":"Boolean"},"notifyNewEntityOwner":{"name":"notify_new_entity_owner","type":"Boolean"},"deals":{"structure_name":"Record.Model.Record","module":"Deals","name":"Deals","type":"Record.Model.Record"},"accounts":{"name":"Accounts","type":"String"},"carryOverTags":{"structure_name":"Record.Model.CarryOverTags","name":"carry_over_tags","type":"Record.Model.CarryOverTags"},"overwrite":{"name":"overwrite","type":"Boolean"},"contacts":{"name":"Contacts","type":"String"},"assignTo":{"name":"assign_to","type":"String"}},"BulkRead.Model.SuccessResponse":{"code":{"values":["ADDED_SUCCESSFULLY"],"name":"code","type":"util.Model.Choice"},"details":{"keys":[{"name":"id","type":"Long"},{"name":"operation","type":"String"},{"values":["COMPLETED","IN PROGRESS","ADDED","FAILURE"],"name":"state","type":"util.Model.Choice"},{"structure_name":"User.Model.User","name":"created_by","type":"User.Model.User"},{"name":"created_time","type":"DateTime"}],"name":"details","type":"Map"},"message":{"values":["Added successfully."],"name":"message","type":"util.Model.Choice"},"status":{"values":["success"],"name":"status","type":"util.Model.Choice"}},"Attachment.Model.ActionWrapper":{"data":{"structure_name":"Attachment.Model.ActionResponse","name":"data","type":"List"}},"Org.Model.SuccessResponse":{"code":{"values":["SUCCESS"],"name":"code","type":"util.Model.Choice"},"details":{"name":"details","type":"Map"},"message":{"values":["photo uploaded successfully"],"name":"message","type":"util.Model.Choice"},"status":{"values":["success"],"name":"status","type":"util.Model.Choice"}},"User.Model.Info":{"perPage":{"name":"per_page","type":"Integer"},"moreRecords":{"name":"more_records","type":"Boolean"},"count":{"name":"count","type":"Integer"},"page":{"name":"page","type":"Integer"}},"Tag.Model.ResponseHandler":{"classes":["Tag.Model.ResponseWrapper","Tag.Model.APIException"],"interface":true},"ContactRole.Model.RecordBodyWrapper":{"data":{"structure_name":"ContactRole.Model.ContactRoleWrapper","name":"data","max-length":1,"type":"List","required":true,"min-length":1}},"BulkRead.Model.ActionWrapper":{"data":{"structure_name":"BulkRead.Model.ActionResponse","name":"data","type":"List"},"info":{"name":"info","type":"Map"}},"BulkWrite.Model.BulkWriteResponse":{"result":{"structure_name":"BulkWrite.Model.Result","name":"result","type":"BulkWrite.Model.Result"},"resource":{"structure_name":"BulkWrite.Model.Resource","name":"resource","type":"List"},"createdBy":{"structure_name":"User.Model.User","name":"created_by","type":"User.Model.User"},"callback":{"structure_name":"BulkWrite.Model.CallBack","name":"callback","type":"BulkWrite.Model.CallBack"},"createdTime":{"name":"created_time","type":"DateTime"},"id":{"name":"id","type":"Long"},"characterEncoding":{"name":"character_encoding","type":"String"},"operation":{"name":"operation","type":"String"},"status":{"name":"status","type":"String"}},"Attachment.Model.SuccessResponse":{"code":{"values":["SUCCESS"],"name":"code","type":"util.Model.Choice"},"details":{"keys":[{"name":"id","type":"Long"}],"name":"details","type":"Map"},"message":{"values":["attachment uploaded successfully"],"name":"message","type":"util.Model.Choice"},"status":{"values":["success"],"name":"status","type":"util.Model.Choice"}},"Record.Model.GetRecordParam":{"cvid":{"name":"cvid","type":"String"},"uid":{"name":"uid","type":"String"},"approved":{"name":"approved","type":"String"},"startDateTime":{"name":"startDateTime","type":"DateTime"},"converted":{"name":"converted","type":"String"},"territoryId":{"name":"territory_id","type":"String"},"fields":{"name":"fields","type":"String"},"endDateTime":{"name":"endDateTime","type":"DateTime"},"includeChild":{"name":"include_child","type":"String"}},"RelatedRecord.Model.DeleteRelatedRecordUsingExternalIDHeader":{"xExternal":{"name":"X-EXTERNAL","type":"String"}},"Tag.Model.Tag":{"modifiedTime":{"name":"modified_time","type":"DateTime"},"createdBy":{"lookup":true,"structure_name":"User.Model.User","name":"created_by","type":"User.Model.User"},"name":{"required-in-update":true,"name":"name","type":"String","required":true},"createdTime":{"name":"created_time","type":"DateTime"},"modifiedBy":{"lookup":true,"structure_name":"User.Model.User","name":"modified_by","type":"User.Model.User"},"id":{"name":"id","type":"Long","primary":true}},"Record.Model.DeletedRecordsHandler":{"classes":["Record.Model.APIException","Record.Model.DeletedRecordsWrapper"],"interface":true},"BluePrint.Model.APIException":{"code":{"values":["INVALID_TOKEN","INVALID_URL_PATTERN","INVALID_REQUEST_METHOD","INVALID_DATA","RECORD_NOT_IN_PROCESS","INTERNAL_ERROR"],"name":"code","type":"util.Model.Choice"},"details":{"keys":[{"name":"api_name","type":"String"},{"name":"message","type":"String"},{"name":"expected_data_type","type":"String"},{"name":"info_message","type":"String"},{"name":"parent_api_name","type":"String"},{"structure_name":"BluePrint.Model.ValidationError","name":"validation_error","type":"List"},{"name":"param_name","type":"String"}],"name":"details","type":"Map"},"message":{"values":["invalid oauth token","Please check if the URL trying to access is a correct one","The http request method type is not a valid one","invalid transition","invalid data","record not in process","Internal server error occurred."],"name":"message","type":"util.Model.Choice"},"status":{"values":["error"],"name":"status","type":"util.Model.Choice"}},"CustomView.Model.Criteria":{"comparator":{"values":["equal","not_equal","in","not_in","less_than","less_equal","greater_than","greater_equal","contains","not_contains","starts_with","ends_with","between","not_between"],"name":"comparator","type":"util.Model.Choice"},"groupOperator":{"values":["and","or"],"name":"group_operator","type":"util.Model.Choice"},"field":{"name":"field","type":"String"},"value":{"name":"value","type":"Object"},"group":{"structure_name":"CustomView.Model.Criteria","name":"group","type":"List"}},"Record.Model.GetRecordUsingExternalIDParam":{"cvid":{"name":"cvid","type":"String"},"uid":{"name":"uid","type":"String"},"approved":{"name":"approved","type":"String"},"startDateTime":{"name":"startDateTime","type":"DateTime"},"converted":{"name":"converted","type":"String"},"territoryId":{"name":"territory_id","type":"String"},"fields":{"name":"fields","type":"String"},"endDateTime":{"name":"endDateTime","type":"DateTime"},"includeChild":{"name":"include_child","type":"String"}},"User.Model.ActionWrapper":{"users":{"structure_name":"User.Model.ActionResponse","name":"users","type":"List"}},"Note.Model.GetNotesParam":{"perPage":{"name":"per_page","type":"Integer"},"page":{"name":"page","type":"Integer"},"fields":{"name":"fields","type":"String"}},"Function.Model.ResponseWrapper":{"classes":["Function.Model.APIException","Function.Model.SuccessResponse"],"interface":true},"Tag.Model.RecordActionResponse":{"classes":["Tag.Model.SuccessResponse","Tag.Model.APIException"],"interface":true},"Note.Model.GetNotesHeader":{"IfModifiedSince":{"name":"If-Modified-Since","type":"DateTime","required":true}},"Tag.Model.MergeWrapper":{"tags":{"structure_name":"Tag.Model.ConflictWrapper","name":"tags","max-length":1,"type":"List","required":true,"min-length":1}},"Function.Model.BodyWrapper":{"body":{"name":"body","type":"Map"}},"Tax.Model.BodyWrapper":{"taxes":{"structure_name":"Tax.Model.Tax","name":"taxes","max-length":100,"type":"List","required":true,"min-length":1}},"ContactRole.Model.ResponseHandler":{"classes":["ContactRole.Model.ResponseWrapper","ContactRole.Model.APIException"],"interface":true},"Profile.Model.Category":{"displayLabel":{"name":"display_label","type":"String"},"permissionsDetails":{"name":"permissions_details","type":"List"},"name":{"name":"name","type":"String"}},"Record.Model.LineItemProduct":{"productCode":{"name":"Product_Code","type":"String"},"name":{"name":"name","type":"String"},"currency":{"name":"Currency","type":"String"}},"ShareRecord.Model.DeleteActionWrapper":{"share":{"structure_name":"ShareRecord.Model.DeleteActionResponse","name":"share","interface":true,"type":"ShareRecord.Model.DeleteActionResponse"}},"Variable.Model.Variable":{"apiName":{"required-in-update":false,"name":"api_name","type":"String","primary":true},"variableGroup":{"structure_name":"VariableGroup.Model.VariableGroup","skip-mandatory":true,"name":"variable_group","type":"VariableGroup.Model.VariableGroup","required":true},"name":{"name":"name","type":"String","required":true},"description":{"name":"description","type":"String"},"id":{"name":"id","type":"Long","primary":true},"type":{"name":"type","type":"String","required":true},"value":{"name":"value","type":"Object"}},"ShareRecord.Model.ResponseWrapper":{"share":{"structure_name":"ShareRecord.Model.ShareRecord","name":"share","type":"List"},"shareableUser":{"structure_name":"User.Model.User","name":"shareable_user","type":"List"}},"Variable.Model.GetVariableForAPINameParam":{"group":{"name":"group","type":"String","required":true}},"Layout.Model.Section":{"displayLabel":{"name":"display_label","type":"String"},"sequenceNumber":{"name":"sequence_number","type":"Integer"},"issubformsection":{"name":"isSubformSection","type":"Boolean"},"tabTraversal":{"name":"tab_traversal","type":"Integer"},"apiName":{"name":"api_name","type":"String"},"generatedType":{"name":"generated_type","type":"String"},"name":{"name":"name","type":"String"},"columnCount":{"name":"column_count","type":"Integer"},"fields":{"structure_name":"Field.Model.Field","name":"fields","type":"List"},"properties":{"structure_name":"Layout.Model.Properties","name":"properties","type":"Layout.Model.Properties"}},"User.Model.GetUserHeader":{"IfModifiedSince":{"name":"If-Modified-Since","type":"DateTime"}},"Record.Model.ActionResponse":{"classes":["Record.Model.SuccessResponse","Record.Model.APIException"],"interface":true},"Tag.Model.CountWrapper":{"count":{"name":"count","type":"String"}},"Record.Model.SearchRecordsParam":{"approved":{"name":"approved","type":"String"},"perPage":{"name":"per_page","type":"Integer"},"phone":{"name":"phone","type":"String"},"converted":{"name":"converted","type":"String"},"criteria":{"name":"criteria","type":"String"},"page":{"name":"page","type":"Integer"},"fields":{"name":"fields","type":"String"},"word":{"name":"word","type":"String"},"email":{"name":"email","type":"String"}},"BulkRead.Model.RequestWrapper":{"query":{"structure_name":"BulkRead.Model.Query","name":"query","type":"BulkRead.Model.Query","required":true},"callback":{"structure_name":"BulkRead.Model.CallBack","name":"callback","type":"BulkRead.Model.CallBack"},"fileType":{"values":["ics","csv"],"name":"file_type","type":"util.Model.Choice"}},"User.Model.ResponseWrapper":{"users":{"structure_name":"User.Model.User","name":"users","type":"List"},"info":{"structure_name":"User.Model.Info","name":"info","type":"User.Model.Info"}},"RelatedRecord.Model.GetRelatedRecordUsingExternalIDHeader":{"xExternal":{"name":"X-EXTERNAL","type":"String"},"IfModifiedSince":{"name":"If-Modified-Since","type":"DateTime"}},"Variable.Model.ResponseHandler":{"classes":["Variable.Model.ResponseWrapper","Variable.Model.APIException"],"interface":true},"Module.Model.RelatedListProperties":{"sortOrder":{"name":"sort_order","type":"String"},"sortBy":{"name":"sort_by","type":"String"},"fields":{"name":"fields","type":"List"}},"RelatedList.Model.RelatedList":{"displayLabel":{"name":"display_label","type":"String"},"sequenceNumber":{"name":"sequence_number","type":"String"},"apiName":{"name":"api_name","type":"String"},"module":{"name":"module","type":"String"},"name":{"name":"name","type":"String"},"action":{"name":"action","type":"String"},"id":{"name":"id","type":"Long","primary":true},"href":{"name":"href","type":"String"},"type":{"name":"type","type":"String"},"connectedmodule":{"name":"connectedmodule","type":"String"},"linkingmodule":{"name":"linkingmodule","type":"String"}},"BulkWrite.Model.SuccessResponse":{"code":{"values":["FILE_UPLOAD_SUCCESS","SUCCESS"],"name":"code","type":"util.Model.Choice"},"details":{"keys":[{"name":"file_id","type":"Long"},{"name":"created_time","type":"DateTime"},{"name":"id","type":"Long"},{"structure_name":"User.Model.User","name":"created_by","type":"User.Model.User"}],"name":"details","type":"Map"},"message":{"values":["file uploaded.","success"],"name":"message","type":"util.Model.Choice"},"status":{"values":["success"],"name":"status","type":"util.Model.Choice"}},"Org.Model.Org":{"country":{"name":"country","type":"String"},"city":{"name":"city","type":"String"},"companyName":{"name":"company_name","type":"String"},"description":{"name":"description","type":"String"},"gappsEnabled":{"name":"gapps_enabled","type":"Boolean"},"ziaPortalId":{"name":"zia_portal_id","type":"String"},"employeeCount":{"name":"employee_count","type":"String"},"street":{"name":"street","type":"String"},"countryCode":{"name":"country_code","type":"String"},"currencyLocale":{"name":"currency_locale","type":"String"},"alias":{"name":"alias","type":"String"},"currency":{"name":"currency","type":"String"},"id":{"name":"id","type":"Long","primary":true},"state":{"name":"state","type":"String"},"fax":{"name":"fax","type":"String"},"primaryEmail":{"name":"primary_email","type":"String"},"zip":{"name":"zip","type":"String"},"website":{"name":"website","type":"String"},"mobile":{"name":"mobile","type":"String"},"photoId":{"name":"photo_id","type":"String"},"translationEnabled":{"name":"translation_enabled","type":"Boolean"},"currencySymbol":{"name":"currency_symbol","type":"String"},"timeZone":{"name":"time_zone","type":"String"},"privacySettings":{"name":"privacy_settings","type":"Boolean"},"zgid":{"name":"zgid","type":"String"},"licenseDetails":{"structure_name":"Org.Model.LicenseDetails","name":"license_details","type":"Org.Model.LicenseDetails"},"mcStatus":{"name":"mc_status","type":"Boolean"},"primaryZuid":{"name":"primary_zuid","type":"String"},"phone":{"name":"phone","type":"String"},"isoCode":{"name":"iso_code","type":"String"},"domainName":{"name":"domain_name","type":"String"}}}

/**
 * This class uses the SDK constants name reference.
 */
 var Constants = {
   TYPE_VS_DATATYPE : new Map([
      ["map","[object Map]"],
      ["hashmap", "[object Map]"],
      ["string", "[object String]"],
      ["list", "[object Array]"],
      ["long", "[object BigInt]"],
      ["integer", "[object Number]"],
      ["float", "[object Number]"],
      ["double", "[object Number]"],
      ["boolean", "[object Boolean]"],
      ["datetime", "[object Date]"],
      ["date", "[object Date]"]
  ]),
  
   SPECIAL_TYPES : new Map([
      ["DateTime", "Date"],
      ["Date", "Date"],
      ["Long", "BigInt"]
   ]),

   DEFAULT_MODULENAME_VS_APINAME : new Map([
      ["leads", "Leads"],
      ["contacts", "Contacts"],
      ["accounts", "Accounts"],
      ["deals", "Deals"],
      ["tasks", "Tasks"],
      ["events", "Events"],
      ["activities", "Activities"],
      ["calls", "Calls"],
      ["products", "Products"],
      ["quotes", "Quotes"],
      ["sales_orders", "Sales_Orders"],
      ["purchase_orders", "Purchase_Orders"],
      ["invoices", "Invoices"],
      ["campaigns", "Campaigns"],
      ["vendors", "Vendors"],
      ["price_books", "Price_Books"],
      ["cases", "Cases"],
      ["solutions", "Solutions"],
      ["visits", "Visits"],
      ["approvals", "Approvals"],
      ["notes", "Notes"],
      ["attachments", "Attachments"],
      ["actions_performed", "Actions_Performed"]
   ]),
  
   OAUTH_HEADER_PREFIX : "Zoho-oauthtoken ",
  
   AUTHORIZATION : "Authorization",
  
   ZOHO_SDK : "X-ZOHO-SDK",
  
   SDK_VERSION : "3.0.0",
  
   GRANT_TYPE : "grant_type",
  
   GRANT_TYPE_AUTH_CODE : "authorization_code",
  
   ACCESS_TOKEN : "access_token",
  
   EXPIRES_IN : "expires_in",
  
   EXPIRES_IN_SEC : "expires_in_sec",
  
   REFRESH_TOKEN : "refresh_token",
  
   REFRESH_TOKEN_PARAMETER : "refreshToken",
  
   CLIENT_ID : "client_id",
  
   CLIENT_SECRET : "client_secret",
  
   REDIRECT_URL : "redirect_uri",
  
   CODE : "code",
  
   REQUEST_METHOD_PUT : "PUT",
  
   REQUEST_METHOD_DELETE : "DELETE",
  
   REQUEST_METHOD_GET : "GET",
  
   REQUEST_METHOD_PATCH : "PATCH",
  
   REQUEST_METHOD_POST : "POST",
  
   REQUEST_CATEGORY_READ : "READ",
  
   REQUEST_CATEGORY_ACTION : "ACTION",
  
   REQUEST_CATEGORY_UPDATE : "UPDATE",
  
   REQUEST_CATEGORY_CREATE : "CREATE",
  
   STORAGE : 'storage',
  
   AUTH_PROCESS : "__auth_process",
  
   TOKEN_INIT : "__token_init",
  
   ZES_CLIENT_SCOPE : "zes_client_scope",
  
   DATA_ACCOUNTS_URL : "data-accounts-url",
  
   DATA_CLIENT_ID : "data-clientid",
  
   DATA_SCOPE : "data-scope",
  
   FULL_GRANT : "full_grant",
  
   TRUE : 'true',
  
   GRANTED_FOR_SESSION : "granted_for_session",
  
   REFRESH_URL : '/refresh',
  
   REDIRECT_FILE : "redirect.html",
  
   ACCOUNTS_URL : "&response_type=token&state=zohocrmclient&redirect_uri=",
  
   TOKEN_STORE_ERROR : "TOKEN STORE ERROR",
  
   GET_TOKEN_ERROR_MISSING_PARAMS : "missing auth params[clientId, redirectUri, scope]",
  
   CRM_ACCESS_TOKEN : "crm_access_token",
  
   GRANT : 'GRANT',
  
   REFRESH : 'REFRESH',
  
   STRING : "string",
  
   FIELD : "field",
  
   EXPECTED_TYPE : 'expected-type',
  
   CLASS : "class",
  
   TOKEN_ERROR : "TOKEN ERROR",
  
   STRING_NAMESPACE : "String",
  
   SCOPE : "scope",
  
   GET_TOKEN_ERROR : "Exception in getting tokens - OAuthToken ",
  
   INVALID_CLIENT_ERROR : "INVALID CLIENT ERROR",
  
   ALL : "all",
  
   INFO : 'info',
  
   DEBUG : 'debug',
  
   WARN : 'warn',
  
   ERROR : 'error',
  
   OFF : 'off',
  
   ENCODING : "utf8",
  
   NAME : "name",
  
   TYPE : "type",
  
   TYPE_ERROR : "TYPE ERROR",
  
   VALUES : "values",
  
   ACCEPTED_VALUES : "accepted-values",
  
   GIVEN_VALUE : "given-value",
  
   UNACCEPTED_VALUES_ERROR : "UNACCEPTED VALUES ERROR",
  
   UNIQUE : "unique",
  
   UNIQUE_KEY_ERROR : "UNIQUE KEY ERROR",
  
   MIN_LENGTH: "min-length",
  
   MAX_LENGTH: "max-length",
  
   MAXIMUM_LENGTH : "maximum-length",
  
   MINIMUM_LENGTH : "minimum-length",
  
   MINIMUM_LENGTH_ERROR : "MINIMUM LENGTH ERROR",
  
   REGEX : "regex",
  
   INSTANCE_NUMBER : "instance-number",
  
   REGEX_MISMATCH_ERROR : "REGEX MISMATCH ERROR",
  
   ACCEPTED_TYPE : "accepted_type",
  
   MAXIMUM_LENGTH_ERROR : "MAXIMUM LENGTH ERROR",
  
   INTERFACE : "interface",
  
   CLASSES : "classes",
  
   READ_ONLY : "read-only",
  
   REQUIRED : "required",
  
   MANDATORY_VALUE_MISSING_ERROR : "MANDATORY VALUE MISSING ERROR",
  
   MANDATORY_KEY_MISSING_ERROR : "Value missing for mandatory key: ",
  
   EXCEPTION_SET_KEY_MODIFIED : "Exception in calling setKeyModified",
  
   LIST_NAMESPACE : "list",
  
   MAP_NAMESPACE : "map",
  
   STRUCTURE_NAME : "structure_name",
  
   RECORD_NAMESPACE : "Record.Model.Record",
  
   REMINDAT_NAMESPACE : "Record.Model.RemindAt",
  
   FIELD_FILE_NAMESPACE : "Record.Model.FileDetails",
  
   USER_NAMESPACE : "User.Model.User",
  
   MODULE_NAMESPACE : "Module.Model.Module",
  
   LAYOUT_NAMESPACE : "Layout.Model.Layout",
  
   PARTICIPANTS : "Record.Model.Participants",
  
   KEY_VALUES : "keyValues",
  
   KEY_MODIFIED : "keyModified",
  
   KEYS : "keys",
  
   ARRAY_KEY : "[object Array]",
  
   MAP_KEY : "[object Map]",
  
   FUNCTION : "function",
  
   CLASS_NOT_FOUND : "CLASS NOT FOUND",
  
   OBJECT_TYPE : "[object Object]",
  
   OBJECT_KEY : "object",
  
   STRING_OBJECT_NAME : "[object String]",
  
   INTEGER_KEY : "[object Integer]",
  
   INTEGER_NAMESPACE : "Integer",
  
   CONTENT_DISPOSITION : 'content-disposition',
  
   LONG_NAMESPACE : "Long",
  
   BOOLEAN_NAMESPACE : "Boolean",
  
   DATE_NAMESPACE : "Date",
  
   DATETIME_NAMESPACE : "DateTime",
  
   FILE_NAMESPACE : "util.StreamWrapper",
  
   DOUBLE_NAMESPACE : "Double",
  
   FLOAT_NAMESPACE : "Float",
  
   OBJECT_NAMESPACE : "Object",
  
   USER : "user",
  
   ENVIRONMENT : "environment",
  
   TOKEN : "token",
  
   STORE : "store",
  
   EMAIL_PATTERN : /^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,4})$/,
  
   EMAIL : "email",
  
   CHOICE_NAMESPACE : "util.Model.Choice",
  
   MODULE : "module",
  
   MODULEPACKAGENAME : "modulePackageName",
  
   MODULEDETAILS : "moduleDetails",
  
   PRODUCT_DETAILS : "Product_Details",
  
   PRICING_DETAILS : "Pricing_Details",
  
   PARTICIPANT_API_NAME : "Participants",
  
   INVENTORY_MODULES : ["invoices", "sales_orders","purchase_orders","quotes"],
  
   PRICE_BOOKS : "Price_Books",
  
   EVENTS : "Events",
  
   LAYOUT : "Layout",
  
   SUBFORM : "subform",
  
   LOOKUP : "lookup",
  
   SE_MODULE : "se_module",
  
   INVENTORY_LINE_ITEMS : "Record.Model.InventoryLineItems",
  
   KEYS_TO_SKIP : ["Created_Time", "Modified_Time", "Created_By", "Modified_By", "Tag"],
  
   STATE : "state",
  
   LOCATION : "location",
  
   API_DOMAIN : "api_domain",
  
   TOKEN_KEYS : ["granted_for_session", "access_token","expires_in","expires_in_sec","location","api_domain","state","__token_init","__auth_process","externals","visibility","inherited"],
  
   INITIALIZATION_ERROR : "Exception in initialization : ",
  
   CONTENT_TYPE : "Content-Type",
  
   SET_TO_CONTENT_TYPE : ["/crm/bulk/v2/read", "/crm/bulk/v2/write"],
  
   SET_API_URL_EXCEPTION : "Exception in setting API URL : ",
  
   AUTHENTICATION_EXCEPTION : "Exception in authenticating current request : ",
  
   FORM_REQUEST_EXCEPTION : "Exception in forming request body : ",
  
   API_CALL_EXCEPTION : "Exception in current API call execution : ",
  
   HTTP : "http",
  
   CONTENT_API_URL : "content.zohoapis.com",
  
   INVALID_URL_ERROR : "Invalid URL Error",
  
   ARRAY_NAME : "Array",
  
   NO_CONTENT_STATUS_CODE : 204,
  
   NOT_MODIFIED_STATUS_CODE : 304,
  
   LINE_TAX : "$line_tax",
  
   LINE_TAX_NAMESPACE : "Record.Model.LineTax",
  
   UNDERSCORE : "_",
  
   RELATED_LISTS : "Related_Lists",
  
   API_NAME : "api_name",
  
   HREF : "href",
  
   CALLS : "calls",
  
   CALL_DURATION : "call_duration",
  
   ACTIVITIES : "Activities",
  
   COMMENT_NAMESPACE : "Record.Model.Comment",
  
   SKIP_MANDATORY : "skip-mandatory",
  
   CANT_DISCLOSE : " ## can't disclose ## ",
  
   URL_NAME : "URL",
  
   HEADERS : "HEADERS",
  
   PARAMS : "PARAMS",
  
   PROXY_SETTINGS : "Proxy settings - ",
  
   PROXY_HOST : "Host: ",
  
   PROXY_PORT : "Port: ",
  
   PROXY_USER : "User: ",
  
   SDK_UNINITIALIZATION_MESSAGE : "SDK is UnInitialized",
  
   SDK_UNINITIALIZATION_ERROR : "SDK UNINITIALIZED ERROR",
  
   REQUIRED_IN_UPDATE : "required-in-update",
  
   PRIMARY : "primary",
  
   FILEBODYWRAPPER : "FileBodyWrapper",
  
   EXCEPTION_IS_KEY_MODIFIED : "Exception in calling isKeyModified : ",
  
   FILE_ERROR : "file_error",
  
   FILE_DOES_NOT_EXISTS : "file does not exists",
  
   UNSUPPORTED_IN_API : "API UNSUPPORTED OPERATION",
  
   UNSUPPORTED_IN_API_MESSAGE : " Operation is not supported by API",
  
   NULL_VALUE : "null",
  
   NOTES : "Notes",
  
   ATTACHMENTS : "$attachments",
  
   ATTACHMENTS_NAMESPACE : "Attachment.Model.Attachment",
  
   PICKLIST : "picklist",
  
   CONSENT_NAMESPACE : "Record.Model.Consent",
  
   HEADER_NULL_ERROR : "NULL HEADER ERROR",
  
   HEADER_INSTANCE_NULL_ERROR : "Header Instance MUST NOT be null",
  
   HEADER_NAME_NULL_ERROR : "NULL HEADER NAME ERROR",
  
   HEADER_NAME_NULL_ERROR_MESSAGE : "Header Name MUST NOT be null",
  
   NULL_VALUE_ERROR_MESSAGE : " MUST NOT be null",
  
   SDK_CONFIG_ERROR_MESSAGE : "sdkConfig MUST NOT be null.",
  
   HEADER_OR_PARAM_NAME : "HEADER OR PARAM",
  
   CLASS_KEY : "class",
  
   OBJECT : "Object",
  
   INITIALIZATION_SUCCESSFUL : "Initialization successful ",
  
   PACKAGE_NAMESPACE : "Record.Model.",
  
   COMMENTS : "Comments",
  
   SOLUTIONS : "Solutions",
  
   CASES : "Cases",
  
   FORMULA : "formula",
  
   ACCOUNTS : "Accounts",
  
   CRMSDK : "ZohoCRMJSSDK",
  
   FIELDS_LAST_MODIFIED_TIME : "FIELDS-LAST-MODIFIED-TIME",
  
   API_EXCEPTION : "API_EXCEPTION",
  
   DELETE_FIELD_FILE_ERROR : "Exception in deleting Current User Fields file : ",
  
   REFRESH_SINGLE_MODULE_FIELDS_ERROR : "Exception in refreshing fields of module : ",
  
   REFRESH_ALL_MODULE_FIELDS_ERROR : "Exception in refreshing fields of all modules : ",
  
   STREAM_WRAPPER_CLASS : "StreamWrapper.Model.StreamWrapper",
  
   API_ERROR_RESPONSE : "Error response : ",
  
   CONTENT_TYPE_HEADER : "content-type",
  
   FILE_BODY_WRAPPER : "FileBodyWrapper",
  
   MANDATORY_KEY_ERROR : "Value missing or null for mandatory key(s) :",
  
   MANDATORY_VALUE_ERROR : "MANDATORY VALUE ERROR",
  
   PRIMARY_KEY_ERROR : "Value missing or null for required key(s) : ",
  
   RECURRING_ACTIVITY_NAMESPACE : "Record.Model.RecurringActivity",
  
   CONSENT_LOOKUP : "consent_lookup",
  
   PRICINGDETAILS : "Record.Model.PricingDetails",
  
   HOSTADDRESS : "127.0.0.1",
  
   LOCALHOST : "localhost",
  
   APP : "app",
  
   CONTENT_API : "content.zohoapis",
  
   ARRAY_BUFFER : "arraybuffer",
  
   ZIP : "zip",
  
   EXCEPTION : "EXCEPTION : ",
  
   IS_GENERATE_REQUEST_BODY : ["PATCH", "POST", "PUT"],
  
   PHOTO : "photo",
  
   CRM : "crm",
  
   API_VERSION : "v2",
  
   PHOTO_SUPPORTED_MODULES : ["leads", "contacts", "accounts", "products", "vendors"],
  
   PHOTO_UPLOAD_ERROR_MESSAGE  : "The given module is not supported in API.",
  
   INVALID_MODULE  : "INVALID_MODULE",
  
   TIME_OUT : "Timed out!!!",
  
   USER_PROXY : "proxy",
   
   SDK_MODULE_METADATA : "SDK-MODULE-METADATA",
   
   REMINDER_NAMESPACE : "Record.Model.Reminder",

   CLIENT_ID_NULL_ERROR_MESSAGE : "ClientID MUST NOT be null",

   REDIRECT_URL_NULL_ERROR_MESSAGE : "Redirect URL MUST NOT be null",

   SCOPE_NULL_ERROR_MESSAGE : "Scope MUST NOT be null",

   OAUTH_MANDATORY_KEYS : ["clientId", "redirectURL", "scope", "accessToken"],

   SKIP_MODULES : ["deals"],

   GENERATED_TYPE : "generated_type",

   GENERATED_TYPE_CUSTOM : "custom",

   UPLOAD_PHOTO_UNSUPPORTED_ERROR : "UPLOAD PHOTO UNSUPPORTED MODULE",

   UPLOAD_PHOTO_UNSUPPORTED_MESSAGE :"Photo Upload Operation is not supported by the module: ",

   SWITCH_USER_ERROR : "SWITCH USER ERROR",

   ENVIRONMENT_ERROR_MESSAGE : "Environment MUST NOT be null.",

   TOKEN_ERROR_MESSAGE : "Token MUST NOT be null.",

   SDK_CONFIG : "sdkConfig",

   INITIALIZATION_EXCEPTION : "Exception in initialization : ",

   USER_PROXY_ERROR : "USERPROXY ERROR",

   HOST_ERROR_MESSAGE : "Host MUST NOT be null.",

   PORT_ERROR_MESSAGE : "Port MUST NOT be null.",

   REQUEST_PROXY_ERROR : "REQUEST_PROXY ERROR",

   DATA_TYPE_ERROR : "DATA_TYPE_ERROR",

   BODY : "body",

   FUNCTIONS : "functions",

   FUNCTIONS_PATH : "/actions/execute"
  };

var ZCRM = {};

/**
 * The class to initialize Zoho CRM SDK.
 */
var Initializer = {};

/**
 * This method to initialize the SDK.
 * @param {Environment} environment A Environment class instance containing the CRM API base URL and Accounts URL.
 * @param {SDKConfig} sdkConfig A SDKConfig class instance containing the configuration.
 * @param {Token} token A Token class instance containing the OAuth client application information.
 * @param {Logger} logger A Logger class instance containing the log file path and Logger type.
 * @param {RequestProxy} proxy - A RequestProxy class instance containing the proxy properties of the user.
 */
async function initializeSDK(environment, sdkConfig, token = null, logger = null, proxy = null) {
    let store = new TokenStore();

    try {
        if (token === null && document.getElementById(Constants.ZES_CLIENT_SCOPE) !== null) {
            let clientId = document.getElementById(Constants.ZES_CLIENT_SCOPE).getAttribute(Constants.DATA_CLIENT_ID);

            let scope = document.getElementById(Constants.ZES_CLIENT_SCOPE).getAttribute(Constants.DATA_SCOPE);

            var path = window.location.pathname;

            var redirect_url = window.location.origin;

            var pathSplit = path.split('/');

            var length = pathSplit.length;

            if(length > 0) {
                redirect_url += "/"
            }

            for (var i = 0; i < length - 2; i++) {
                if(pathSplit[i] !== "" && pathSplit[i].trim().length > 0 && !pathSplit[i].endsWith(".html")) {

                    redirect_url += pathSplit[i] + "/";
                }
            }

            if(location.hostname === Constants.HOSTADDRESS || location.hostname === Constants.LOCALHOST || location.hostname === "" ) {
                redirect_url += Constants.APP + "/";
            }

            if(!redirect_url.endsWith("/")){
                redirect_url += "/";
            }

            token = new OAuthBuilder()
            .clientId(clientId)
            .scope(scope)
            .redirectURL(redirect_url + Constants.REDIRECT_FILE)
            .build();
        }

        SDKLogger.initialize(logger);

        Initializer.environment = environment;

        Initializer.store = store;

        Initializer.sdkConfig = sdkConfig;

        Initializer.token = token;

        Initializer.requestProxy = proxy;

        await Initializer.store.getToken(token);

        SDKLogger.log(Levels.INFO, Constants.INITIALIZATION_SUCCESSFUL.concat(environment.url).concat("."));
    }
    catch (e) {
        if(e instanceof SDKException) {
            throw e;
        }
        else {
            throw new SDKException(Constants.INITIALIZATION_EXCEPTION, e.toString());
        }
    }
}

/**
 * This class represents the HTTP header.
 */
class Header {
	/**
	 * Creates an Header class instance with the specified header name.
	 * @param {string} name A String containing the header name.
	 * @param {string} className A String containing the header class name.
	 */
	constructor(name, className = null) {
		this._name = name;

		this._className = className;
	}

	/**
	 * This is a getter method to get header name.
	 * @returns {string} A String representing the header name.
	 */
	getName() {
		return this._name;
	}

	/**
	 * This is a getter method to get header class name.
	 * @returns {string} A String representing the header class name.
	 */
	getClassName() {
		return this._className;
	}
}

/**
 * This class represents the HTTP header name and value.
 */
class HeaderMap {
    constructor() {
        this._headerMap = new Map();
    }

    /**
     * This is a getter method to get header map.
     * @return A Map representing the API request headers.
     */
    getHeaderMap() {
        return this._headerMap;
    }

    /**
     * This is a setter method to set header map.
     * @param {Map} headerMap  An Map representing the API request headers.
     */
    setHeaderMap(headerMap) {
        this._headerMap = headerMap;
    }

    /**
     * This method is to add header name and value.
     * @param {Header} header A Header class instance.
     * @param {object} value A object containing the header value.
     */
    async add(header, value) {
        if (header === null) {
            throw new SDKException(Constants.HEADER_NULL_ERROR, Constants.HEADER_INSTANCE_NULL_ERROR);
        }

        let headerName = header.getName();

        if (headerName === null) {
            throw new SDKException(Constants.HEADER_NAME_NULL_ERROR, Constants.HEADER_NAME_NULL_ERROR_MESSAGE);
        }

        if (value === null) {
            throw new SDKException(Constants.HEADER_NULL_ERROR, headerName + Constants.NULL_VALUE_ERROR_MESSAGE);
        }

        let headerClassName = header.getClassName();

        let parsedHeaderValue = null;

        if (headerClassName !== null) {
            let headerParamValidator = new HeaderParamValidator();

            parsedHeaderValue = await headerParamValidator.validate(header, value);
        }
        else {
            try {
                parsedHeaderValue = await DataTypeConverter.postConvert(value, value.constructor.name);
            }
            catch (ex) {

                parsedHeaderValue = value;
            }
        }

        if (parsedHeaderValue instanceof Map || Array.isArray(parsedHeaderValue)) {
            let coverterInstance = new JSONConverter(null);

            parsedHeaderValue = JSON.stringify(await coverterInstance.redirectorForObjectToJSON(parsedHeaderValue));
        }

        if (this._headerMap.has(headerName) && this._headerMap.get(headerName) !== null) {
            let headerValue = this._headerMap.get(headerName);

            headerValue = headerValue.concat(",", parsedHeaderValue.toString());

            this._headerMap.set(headerName, headerValue);
        }
        else {

            this._headerMap.set(headerName, parsedHeaderValue.toString());
        }
    }
}

/**
 * This class represents the HTTP parameter.
 */
class Param {
    /**
     * Creates an Param class instance with the specified parameter name.
     * @param {string} name A String containing the parameter name.
     * @param {string} className A String containing the parameter class name.
     */
    constructor(name, className = null) {
        this._name = name;

        this._className = className;
    }

    /**
     * This is a getter method to get parameter name.
     * @returns {string} A String representing the parameter name.
     */
    getName() {
        return this._name;
    }

    /**
     * This is a getter method to get parameter class name.
     * @returns {string} A String representing the parameter class name.
     */
    getClassName() {
        return this._className;
    }
}

/**
 * This class representing the HTTP parameter name and value.
 */
class ParameterMap {
    constructor() {
        this._parameterMap = new Map();
    }

    /**
     * This is a getter method to get parameter map.
     * @returns {Map} A Map representing the API response parameters.
     */
    getParameterMap() {
        return this._parameterMap;
    }

    /**
     * This is a setter method to set parameter map.
     * @returns {Map} An Map representing the API request parameters.
     */
    setParameterMap(parameterMap) {
        this._parameterMap = parameterMap;
    }

    /**
     * This method to add parameter name and value.
     * @param {Param} param A Param class instance.
     * @param {object} value A Object containing the parameter value.
     */
    async add(param, value) {
        if (param === null) {
            throw new SDKException(Constants.HEADER_NULL_ERROR, Constants.HEADER_INSTANCE_NULL_ERROR);
        }

        let paramName = param.getName();

        if (paramName === null) {
            throw new SDKException(Constants.HEADER_NAME_NULL_ERROR, Constants.HEADER_NAME_NULL_ERROR_MESSAGE);
        }

        if (value === null) {
            throw new SDKException(Constants.HEADER_NULL_ERROR, paramName + Constants.NULL_VALUE_ERROR_MESSAGE);
        }

        let paramClassName = param.getClassName();

        let parsedParamValue = null;

        if (paramClassName !== null) {
            let headerParamValidator = new HeaderParamValidator();

            parsedParamValue = await headerParamValidator.validate(param, value);
        }
        else {
            try {
                parsedParamValue = await DataTypeConverter.postConvert(value, value.constructor.name);
            }
            catch (ex) {
                parsedParamValue = value;
            }
        }

        if (parsedParamValue instanceof Map || Array.isArray(parsedParamValue)) {
            let coverterInstance = new JSONConverter(null);

            parsedParamValue = JSON.stringify(await coverterInstance.redirectorForObjectToJSON(parsedParamValue));
        }

        if (this._parameterMap.has(paramName) && this._parameterMap.get(paramName) != null) {
            let paramValue = this._parameterMap.get(paramName);

            paramValue = paramValue.concat(",", parsedParamValue.toString());

            this._parameterMap.set(paramName, paramValue);
        }
        else {
            this._parameterMap.set(paramName, parsedParamValue.toString());
        }
    }
}

var listener = 0;

var Store = class {
    getToken(token) { }
}

class TokenStore extends Store {
    async getToken(token) {

        if (token !== null && token.getAccessToken() !== null && token.getAccessToken() != undefined) {
            token.setAccessToken(token.getAccessToken());

            return token;
        }

        if (listener === 0) {
            window.addEventListener(Constants.STORAGE, function (reponse) {
                if (reponse.key === Constants.ACCESS_TOKEN && (reponse.oldValue !== reponse.newValue || reponse.oldValue === null)) {
                    location.reload();
                }

                if (reponse.key === Constants.ACCESS_TOKEN) {
                    sessionStorage.removeItem(Constants.AUTH_PROCESS);
                }
            }, false);

            listener = 1;

            if (sessionStorage.getItem(Constants.AUTH_PROCESS)) {
                sessionStorage.removeItem(Constants.AUTH_PROCESS);
            }
        }

        Constants.TOKEN_KEYS.forEach(function (k) {
            var isKeyExists = localStorage.hasOwnProperty(k);

            if (isKeyExists) {

                sessionStorage.setItem(k, localStorage[k]);
            }

            localStorage.removeItem(k);
        });

        var valueInStore = sessionStorage.getItem(Constants.ACCESS_TOKEN);

        var tokenInit = sessionStorage.getItem(Constants.TOKEN_INIT);

        if (tokenInit !== null && valueInStore !== null && Date.now() >= parseInt(tokenInit) + 59 * 60 * 1000) { // check after 59th minute

            valueInStore = null;

            sessionStorage.removeItem(Constants.ACCESS_TOKEN);
        }

        var auth_process = sessionStorage.getItem(Constants.AUTH_PROCESS);

        if ((valueInStore === null && auth_process === null) || (valueInStore === 'undefined' && (auth_process === null || auth_process === Constants.TRUE))) {
            var accountsUrl;

            var clientId;

            var scope;

            var redirectUrl;

            if (Initializer.environment !== null) {
                accountsUrl = Initializer.environment.getAccountsUrl();
            }

            if (token !== null && token.getClientId().length > 0) {
                clientId = token.getClientId();

                scope = token.getScope();

                redirectUrl = token.getRedirectUrl();
            }

            if (document.getElementById(Constants.ZES_CLIENT_SCOPE) !== null) {
                let accounts_url = document.getElementById(Constants.ZES_CLIENT_SCOPE).getAttribute(Constants.DATA_ACCOUNTS_URL);

                if (accounts_url !== null) {
                    if (!accounts_url.includes("/oauth/v2/auth")) {

                        accounts_url = accounts_url + "/oauth/v2/auth";
                    }

                    accountsUrl = accounts_url;
                }
            }

            var fullGrant = sessionStorage.getItem(Constants.FULL_GRANT);

            var grantedForSession = sessionStorage.getItem(Constants.GRANTED_FOR_SESSION);

            if (sessionStorage.getItem(Constants.TOKEN_INIT) !== null && ((fullGrant !== null && Constants.TRUE === fullGrant) || (grantedForSession !== null && Constants.TRUE === grantedForSession))) {
                accountsUrl += Constants.REFRESH_URL;
            }

            if (clientId && scope) {
                sessionStorage.setItem(Constants.TOKEN_INIT, Date.now());

                sessionStorage.removeItem(Constants.ACCESS_TOKEN);

                sessionStorage.setItem(Constants.AUTH_PROCESS, Constants.TRUE);

                window.open(accountsUrl + "?" + Constants.SCOPE + "=" + scope + "&" + Constants.CLIENT_ID + "=" + clientId + Constants.ACCOUNTS_URL + redirectUrl);

                Constants.TOKEN_KEYS.forEach(function (k) {
                    var isKeyExists = localStorage.hasOwnProperty(k);

                    if (isKeyExists) {
                        sessionStorage.setItem(k, localStorage[k]);
                    }

                    localStorage.removeItem(k);
                });

                valueInStore = sessionStorage.getItem(Constants.ACCESS_TOKEN);
            }
            else {
                throw new SDKException(Constants.TOKEN_STORE_ERROR, Constants.GET_TOKEN_ERROR, null, null);
            }
        }

        if (token !== null && valueInStore !== 'undefined') {
            token.setAccessToken(valueInStore);
        }

        return token;
    }

    revokeAccess() {
        sessionStorage.removeItem(Constants.CRM_ACCESS_TOKEN);
    }
}

/**
 * This class verifies and sets token to APIHTTPConnector instance.
 */
var Token = class {
    /**
     * This method to set authentication token to APIHTTPConnector instance.
     * @param {APIHTTPConnector} urlConnection A APIHTTPConnector class instance.
     */
    authenticate(urlConnection) { }
}

class OAuthBuilder {
    constructor() {
        this._clientId = null;

        this._redirectUrl = null;
    
        this._scope = null;
    
        this._accessToken = null;
    }

    clientId(clientID) {
        Utility.assertNotNull(clientID, Constants.TOKEN_ERROR, Constants.CLIENT_ID_NULL_ERROR_MESSAGE);

        var error = {};

        if (typeof clientID !== Constants.STRING) {

            error[Constants.FIELD] = Constants.CLIENT_ID;

            error[Constants.EXPECTED_TYPE] = Constants.STRING;

            error[Constants.CLASS] = OAuthToken.name;

            throw new SDKException(Constants.TOKEN_ERROR, null, error, null);
        }

        this._clientId = clientID;

        return this;
    }

    redirectURL(redirectURL) {
        Utility.assertNotNull(redirectURL, Constants.TOKEN_ERROR, Constants.REDIRECT_URL_NULL_ERROR_MESSAGE);

        var error = {};

        if (redirectURL != null && typeof redirectURL !== Constants.STRING) {

            error[Constants.FIELD] = Constants.REDIRECT_URL;

            error[Constants.EXPECTED_TYPE] = Constants.STRING;

            error[Constants.CLASS] = OAuthToken.name;

            throw new SDKException(Constants.TOKEN_ERROR, null, error, null);
        }

        this._redirectURL = redirectURL;

        return this;
    }

    scope(scope) {
        Utility.assertNotNull(scope, Constants.TOKEN_ERROR, Constants.SCOPE_NULL_ERROR_MESSAGE);

        var error = {};

        if (typeof scope !== Constants.STRING) {

            error[Constants.FIELD] = Constants.SCOPE;

            error[Constants.EXPECTED_TYPE] = Constants.STRING;

            error[Constants.CLASS] = OAuthToken.name;

            throw new SDKException(Constants.TOKEN_ERROR, null, error, null);
        }

        this._scope = scope;

        return this;
    }

    accessToken(accessToken) {
        var error = {};
        
        if (typeof accessToken !== Constants.STRING) {

            error[Constants.FIELD] = Constants.ACCESS_TOKEN;

            error[Constants.EXPECTED_TYPE] = Constants.STRING;

            error[Constants.CLASS] = OAuthToken.name;

            throw new SDKException(Constants.TOKEN_ERROR, null, error, null);
        }

        this._accessToken = accessToken;

        return this;
    }

    build() {
        if (this._clientId == null && this._redirectUrl == null && this._scope == null && this._accessToken == null) {
            throw new SDKException(Constants.MANDATORY_VALUE_ERROR, Constants.MANDATORY_KEY_ERROR, Constants.OAUTH_MANDATORY_KEYS);
        }

        return new OAuthToken(this._clientId, this._redirectURL, this._scope, this._accessToken);
    }
}


/**
 * This class gets the tokens and checks the expiry time.
 */
class OAuthToken extends Token {
    /**
     * Creates an OAuthToken class instance with the specified parameters.
     * @param {String} clientid A String containing the OAuth client id.
     * @param {String} redirecturl A String containing the OAuth redirect URL.
     * @param {String} scope A String containing the OAuth scope.
     * @param {String} accessToken A String containing the OAuth access token.
     */
    constructor(clientid, redirecturl, scope, accessToken = null) {
        super();

        this._clientId = clientid;

        this._redirectUrl = redirecturl;

        this._accessToken = accessToken;

        this._scope = scope;
    }

    /**
     * This is a getter method to get OAuth client id.
     * @returns A String representing the OAuth client id.
     */
    getClientId() {
        return this._clientId;
    }

    /**
     * This is a getter method to get OAuth redirect URL.
     * @returns A String representing the OAuth redirect URL.
     */
    getRedirectUrl() {
        return this._redirectUrl;
    }

    /**
     * This is a getter method to get access token.
     * @returns A String representing the access token.
     */
    getAccessToken() {
        return this._accessToken;
    }

    /**
     * This is a setter method to set access token.
     * @returns A String containing the access token.
     */
    setAccessToken(accessToken) {
        this._accessToken = accessToken;
    }

    /**
     * This is a getter method to get oauth scope.
     * @returns A String representing the oauth scope.
     */
    getScope() {
        return this._scope;
    }

    async authenticate(urlConnection) {
        try {
            super.authenticate(urlConnection);

            var token = this._accessToken;

            if(token == null || token == undefined) {
                var oauth_token = await Initializer.store.getToken(this);

                if (oauth_token.getAccessToken() === null) {
                    throw Constants.INVALID_CLIENT_ERROR;
                }

                token = oauth_token.getAccessToken();
            }

            urlConnection.addHeader(Constants.AUTHORIZATION, Constants.OAUTH_HEADER_PREFIX + token);
        }
        catch (err) {
            throw new SDKException(Constants.TOKEN_ERROR, Constants.GET_TOKEN_ERROR, null, err);
        }
    }
}

/**
 * Common Class to provide or obtain a value, when there are multiple supported values.
 */
class Choice {
    constructor(value) {
        this._value = value;
    }

    getValue() {
        return this._value;
    }
}

/**
 * This class handles module field details.
 */
class Utility {
    static async assertNotNull(value, errorCode, errorMessage) {
        if (value == null) {
            throw new SDKException(errorCode, errorMessage);
        }
    }

    static isEmpty(obj) {
        return Object.keys(obj).length === 0;
    }

    static async fileExistsFlow(moduleAPIName, encodedName, lastModifiedTime) {
        let recordFieldDetailsJson = await LocalCache.get(encodedName);

        if (Initializer.sdkConfig.getAutoRefreshFields() == true && !Utility.getModifiedModules && (!(recordFieldDetailsJson.hasOwnProperty(Constants.FIELDS_LAST_MODIFIED_TIME)) || Utility.forceRefresh || (new Date().getTime() - recordFieldDetailsJson[Constants.FIELDS_LAST_MODIFIED_TIME]) > 3600000)) {
            Utility.getModifiedModules = true;

            lastModifiedTime = !this.forceRefresh && recordFieldDetailsJson.hasOwnProperty(Constants.FIELDS_LAST_MODIFIED_TIME) ? recordFieldDetailsJson[Constants.FIELDS_LAST_MODIFIED_TIME] : null;
            
            await Utility.modifyFields(encodedName, lastModifiedTime);

            Utility.getModifiedModules = false;
        }
        else if (Initializer.sdkConfig.getAutoRefreshFields() == false && Utility.forceRefresh && !Utility.getModifiedModules) {
            this.getModifiedModules = true;

            await Utility.modifyFields(encodedName, lastModifiedTime);

            this.getModifiedModules = false;
        }

        recordFieldDetailsJson = await LocalCache.get(encodedName);

        if (moduleAPIName == null || (recordFieldDetailsJson.hasOwnProperty(moduleAPIName.toLowerCase()) && recordFieldDetailsJson[moduleAPIName.toLowerCase()] != null)) {
            return;
        }
        else {
            await fillDataType();
            
            recordFieldDetailsJson[moduleAPIName.toLowerCase()] = {};

            await LocalCache.set(encodedName, recordFieldDetailsJson);

            let fieldsDetails = await Utility.getFieldsDetails(moduleAPIName);

            recordFieldDetailsJson = await LocalCache.get(encodedName);

            recordFieldDetailsJson[moduleAPIName.toLowerCase()] = fieldsDetails;

            await LocalCache.set(encodedName, recordFieldDetailsJson);
        }
    }

    static async verifyModuleAPIName(moduleName) {
        if (moduleName != null && Constants.DEFAULT_MODULENAME_VS_APINAME.has(moduleName.toLowerCase()) && Constants.DEFAULT_MODULENAME_VS_APINAME.get(moduleName.toLowerCase()) != null) {
            return Constants.DEFAULT_MODULENAME_VS_APINAME.get(moduleName.toLowerCase());
        }

        if (Initializer.sdkConfig.getCacheStore()) {
            let encodedName = new Converter().getEncodedFileName();

            if (await LocalCache.exist()) {
                let fieldsJSON = await LocalCache.get(encodedName);

                if (fieldsJSON.hasOwnProperty(Constants.SDK_MODULE_METADATA) && fieldsJSON[Constants.SDK_MODULE_METADATA].hasOwnProperty(moduleName.toLowerCase())) {
                    let moduleMeta = fieldsJSON[Constants.SDK_MODULE_METADATA];

                    return moduleMeta[moduleName.toLowerCase()][Constants.API_NAME];
                }
            }
        }
        else {
            if (CommonAPIHandler.recordFieldDetails.has(moduleName.toLowerCase())) {
                return;
            }

            if (CommonAPIHandler.recordFieldDetails.has(Constants.SDK_MODULE_METADATA)) {
                let fieldsJSON = CommonAPIHandler.recordFieldDetails.get(Constants.SDK_MODULE_METADATA);
                if (fieldsJSON.hasOwnProperty(moduleName.toLowerCase())) {
                    let moduleMeta = fieldsJSON[Constants.SDK_MODULE_METADATA];

                    return moduleMeta[moduleName.toLowerCase()][Constants.API_NAME];
                }
            }
        }

        return moduleName;
    }

    static async setHandlerAPIPath(moduleAPIName, handlerInstance) {
        if (handlerInstance == null) {
            return;
        }

        let apiPath = handlerInstance.getAPIPath();

        if (apiPath.toLowerCase().includes(moduleAPIName.toLowerCase())) {
            let apiPathSplit = apiPath.split("/");

            for (var i = 0; i < apiPathSplit.length; i++) {
                if (apiPathSplit[i].toLowerCase() == moduleAPIName.toLowerCase()) {
                    apiPathSplit[i] = moduleAPIName;
                }
                else if (Constants.DEFAULT_MODULENAME_VS_APINAME.has(apiPathSplit[i].toLowerCase()) && Constants.DEFAULT_MODULENAME_VS_APINAME.get(apiPathSplit[i].toLowerCase()) != null) {
                    apiPathSplit[i] = Constants.DEFAULT_MODULENAME_VS_APINAME.get(apiPathSplit[i].toLowerCase());
                }
            }

            apiPath = apiPathSplit.join("/");

            handlerInstance.setAPIPath(apiPath);
        }
    }

    /**
     * This method to fetch field details of the current module for the current user and store the result in a JSON file.
     * @param {string} moduleAPIName - A String containing the CRM module API name.
     * @param {CommonAPIHandler} handlerInstance - A String containing CommonAPIHandler Instance.
     */
    static async getFields(moduleAPIName, handlerInstance = null) {
        this.moduleAPIName = moduleAPIName;

        await this.getFieldsInfo(this.moduleAPIName, handlerInstance);
    }

    /**
     * This method to fetch field details of the current module for the current user and store the result in a JSON file.
     * @param {string} moduleAPIName - A String containing the CRM module API name.
     * @param {CommonAPIHandler} handlerInstance - A String containing CommonAPIHandler Instance.
     */
    static async getFieldsInfo(moduleAPIName, handlerInstance = null) {
        let lastModifiedTime = null;

        let encodedName = null;

        await fillDataType();

        try {
            if (moduleAPIName != null && await Utility.searchJSONDetails(moduleAPIName) != null) {
                return;
            }

            if(moduleAPIName != null && moduleAPIName != undefined) {
                moduleAPIName = await Utility.verifyModuleAPIName(moduleAPIName);

                await Utility.setHandlerAPIPath(moduleAPIName, handlerInstance);

                if (handlerInstance != null && handlerInstance.getModuleAPIName() == null && !Constants.SKIP_MODULES.includes(moduleAPIName.toLowerCase())) {
                    return;
                }
            }

            if (Initializer.sdkConfig.getCacheStore()) {
                encodedName = new Converter().getEncodedFileName();

                if (await LocalCache.exist()) {
                    await Utility.fileExistsFlow(moduleAPIName, encodedName, lastModifiedTime);
                }
                else if (Initializer.sdkConfig.getAutoRefreshFields() == true) {
                    await fillDataType();

                    this.apiSupportedModule = this.apiSupportedModule.size > 0 ? this.apiSupportedModule : await this.getModules(null);

                    let recordFieldDetailsJson = await LocalCache.exist() ? await LocalCache.get(encodedName) : {};

                    recordFieldDetailsJson[Constants.FIELDS_LAST_MODIFIED_TIME] = new Date().getTime();

                    if (Object.keys(this.apiSupportedModule).length > 0) {
                        for (let module in this.apiSupportedModule) {
                            if (!recordFieldDetailsJson.hasOwnProperty(module)) {
                                let moduleData = this.apiSupportedModule[module];

                                recordFieldDetailsJson[module] = {};

                                await LocalCache.set(encodedName, recordFieldDetailsJson);

                                let fieldsDetails = await Utility.getFieldsDetails(moduleData[Constants.API_NAME]);

                                recordFieldDetailsJson = await LocalCache.get(encodedName);

                                recordFieldDetailsJson[module] = fieldsDetails;

                                await LocalCache.set(encodedName, recordFieldDetailsJson);
                            }
                        }
                    }
                }
                else if (Utility.forceRefresh && !Utility.getModifiedModules) {
                    //New file - and force refresh by Users
                    Utility.getModifiedModules = true;

                    let recordFieldDetailsJson = {};

                    await LocalCache.set(encodedName, recordFieldDetailsJson);

                    await Utility.modifyFields(encodedName, lastModifiedTime);

                    Utility.getModifiedModules = false;
                }
                else {
                    await fillDataType();

                    let recordFieldDetailsJson = {};

                    recordFieldDetailsJson[moduleAPIName.toLowerCase()] = {};

                    await LocalCache.set(encodedName, recordFieldDetailsJson);

                    let fieldsDetails = await Utility.getFieldsDetails(moduleAPIName);

                    recordFieldDetailsJson = await LocalCache.get(encodedName);

                    recordFieldDetailsJson[moduleAPIName.toLowerCase()] = fieldsDetails;

                    await LocalCache.set(encodedName, recordFieldDetailsJson);
                }
            }
            else {
                if (CommonAPIHandler.recordFieldDetails.has(moduleAPIName.toLowerCase())) {
                    return;
                }

                CommonAPIHandler.recordFieldDetails.set(moduleAPIName.toLowerCase(), {});

                let fieldDetails = await Utility.getFieldsDetails(moduleAPIName);

                CommonAPIHandler.recordFieldDetails.set(moduleAPIName.toLowerCase(), fieldDetails);
            }
        }
        catch (error) {
            if (Initializer.sdkConfig.getCacheStore()) {
                if (await LocalCache.exist()) {
                    let recordFieldDetailsJson = await LocalCache.get(encodedName);

                    if (recordFieldDetailsJson.hasOwnProperty(moduleAPIName.toLowerCase())) {
                        delete recordFieldDetailsJson[moduleAPIName.toLowerCase()];
                    }

                    if (Utility.forceRefresh || Utility.getModifiedModules) {
                        Utility.getModifiedModules = false;

                        Utility.forceRefresh = false;

                        if (lastModifiedTime != null) {
                            recordFieldDetailsJson[Constants.FIELDS_LAST_MODIFIED_TIME] = lastModifiedTime;
                        }
                    }

                    await LocalCache.set(encodedName, recordFieldDetailsJson);
                }
            }

            if (!(error instanceof SDKException)) {
                error = new SDKException(null, null, null, error);
            }

            SDKLogger.log(Levels.ERROR, Constants.EXCEPTION + error.toString());

            throw error;
        }
    }

    static async modifyFields(encodedName, modifiedTime) {
        let modifiedModules = await this.getModules(modifiedTime);

        let recordFieldDetailsJson = await LocalCache.get(encodedName);

        recordFieldDetailsJson[Constants.FIELDS_LAST_MODIFIED_TIME] = new Date().getTime();

        await LocalCache.set(encodedName, recordFieldDetailsJson);

        if (Object.keys(modifiedModules).length > 0) {
            for (let module in modifiedModules) {
                if (recordFieldDetailsJson.hasOwnProperty(module)) {
                    await this.deleteFields(recordFieldDetailsJson, module);
                }
            }

            await LocalCache.set(encodedName, recordFieldDetailsJson);

            for (let module in modifiedModules) {
                let moduleMeta = modifiedModules[module];

                await Utility.getFieldsInfo(moduleMeta[Constants.API_NAME]);
            }
        }
    }

    static async deleteFields(recordFieldDetailsJson, module) {
        let subformModules = [];

        let fieldsJSON = recordFieldDetailsJson[module.toLowerCase()];

        for (let keyName of Object.keys(fieldsJSON)) {
            if (fieldsJSON[keyName].hasOwnProperty(Constants.SUBFORM) && fieldsJSON[keyName][Constants.SUBFORM] == true && recordFieldDetailsJson.hasOwnProperty((fieldsJSON[keyName][Constants.MODULE]).toLowerCase())) {
                subformModules.push(fieldsJSON[keyName][Constants.MODULE]);
            }
        }

        delete recordFieldDetailsJson[module.toLowerCase()];

        if (subformModules.length > 0) {
            for (let subformModule of subformModules) {
                await this.deleteFields(recordFieldDetailsJson, subformModule);
            }
        }
    }

    static async getRelatedLists(relatedModuleName, moduleAPIName, commonAPIHandler) {
        try {
            let isnewData = false;

            let key = (moduleAPIName + Constants.UNDERSCORE + Constants.RELATED_LISTS).toLowerCase();

            await fillDataType();

            if (Initializer.sdkConfig.getCacheStore()) {
                var encodedName = new Converter().getEncodedFileName();

                let recordFieldDetailsJSON = null;

                if ( !await LocalCache.exist() || (await LocalCache.exist() && (!(await LocalCache.get(encodedName)).hasOwnProperty(key) || (await LocalCache.get(encodedName))[key] == null || (await LocalCache.get(encodedName))[key].length <= 0 ))) {
                    isnewData = true;

                    moduleAPIName = await Utility.verifyModuleAPIName(moduleAPIName);

                    let relatedListValues = await Utility.getRelatedListDetails(moduleAPIName);

                    recordFieldDetailsJSON = await LocalCache.exist() ? await LocalCache.get(encodedName) : {};

                    recordFieldDetailsJSON[key] = relatedListValues;

                    await LocalCache.set(encodedName, recordFieldDetailsJSON);
                }

                recordFieldDetailsJSON = await LocalCache.get(encodedName);

                let moduleRelatedList = recordFieldDetailsJSON.hasOwnProperty(key) ? recordFieldDetailsJSON[key] : {};

                if (!(await Utility.checkRelatedListExists(relatedModuleName, moduleRelatedList, commonAPIHandler)) && !isnewData) {
                    delete recordFieldDetailsJSON[key];

                    await LocalCache.set(encodedName, recordFieldDetailsJSON);

                    await Utility.getRelatedLists(relatedModuleName, moduleAPIName, commonAPIHandler);
                }
            }
            else {
                if (CommonAPIHandler.recordFieldDetails.size <= 0 || (CommonAPIHandler.recordFieldDetails.size > 0 && (!CommonAPIHandler.recordFieldDetails.has(key) || CommonAPIHandler.recordFieldDetails.get(key) == null || CommonAPIHandler.recordFieldDetails.get(key).length <= 0 ))) {
                    isnewData = true;

                    moduleAPIName = await Utility.verifyModuleAPIName(moduleAPIName);

                    let relatedListValues = await Utility.getRelatedListDetails(moduleAPIName);

                    CommonAPIHandler.recordFieldDetails.set(key, relatedListValues);
                }

                let moduleRelatedList = CommonAPIHandler.recordFieldDetails.has(key) ? CommonAPIHandler.recordFieldDetails.get(key) : {};

                if (! (await Utility.checkRelatedListExists(relatedModuleName, moduleRelatedList, commonAPIHandler)) && !isnewData) {
                    CommonAPIHandler.recordFieldDetails.delete(key);

                    await Utility.getRelatedLists(relatedModuleName, moduleAPIName, commonAPIHandler);
                }
            }
        }
        catch (error) {
            if (!(error instanceof SDKException)) {
                error = new SDKException(null, null, null, error);
            }

            SDKLogger.log(Levels.ERROR, Constants.EXCEPTION + error.toString());

            throw error;
        }
    }

    static async checkRelatedListExists(relatedModuleName, modulerelatedListArray, commonAPIHandler) {
        for (let index = 0; index < modulerelatedListArray.length; index++) {
            let relatedListObject = modulerelatedListArray[index];

            if (relatedListObject[Constants.API_NAME] != null && relatedListObject[Constants.API_NAME].toLowerCase() == relatedModuleName.toLowerCase()) {
                if (relatedListObject[Constants.HREF].toString().toLowerCase() == Constants.NULL_VALUE) {
                    throw new SDKException(Constants.UNSUPPORTED_IN_API, commonAPIHandler.getHttpMethod() + " " + commonAPIHandler.getAPIPath() + Constants.UNSUPPORTED_IN_API_MESSAGE);
                }

                if (relatedListObject[Constants.MODULE].toString().toLowerCase() != Constants.NULL_VALUE) {
                    commonAPIHandler.setModuleAPIName(relatedListObject[Constants.MODULE]);

                    await Utility.getFieldsInfo(relatedListObject[Constants.MODULE], commonAPIHandler);
                }

                return true;
            }
        }

        return false;
    }

    static async getRelatedListDetails(moduleAPIName) {
        var relatedListArray = [];

        var response = await new ZCRM.RelatedList.Operations(moduleAPIName).getRelatedLists();

        if (response != null) {
            if (response.getStatusCode() == Constants.NO_CONTENT_STATUS_CODE) {
                return relatedListArray;
            }

            let responseObject = await response.getObject();

            if (responseObject != null) {
                if (responseObject instanceof ZCRM.RelatedList.Model.ResponseWrapper) {
                    let relatedLists = await responseObject.getRelatedLists();

                    for (let relatedList of relatedLists) {
                        let relatedListDetail = {};

                        relatedListDetail[Constants.API_NAME] = await relatedList.getAPIName();

                        relatedListDetail[Constants.MODULE] = await relatedList.getModule() != null ? relatedList.getModule() : Constants.NULL_VALUE;

                        relatedListDetail[Constants.NAME] = await relatedList.getName();

                        relatedListDetail[Constants.HREF] = await relatedList.getHref() != null ? relatedList.getHref() : Constants.NULL_VALUE;

                        relatedListArray.push(relatedListDetail);
                    }
                }
                else if (responseObject instanceof ZCRM.RelatedList.Model.APIException) {
                    let errorResponse = {};

                    errorResponse.code = await responseObject.getCode().getValue();

                    errorResponse.status = await responseObject.getStatus().getValue();

                    errorResponse.message = await responseObject.getMessage().getValue();

                    throw new SDKException(Constants.API_EXCEPTION, null, errorResponse);
                }
            }
            else {
                let errorResponse = {};

                errorResponse.code = response.getStatusCode();

                throw new SDKException(Constants.API_EXCEPTION, null, errorResponse);
            }
        }

        return relatedListArray;
    }

    /**
     * This method to get module field data from Zoho CRM.
     * @param {string} moduleAPIName A String containing the CRM module API name.
     * @returns {object} A Object representing the Zoho CRM module field details.
     */
    static async getFieldsDetails(moduleAPIName) {
        var fields = {};

        var fieldsDetails = {};

        var fieldOperation = new ZCRM.Field.Operations(moduleAPIName);

        var response = await fieldOperation.getFields(null);

        if (response != null) {
            if (response.getStatusCode() == Constants.NO_CONTENT_STATUS_CODE) {
                return fieldsDetails;
            }

            let responseObject = await response.getObject();

            if (responseObject != null) {
                if (responseObject instanceof ZCRM.Field.Model.ResponseWrapper) {
                    fields = await responseObject.getFields();

                    for(let field of fields) {
                        let keyName = await field.getAPIName();

                        if (Constants.KEYS_TO_SKIP.includes(keyName)) {
                            continue;
                        }

                        let fieldDetail = {};

                        await Utility.setDataType(fieldDetail, field, moduleAPIName);

                        fieldsDetails[field.getAPIName()] = fieldDetail;
                    }

                    if (Constants.INVENTORY_MODULES.includes(moduleAPIName.toLowerCase())) {
                        let fieldDetail = {};

                        fieldDetail.name = Constants.LINE_TAX;

                        fieldDetail.type = Constants.LIST_NAMESPACE;

                        fieldDetail.structure_name = Constants.LINE_TAX_NAMESPACE;

                        fieldsDetails[Constants.LINE_TAX] = fieldDetail;
                    }
                    if (Constants.NOTES.toLowerCase() == moduleAPIName.toLowerCase()) {
                        let fieldDetail = {};

                        fieldDetail.name = Constants.ATTACHMENTS;

                        fieldDetail.type = Constants.LIST_NAMESPACE;

                        fieldDetail.structure_name = Constants.ATTACHMENTS_NAMESPACE;

                        fieldsDetails[Constants.ATTACHMENTS] = fieldDetail;
                    }
                }
                else if (responseObject instanceof ZCRM.Field.Model.APIException) {
                    let errorResponse = {};

                    errorResponse.code = await responseObject.getCode().getValue();

                    errorResponse.status = await responseObject.getStatus().getValue();

                    errorResponse.message = await responseObject.getMessage().getValue();

                    let exception = new SDKException(Constants.API_EXCEPTION, null, errorResponse);

                    if (this.moduleAPIname != null && this.moduleAPIName.toLowerCase() == moduleAPIName.toLowerCase()) {
                        throw exception;
                    }

                    SDKLogger.log(Levels.ERROR, exception.toString());
                }
            }
            else {
                let errorResponse = {};

                errorResponse.code = response.getStatusCode();

                throw new SDKException(Constants.API_EXCEPTION, null, errorResponse);
            }
        }

        return fieldsDetails;
    }

    static async searchJSONDetails(key) {
        key = Constants.PACKAGE_NAMESPACE + key;

        for (let keyInJSON in classDetailMap) {
            if (keyInJSON.toLowerCase() === key.toLowerCase()) {
                let returnJSON = {};

                returnJSON[Constants.MODULEPACKAGENAME] = keyInJSON;

                returnJSON[Constants.MODULEDETAILS] = classDetailMap[keyInJSON];

                return returnJSON;
            }
        }

        return null;
    }

    static async verifyPhotoSupport(moduleAPIName) {
        try {
            moduleAPIName = await Utility.verifyModuleAPIName(moduleAPIName);

            if (Constants.PHOTO_SUPPORTED_MODULES.includes(moduleAPIName.toLowerCase())) {
                return true;
            }

            let modules = await Utility.getModuleNames();

            if (modules.hasOwnProperty(moduleAPIName.toLowerCase()) && modules[moduleAPIName.toLowerCase()] != null) {
                let moduleMetaData = modules[moduleAPIName.toLowerCase()];

                if (moduleMetaData.hasOwnProperty(Constants.GENERATED_TYPE) && moduleMetaData[Constants.GENERATED_TYPE] != Constants.GENERATED_TYPE_CUSTOM) {
                    throw new SDKException(Constants.UPLOAD_PHOTO_UNSUPPORTED_ERROR, Constants.UPLOAD_PHOTO_UNSUPPORTED_MESSAGE + moduleAPIName);
                }
            }
        }
        catch (error) {
            if (!(error instanceof SDKException)) {
                error = new SDKException(null, null, null, error);
            }

            Logger.error(Constants.EXCEPTION, error);

            throw error;
        }

        return true;
    }

    static async getModuleNames() {
        let moduleData = {};

        if (Initializer.sdkConfig.getCacheStore()) {
            let encodedName = new Converter().getEncodedFileName();

            if (!await LocalCache.exist()) {
                moduleData = await Utility.getModules(null);

                await Utility.writeModuleMetaData(encodedName, moduleData);

                return moduleData;
            }
            else if (await LocalCache.exist()) {
                let recordFieldDetailsJson = await LocalCache.get(encodedName);

                if (!recordFieldDetailsJson.hasOwnProperty(Constants.SDK_MODULE_METADATA) || (recordFieldDetailsJson.hasOwnProperty(Constants.SDK_MODULE_METADATA) && (recordFieldDetailsJson[Constants.SDK_MODULE_METADATA] == null || Object.keys(recordFieldDetailsJson[Constants.SDK_MODULE_METADATA]).length <= 0))) {
                    moduleData = await Utility.getModules(null);

                    await Utility.writeModuleMetaData(encodedName, moduleData);

                    return moduleData;
                }
            }

            let recordFieldDetailsJson = await LocalCache.get(encodedName);

            return recordFieldDetailsJson[Constants.SDK_MODULE_METADATA];
        }
        else {
            if (CommonAPIHandler.recordFieldDetails.size <= 0) {
                return moduleData;
            }

            if (!CommonAPIHandler.recordFieldDetails.has(Constants.SDK_MODULE_METADATA) || (CommonAPIHandler.recordFieldDetails.has(Constants.SDK_MODULE_METADATA) && (CommonAPIHandler.recordFieldDetails.get(Constants.SDK_MODULE_METADATA) == null || Object.keys(CommonAPIHandler.recordFieldDetails.get(Constants.SDK_MODULE_METADATA)).length <= 0))) {
                moduleData = await Utility.getModules(null);

                CommonAPIHandler.recordFieldDetails.set(Constants.SDK_MODULE_METADATA, moduleData);

                return moduleData;
            }

            return CommonAPIHandler.recordFieldDetails.get(Constants.SDK_MODULE_METADATA);
        }
    }

    static async writeModuleMetaData(encodedName, moduleData) {
        let fieldDetailsJSON = await LocalCache.exist() ? await LocalCache.get(encodedName) : {};

        fieldDetailsJSON[Constants.SDK_MODULE_METADATA] = moduleData;

        await LocalCache.set(encodedName, fieldDetailsJSON);
    }

    static async getModules(header) {
        let apiNames = {};

        let headerMap = new HeaderMap();

        if (header !== null) {
            await headerMap.add(ZCRM.Module.Model.GetModulesHeader.IF_MODIFIED_SINCE, new Date(header))
        }

        let response = await new ZCRM.Module.Operations().getModules(headerMap);

        if (response !== null) {
            if ([Constants.NO_CONTENT_STATUS_CODE, Constants.NOT_MODIFIED_STATUS_CODE].includes(response.getStatusCode())) {
                return apiNames;
            }

            let responseObject = await response.getObject();

            if (responseObject !== null) {
                if (responseObject instanceof ZCRM.Module.Model.ResponseWrapper) {
                    let modules = responseObject.getModules();

                    modules.forEach(async module => {
                        if (module.getAPISupported() == true) {
                            let moduleDetails = {};

                            moduleDetails[Constants.API_NAME] = await module.getAPIName();

                            moduleDetails[Constants.GENERATED_TYPE] = await module.getGeneratedType().getValue();

                            apiNames[await module.getAPIName().toLowerCase()] = moduleDetails;
                        }
                    });
                }
                else if (responseObject instanceof ZCRM.Module.Model.APIException) {
                    let errorResponse = {};

                    errorResponse.code = responseObject.getCode().getValue();

                    errorResponse.status = responseObject.getStatus().getValue();

                    errorResponse.message = responseObject.getMessage().getValue();

                    throw new SDKException(Constants.API_EXCEPTION, null, errorResponse);
                }
            }
            else {
                let errorResponse = {};

                errorResponse.code = response.getStatusCode();

                throw new SDKException(Constants.API_EXCEPTION, null, errorResponse, null);
            }
        }

        if (header == null) {
            try {
                if (Initializer.sdkConfig.getCacheStore()) {
                    let encodedName = new Converter().getEncodedFileName();

                    await Utility.writeModuleMetaData(encodedName, apiNames);
                }
                else {
                    CommonAPIHandler.recordFieldDetails.set(Constants.SDK_MODULE_METADATA, apiNames);
                }
            }
            catch (error) {
                if (!(error instanceof SDKException)) {
                    error = new SDKException(null, null, null, error);
                }

                Logger.error(Constants.EXCEPTION, error);

                throw error;
            }
        }

        return apiNames;
    }

    static async refreshModules() {
        Utility.forceRefresh = true;

        await Utility.getFieldsInfo(null);

        Utility.forceRefresh = false;
    }

    static async getJSONObject(json, key) {
        if (json.has(key)) {
            return json.get(key);
        }

        return null;
    }

    static async setDataType(fieldDetail, field, moduleAPIName) {
        var apiType = field.getDataType();

        var keyName = field.getAPIName();

        var module = "";

        if (field.getSystemMandatory() !== null && field.getSystemMandatory() === true && !(moduleAPIName.toLowerCase() === Constants.CALLS && keyName.toLowerCase() === Constants.CALL_DURATION)) {
            fieldDetail.required = true;
        }

        if (keyName.toLowerCase() === Constants.PRODUCT_DETAILS.toLowerCase() && Constants.INVENTORY_MODULES.includes(moduleAPIName.toLowerCase())) {
            fieldDetail.name = keyName;

            fieldDetail.type = Constants.LIST_NAMESPACE;

            fieldDetail.structure_name = Constants.INVENTORY_LINE_ITEMS;

            fieldDetail[Constants.SKIP_MANDATORY] = true;

            return;
        }
        else if (keyName.toLowerCase() === Constants.PRICING_DETAILS.toLowerCase() && moduleAPIName.toLowerCase() == Constants.PRICE_BOOKS.toLowerCase()) {
            fieldDetail.name = keyName;

            fieldDetail.type = Constants.LIST_NAMESPACE;

            fieldDetail.structure_name = Constants.PRICINGDETAILS;

            fieldDetail[Constants.SKIP_MANDATORY] = true;

            return;
        }
        else if (keyName.toLowerCase() === Constants.PARTICIPANT_API_NAME.toLowerCase() && (moduleAPIName.toLowerCase() === Constants.EVENTS.toLowerCase() || moduleAPIName.toLowerCase() === Constants.ACTIVITIES.toLowerCase())) {
            fieldDetail.name = keyName;

            fieldDetail.type = Constants.LIST_NAMESPACE;

            fieldDetail.structure_name = Constants.PARTICIPANTS;

            fieldDetail[Constants.SKIP_MANDATORY] = true;

            return;
        }
        else if (keyName.toLowerCase() === Constants.COMMENTS.toLowerCase() && (moduleAPIName.toLowerCase() === Constants.SOLUTIONS.toLowerCase() || moduleAPIName.toLowerCase() === Constants.CASES.toLowerCase())) {
            fieldDetail.name = keyName;

            fieldDetail.type = Constants.LIST_NAMESPACE;

            fieldDetail.structure_name = Constants.COMMENT_NAMESPACE;

            fieldDetail[Constants.LOOKUP] = true;

            return;
        }
        else if (keyName.toLowerCase() === Constants.LAYOUT.toLowerCase()) {
            fieldDetail.name = keyName;

            fieldDetail.type = Constants.LAYOUT_NAMESPACE;

            fieldDetail.structure_name = Constants.LAYOUT_NAMESPACE;

            fieldDetail[Constants.LOOKUP] = true;

            return;
        }
        else if (Utility.apiTypeVsdataType.has(apiType)) {
            fieldDetail.type = Utility.apiTypeVsdataType.get(apiType);
        }
        else if (apiType.toLowerCase() === Constants.FORMULA.toLowerCase()) {
            if (field.getFormula() !== null) {
                let returnType = field.getFormula().getReturnType();

                if (Utility.apiTypeVsdataType.has(returnType) && Utility.apiTypeVsdataType.get(returnType) !== null) {
                    fieldDetail.type = Utility.apiTypeVsdataType.get(returnType);
                }
            }

            fieldDetail[Constants.READ_ONLY] = true;
        }
        else {
            return;
        }

        if (apiType.toLowerCase().includes(Constants.LOOKUP)) {
            fieldDetail[Constants.LOOKUP] = true;
        }

        if (apiType.toLowerCase() === Constants.CONSENT_LOOKUP) {
            fieldDetail[Constants.SKIP_MANDATORY] = true;
        }

        if (Utility.apiTypeVsStructureName.has(apiType)) {
            fieldDetail.structure_name = Utility.apiTypeVsStructureName.get(apiType);
        }

        if (apiType.toLowerCase() === Constants.PICKLIST && field.getPickListValues() !== null && field.getPickListValues().length > 0) {
            let values = [];

            fieldDetail[Constants.PICKLIST] = true;

            field.getPickListValues().every(x => values.push(x.getDisplayValue()));

            fieldDetail.values = values;
        }

        if (apiType.toLowerCase() === Constants.SUBFORM.toLowerCase()) {
            if (field.getSubform() !== null) {
                module = field.getSubform().getModule();

                fieldDetail[Constants.MODULE] = module;

                fieldDetail[Constants.SKIP_MANDATORY] = true;

                fieldDetail[Constants.SUBFORM] = true;
            }
        }

        if (apiType === Constants.LOOKUP) {
            if (field.getLookup() !== null) {
                module = field.getLookup().getModule();

                if (module !== null && module !== Constants.SE_MODULE) {

                    fieldDetail.module = module;

                    if (module.toLowerCase() === Constants.ACCOUNTS.toLowerCase() && !field.getCustomField()) {
                        fieldDetail[Constants.SKIP_MANDATORY] = true;
                    }
                }
                else {
                    module = "";
                }
            }

            fieldDetail.lookup = true;
        }

        if (module.length > 0) {
            await Utility.getFieldsInfo(module);
        }

        fieldDetail.name = keyName;
    }

    static checkInteger(value) {
        return (parseInt(value) === value) ? true : false;
    }
}

Utility.apiTypeVsdataType = new Map();

Utility.apiTypeVsStructureName = new Map();

Utility.getModifiedModules = false;

Utility.forceRefresh = false;

Utility.apiSupportedModule = new Map();

Utility.moduleAPIName = null;

async function fillDataType() {
    if (Utility.apiTypeVsdataType.size > 0 && Utility.apiTypeVsStructureName.size > 0) {
        return;
    }

    let fieldAPINamesString = ["textarea", "text", "website", "email", "phone", "mediumtext", "multiselectlookup", "profileimage", "autonumber"];

    let fieldAPINamesInteger = ["integer"];

    let fieldAPINamesBoolean = ["boolean"];

    let fieldAPINamesLong = ["long", "bigint"];

    let fieldAPINamesDouble = ["double", "percent", "lookup", "currency"];

    let fieldAPINamesFile = ["imageupload"];

    let fieldAPINamesFieldFile = ["fileupload"];

    let fieldAPINamesDateTime = ["datetime", "event_reminder"];

    let fieldAPINamesDate = ["date"];

    let fieldAPINamesLookup = ["lookup"];

    let fieldAPINamesPickList = ["picklist"];

    let fieldAPINamesMultiSelectPickList = ["multiselectpicklist"];

    let fieldAPINamesSubForm = ["subform"];

    let fieldAPINamesOwnerLookUp = ["ownerlookup", "userlookup"];

    let fieldAPINamesMultiUserLookUp = ["multiuserlookup"];

    let fieldAPINamesMultiModuleLookUp = ["multimodulelookup"];

    let fieldAPINameTaskRemindAt = ["ALARM"];

    let fieldAPINameRecurringActivity = ["RRULE"];

    let fieldAPINameReminder = ["multireminder"];

    let fieldAPINameConsentLookUp = ["consent_lookup"];

    for (let fieldAPIName of fieldAPINamesString) {
        Utility.apiTypeVsdataType.set(fieldAPIName, Constants.STRING_NAMESPACE);
    }

    for (let fieldAPIName of fieldAPINamesInteger) {
        Utility.apiTypeVsdataType.set(fieldAPIName, Constants.INTEGER_NAMESPACE);
    }

    for (let fieldAPIName of fieldAPINamesBoolean) {
        Utility.apiTypeVsdataType.set(fieldAPIName, Constants.BOOLEAN_NAMESPACE);
    }

    for (let fieldAPIName of fieldAPINamesLong) {
        Utility.apiTypeVsdataType.set(fieldAPIName, Constants.LONG_NAMESPACE);
    }

    for (let fieldAPIName of fieldAPINamesDouble) {
        Utility.apiTypeVsdataType.set(fieldAPIName, Constants.DOUBLE_NAMESPACE);
    }

    for (let fieldAPIName of fieldAPINamesFile) {
        Utility.apiTypeVsdataType.set(fieldAPIName, Constants.FILE_NAMESPACE);
    }

    for (let fieldAPIName of fieldAPINamesDateTime) {
        Utility.apiTypeVsdataType.set(fieldAPIName, Constants.DATETIME_NAMESPACE);
    }

    for (let fieldAPIName of fieldAPINamesDate) {
        Utility.apiTypeVsdataType.set(fieldAPIName, Constants.DATE_NAMESPACE);
    }

    for (let fieldAPIName of fieldAPINamesLookup) {
        Utility.apiTypeVsdataType.set(fieldAPIName, Constants.RECORD_NAMESPACE);

        Utility.apiTypeVsStructureName.set(fieldAPIName, Constants.RECORD_NAMESPACE);
    }

    for (let fieldAPIName of fieldAPINamesPickList) {
        Utility.apiTypeVsdataType.set(fieldAPIName, Constants.CHOICE_NAMESPACE);
    }

    for (let fieldAPIName of fieldAPINamesMultiSelectPickList) {
        Utility.apiTypeVsdataType.set(fieldAPIName, Constants.LIST_NAMESPACE);

        Utility.apiTypeVsStructureName.set(fieldAPIName, Constants.CHOICE_NAMESPACE);
    }

    for (let fieldAPIName of fieldAPINamesSubForm) {
        Utility.apiTypeVsdataType.set(fieldAPIName, Constants.LIST_NAMESPACE);

        Utility.apiTypeVsStructureName.set(fieldAPIName, Constants.RECORD_NAMESPACE);
    }

    for (let fieldAPIName of fieldAPINamesOwnerLookUp) {
        Utility.apiTypeVsdataType.set(fieldAPIName, Constants.USER_NAMESPACE);

        Utility.apiTypeVsStructureName.set(fieldAPIName, Constants.USER_NAMESPACE);
    }

    for (let fieldAPIName of fieldAPINamesMultiUserLookUp) {
        Utility.apiTypeVsdataType.set(fieldAPIName, Constants.LIST_NAMESPACE);

        Utility.apiTypeVsStructureName.set(fieldAPIName, Constants.USER_NAMESPACE);
    }

    for (let fieldAPIName of fieldAPINamesMultiModuleLookUp) {
        Utility.apiTypeVsdataType.set(fieldAPIName, Constants.LIST_NAMESPACE);

        Utility.apiTypeVsStructureName.set(fieldAPIName, Constants.MODULE_NAMESPACE);
    }

    for (let fieldAPIName of fieldAPINamesFieldFile) {
        Utility.apiTypeVsdataType.set(fieldAPIName, Constants.LIST_NAMESPACE);

        Utility.apiTypeVsStructureName.set(fieldAPIName, Constants.FIELD_FILE_NAMESPACE);
    }

    for (let fieldAPIName of fieldAPINameTaskRemindAt) {
        Utility.apiTypeVsdataType.set(fieldAPIName, Constants.REMINDAT_NAMESPACE);

        Utility.apiTypeVsStructureName.set(fieldAPIName, Constants.REMINDAT_NAMESPACE);
    }

    for (let fieldAPIName of fieldAPINameRecurringActivity) {
        Utility.apiTypeVsdataType.set(fieldAPIName, Constants.RECURRING_ACTIVITY_NAMESPACE);

        Utility.apiTypeVsStructureName.set(fieldAPIName, Constants.RECURRING_ACTIVITY_NAMESPACE);
    }

    for (let fieldAPIName of fieldAPINameReminder) {

        Utility.apiTypeVsdataType.set(fieldAPIName, Constants.LIST_NAMESPACE);

        Utility.apiTypeVsStructureName.set(fieldAPIName, Constants.REMINDER_NAMESPACE);
    }

    for (let fieldAPIName of fieldAPINameConsentLookUp) {

        Utility.apiTypeVsdataType.set(fieldAPIName, Constants.CONSENT_NAMESPACE);

        Utility.apiTypeVsStructureName.set(fieldAPIName, Constants.CONSENT_NAMESPACE);
    }
}

/**
 * The class contains methods to manipulate the module fields only when autoRefreshFields is set to false in Initializer.
 */
class ModuleFieldsHandler {
    /**
     * The method to delete fields JSON File of the current user.
     * @throws {SDKException}
     */
    static async deleteFieldsFile() {
        try {
            let encodedFileName = await new Converter().getEncodedFileName();

            await LocalCache.removeKey(encodedFileName);

        } catch (error) {
            let exception = new SDKException(null, null, null, error);

            SDKLogger.log(Levels.ERROR, Constants.DELETE_FIELD_FILE_ERROR, exception);

            throw exception;
        }
    }

    /**
     * The method to delete fields of the given module from the current user's fields JSON.
     * @param {String} module A string representing the module.
     * @throws {SDKException}
     */
    static async deleteFields(module) {
        try {
            let encodedFileName = await new Converter().getEncodedFileName();

            let recordFieldDetailsJson = await LocalCache.get(encodedFileName);

            if (recordFieldDetailsJson.hasOwnProperty(module.toLowerCase())) {
                await Utility.deleteFields(recordFieldDetailsJson, module);

                await LocalCache.set(encodedFileName, recordFieldDetailsJson);
            }
        }
        catch (error) {
            let exception = new SDKException(null, null, null, error);

            throw exception;
        }
    }

    /**
     * The method to force-refresh fields of a module.
     * @param {String} module A string representing the module.
     * @throws {SDKException}
     */
    static async refreshFields(module) {
        try {
            await ModuleFieldsHandler.deleteFields(module);

            await Utility.getFieldsInfo(module);
        }
        catch (error) {
            if (!(error instanceof SDKException)) {
                error = new SDKException(null, null, null, error);
            }

            SDKLogger.log(Levels.ERROR, Constants.REFRESH_SINGLE_MODULE_FIELDS_ERROR + module, error);

            throw error;
        }
    }

    /**
     * The method to force-refresh fields of all the available modules.
     * @throws {SDKException}
     */
    static async refreshAllModules() {
        try {
            await Utility.refreshModules();
        }
        catch (error) {
            if (!(error instanceof SDKException)) {
                error = new SDKException(null, null, null, error);
            }

            SDKLogger.log(Levels.ERROR, Constants.REFRESH_ALL_MODULE_FIELDS_ERROR, error);

            throw error;
        }
    }
}

/**
 * This class is to validate API headers and parameters.
 */
class HeaderParamValidator {
    async validate(headerparam, value) {
        let name = headerparam.getName();

        let className = headerparam.getClassName();

        let typeDetail = null;

        if (classDetailMap.hasOwnProperty(className)) {
            typeDetail = await this.getKeyJSONDetails(name, classDetailMap[className]);
        }

        if (typeDetail != null) {
            if (!await this.checkDataType(typeDetail, value)) {
                let type = className != null && className.endsWith("param") ? "PARAMETER" : "HEADER";

                let detailsJO = {};

                detailsJO[type] = name;

                detailsJO[Constants.CLASS_KEY] = className;

                detailsJO[Constants.ACCEPTED_TYPE] = Constants.SPECIAL_TYPES.hasOwnProperty(typeDetail[Constants.TYPE]) ? Constants.SPECIAL_TYPES.get(typeDetail[Constants.TYPE]) : typeDetail[Constants.TYPE];

                throw new SDKException(Constants.TYPE_ERROR, null, detailsJO);
            }
            else {
                value = await DataTypeConverter.postConvert(value, typeDetail[Constants.TYPE]);
            }
        }

        return value;
    }

    async getKeyJSONDetails(name, jsonDetails) {
        let keyArray = Array.from(Object.keys(jsonDetails));

        for (let index = 0; index < keyArray.length; index++) {
            const key = keyArray[index];

            let detail = await jsonDetails[key];

            if (detail.hasOwnProperty(Constants.NAME) && name.toLowerCase() === detail[Constants.NAME].toLowerCase()) {
                return detail;
            }
        }

        return {};
    }

    checkDataType(keyDetail, value) {
        let type = keyDetail[Constants.TYPE];

        let dataType = Constants.SPECIAL_TYPES.has(type) ? Constants.SPECIAL_TYPES.get(type) : type;

        if (dataType !== null && Constants.TYPE_VS_DATATYPE.has(dataType.toLowerCase())) {
            if (type === Constants.INTEGER_NAMESPACE) {
                return Utility.checkInteger(value);
            }

            if (Object.prototype.toString.call(value) !== Constants.TYPE_VS_DATATYPE.get(type.toLowerCase())) {
                return false;
            }
        }

        return true;
    }
}

/**
 * This abstract class is to construct API request and response.
 */
var Converter = class {
	/**
	 * Creates a Converter class instance with the CommonAPIHandler class instance.
	 * @param {CommonAPIHandler} commonAPIHandler - A CommonAPIHandler class instance.
	 */
	constructor(commonAPIHandler) {
		this.commonAPIHandler = commonAPIHandler;
	}

	/**
	 * This abstract method is to process the API response.
	 * @param {object} response - An Object containing the API response contents or response.
	 * @param {string} pack - A String containing the expected method return type.
	 * @returns An Object representing the class instance.
	 * @throws {Error}
	 */
	getResponse(response, pack) { }

	/**
	 * This method is to construct the API request.
	 * @param {object} requestObject - An Object containing the class instance.
	 * @param {string} pack - A String containing the expected method return type.
	 * @param {int} instanceNumber - An Integer containing the class instance list number.
	 * @param {object} memberDetail - An object containing the member properties
	 * @returns An Object representing the API request body object.
	 * @throws {Error}
	 */
	formRequest(requestObject, pack, instanceNumber, memberDetail) { }

	/**
	 * This abstract method is to construct the API request body.
	 * @param {object} requestBase
	 * @param {object} requestObject - A Object containing the API request body object.
	 * @throws {Error}
	 */
	appendToRequest(requestBase) { }

	/**
	 * This abstract method is to process the API response.
	 * @param {object} response - An Object containing the HttpResponse class instance.
	 * @param {string} pack - A String containing the expected method return type.
	 * @returns An Object representing the class instance.
	 * @throws {Error}
	 */
	getWrappedResponse(response, pack) { }

	/**
	 * This method is to validate if the input values satisfy the constraints for the respective fields.
	 * @param {string} className - A String containing the class name.
	 * @param {string} memberName - A String containing the member name.
	 * @param {object} keyDetails - A JSONObject containing the key JSON details.
	 * @param {object} value - A Object containing the key value.
	 * @param {Map} uniqueValuesMap - A Map containing the value of constructed object's unique fields.
	 * @param {int} instanceNumber - An Integer containing the class instance list number.
	 * @returns A Boolean representing the key value is expected pattern, unique, length, and values.
	 * @throws {SDKException}
	 */
	valueChecker(className, memberName, keyDetails, value, uniqueValuesMap, instanceNumber) {
		var detailsJO = {};

		var name = keyDetails[Constants.NAME];

		var type = keyDetails[Constants.TYPE];

		var valueType = Object.prototype.toString.call(value);

		let check = true;

		let givenType = null;

		if (Constants.TYPE_VS_DATATYPE.has(type.toLowerCase())) {
			if (Array.isArray(value) && value.length > 0 && keyDetails.hasOwnProperty(Constants.STRUCTURE_NAME)) {
				let expectedStructure = keyDetails[Constants.STRUCTURE_NAME];

				let index = 0;

				for (let data of value) {
					className = Object.prototype.toString.call(data);

					if (className == Constants.OBJECT_TYPE) {
						className = data.constructor.name;

						check = expectedStructure.includes(className);
					}
					else {
						check = className === expectedStructure ? true : false;
					}

					if (!check) {
						instanceNumber = index;

						type = Constants.ARRAY_NAME + "(" + expectedStructure + ")";

						givenType = Constants.ARRAY_NAME + "(" + className + ")";

						break;
					}

					index = index + 1;
				}
			}
			else if (value != null) {
				check = (valueType != Constants.TYPE_VS_DATATYPE.get(type.toLowerCase()) ? false : true);

				if (check && type == Constants.INTEGER_NAMESPACE) {
					check = Utility.checkInteger(value);
				}

				givenType = Object.getPrototypeOf(value).constructor.name;
			}
		}
		else if (value != null && type.toLowerCase() !== Constants.OBJECT_KEY) {
			let expectedStructure = keyDetails[Constants.TYPE];

			className = Object.prototype.toString.call(value);

			if (className == Constants.OBJECT_TYPE) {
				className = value.constructor.name;

				check = expectedStructure.includes(className);
			}
			else {
				check = className === expectedStructure ? true : false;
			}

			if (!check) {
				type = expectedStructure;

				givenType = value.constructor.name;
			}
		}

		if (!check && value !== null) {
			detailsJO.field = memberName;

			detailsJO.class = className;

			detailsJO.expected_type = Constants.SPECIAL_TYPES.has(type) ? Constants.SPECIAL_TYPES.get(type) : type;

			detailsJO.given_type = givenType;

			if (instanceNumber != null) {
				detailsJO.index = instanceNumber;
			}

			throw new SDKException(Constants.TYPE_ERROR, null, detailsJO);
		}

		if (keyDetails.hasOwnProperty(Constants.VALUES) && (!keyDetails.hasOwnProperty(Constants.PICKLIST) || (keyDetails[Constants.PICKLIST] && Initializer.sdkConfig.getPickListValidation() == true))) {
			let valuesJA = keyDetails[Constants.VALUES];

			if (value instanceof Choice) {
				value = value.getValue();
			}

			if (!valuesJA.includes(value)) {
				detailsJO.field = memberName;

				detailsJO.class = className;

				if (instanceNumber != null) {
					detailsJO.index = instanceNumber;
				}

				detailsJO.given_value = value;

				detailsJO.accepted_values = valuesJA;

				throw new SDKException(Constants.UNACCEPTED_VALUES_ERROR, null, detailsJO);
			}
		}

		if (keyDetails.hasOwnProperty(Constants.UNIQUE)) {
			let valuesArray = uniqueValuesMap[name];

			if (valuesArray != null && valuesArray.includes(value)) {
				detailsJO.field = memberName;

				detailsJO.class = className;

				detailsJO.first_index = valuesArray.indexOf(value);

				detailsJO.next_index = instanceNumber;

				throw new SDKException(Constants.UNIQUE_KEY_ERROR, null, detailsJO);
			}
			else {
				if (valuesArray == null) {
					valuesArray = [];
				}

				valuesArray.push(value);

				uniqueValuesMap[name] = valuesArray;
			}
		}

		if (keyDetails.hasOwnProperty(Constants.MIN_LENGTH) || keyDetails.hasOwnProperty(Constants.MAX_LENGTH)) {
			let count = value.toString().length;

			if (Array.isArray(value)) {
				count = value.length;
			}

			if (keyDetails.hasOwnProperty(Constants.MAX_LENGTH) && count > keyDetails[Constants.MAX_LENGTH]) {
				detailsJO.field = memberName;

				detailsJO.class = className;

				detailsJO.given_length = count;

				detailsJO.maximum_length = keyDetails[Constants.MAX_LENGTH];

				throw new SDKException(Constants.MAXIMUM_LENGTH_ERROR, null, detailsJO);
			}

			if (keyDetails.hasOwnProperty(Constants.MIN_LENGTH) && count < keyDetails[Constants.MIN_LENGTH]) {

				detailsJO.field = memberName;

				detailsJO.class = className;

				detailsJO.given_length = count;

				detailsJO.minimum_length = keyDetails[Constants.MIN_LENGTH];

				throw new SDKException(Constants.MINIMUM_LENGTH_ERROR, null, detailsJO);
			}
		}

		if (keyDetails.hasOwnProperty(Constants.REGEX) && !keyDetails[Constants.REGEX].match(value)) {
			detailsJO.field = memberName;

			detailsJO.class = className;

			if (instanceNumber != null) {
				detailsJO.index = instanceNumber;
			}

			throw new SDKException(Constants.REGEX_MISMATCH_ERROR, null, detailsJO);
		}

		return true;
	}

	getEncodedFileName() {
		let clientId = "";

		let url = Initializer.environment.getUrl();

		if (Initializer.token !== null && Initializer.token.getClientId().length > 0) {
			clientId = Initializer.token.getClientId();
		}

		if (document.getElementById(Constants.ZES_CLIENT_SCOPE) !== null) {
			clientId = document.getElementById(Constants.ZES_CLIENT_SCOPE).getAttribute(Constants.DATA_CLIENT_ID);
		}

		return btoa(clientId + url);
	}
}

/**
 * This class processes the API response object to the POJO object and POJO object to a JSON object.
 */
class JSONConverter extends Converter {
	constructor(commonAPIHandler) {
		super(commonAPIHandler);

		this.uniqueValuesMap = {};
	}

	appendToRequest(request) {
		super.appendToRequest(request);

		return JSON.stringify(request.getRequestBody()) || null;

	}

	async formRequest(requestInstance, pack, instanceNumber, classMemberDetail) { // if structure
		super.formRequest(requestInstance, pack, instanceNumber, classMemberDetail);

		var classDetail = classDetailMap[pack];

		if (classDetail.hasOwnProperty(Constants.INTERFACE) && classDetail[Constants.INTERFACE]) { // useless
			var classes = classDetail[Constants.CLASSES];

			var baseName = pack.split('/').slice(0, -1);

			let className = await this.getFileName(requestInstance.constructor.name);

			baseName.push(className);

			let requestObjectClassName = baseName.join('/');

			for (let className1 of classes) {
				if (className1.toLowerCase() == requestObjectClassName.toLowerCase()) {
					classDetail = classDetailMap[requestObjectClassName];

					break;
				}
			}
		}

		if (requestInstance instanceof ZCRM.Record.Model.Record) {
			let moduleAPIName = this.commonAPIHandler.getModuleAPIName();

			let returnJSON = await this.isRecordRequest(requestInstance, classDetail, instanceNumber, classMemberDetail);

			this.commonAPIHandler.setModuleAPIName(moduleAPIName);

			return returnJSON;
		}
		else {
			return await this.isNotRecordRequest(requestInstance, classDetail, instanceNumber, classMemberDetail);
		}
	}

	async isNotRecordRequest(requestInstance, classDetail, instanceNumber, classMemberDetail) {
		let requestJSON = {};

		let requiredKeys = new Map();

		let primaryKeys = new Map();

		let requiredInUpdateKeys = new Map();

		let lookUp = false;

		let skipMandatory = false;

		let classMemberName = null;

		if (classMemberDetail != null) {
			lookUp = (classMemberDetail.hasOwnProperty(Constants.LOOKUP) ? classMemberDetail[Constants.LOOKUP] : false);

			skipMandatory = (classMemberDetail.hasOwnProperty(Constants.SKIP_MANDATORY) ? classMemberDetail[Constants.SKIP_MANDATORY] : false);

			classMemberName = this.buildName(classMemberDetail[Constants.NAME]);
		}

		for (let memberName in classDetail) {
			var modification = null;

			var memberDetail = classDetail[memberName];

			if ((memberDetail.hasOwnProperty(Constants.READ_ONLY) && memberDetail[Constants.READ_ONLY] === 'true') || !memberDetail.hasOwnProperty(Constants.NAME)) { // read only or no keyName
				continue;
			}

			var keyName = memberDetail[Constants.NAME];

			try {
				modification = requestInstance.isKeyModified(keyName);
			}
			catch (ex) {
				throw new SDKException(Constants.EXCEPTION_IS_KEY_MODIFIED, null, null, ex);
			}

			if (memberDetail.hasOwnProperty(Constants.REQUIRED) && memberDetail[Constants.REQUIRED] == true) {
				requiredKeys.set(keyName, true);
			}

			if (memberDetail.hasOwnProperty(Constants.PRIMARY) && memberDetail[Constants.PRIMARY] == true && (!memberDetail.hasOwnProperty(Constants.REQUIRED_IN_UPDATE) || memberDetail[Constants.REQUIRED_IN_UPDATE] == true)) {
				primaryKeys.set(keyName, true);
			}

			if (memberDetail.hasOwnProperty(Constants.REQUIRED_IN_UPDATE) && memberDetail[Constants.REQUIRED_IN_UPDATE] == true) {
				requiredInUpdateKeys.set(keyName, true);
			}

			var fieldValue = null;

			if (modification != null && parseInt(modification) != 0) {
				fieldValue = Reflect.get(requestInstance, memberName);

				if (await this.valueChecker(requestInstance.constructor.name, memberName, memberDetail, fieldValue, this.uniqueValuesMap, instanceNumber)) {
					if (fieldValue != null) {
						requiredKeys.delete(keyName);

						primaryKeys.delete(keyName);

						requiredInUpdateKeys.delete(keyName);
					}

					if (requestInstance instanceof ZCRM.Record.Model.FileDetails) {
						if (fieldValue == null || fieldValue == "null") {
							requestJSON[keyName.toLowerCase()] = null;
						}
						else {
							requestJSON[keyName.toLowerCase()] = fieldValue;
						}
					}
					else {
						if(keyName.toLowerCase() == Constants.BODY && this.commonAPIHandler.getAPIPath().includes(Constants.FUNCTIONS_PATH) && this.commonAPIHandler.getAPIPath().includes(Constants.FUNCTIONS)) {
							return await this.setData(memberDetail, fieldValue);;
						}
						else{
							requestJSON[keyName] = await this.setData(memberDetail, fieldValue);
						}
					}
				}
			}
		}

		if (skipMandatory || await this.checkException(classMemberName, requestInstance, instanceNumber, lookUp, requiredKeys, primaryKeys, requiredInUpdateKeys)) {
			return requestJSON;
		}
	}

	async checkException(memberName, requestInstance, instanceNumber, lookUp, requiredKeys, primaryKeys, requiredInUpdateKeys) {
		if (requiredInUpdateKeys.size > 0 && this.commonAPIHandler.getCategoryMethod() != null && this.commonAPIHandler.getCategoryMethod().toLowerCase() == Constants.REQUEST_CATEGORY_UPDATE.toLowerCase()) {
			let error = {};

			error.field = memberName;

			error.type = requestInstance.constructor.name;

			error.keys = Array.from(requiredInUpdateKeys.keys()).toString();

			if (instanceNumber != null) {
				error.instance_number = instanceNumber;
			}

			throw new SDKException(Constants.MANDATORY_VALUE_ERROR, Constants.MANDATORY_KEY_ERROR, error, null);
		}

		if (this.commonAPIHandler.isMandatoryChecker() != null && this.commonAPIHandler.isMandatoryChecker()) {
			if (this.commonAPIHandler.getCategoryMethod().toLowerCase() == Constants.REQUEST_CATEGORY_CREATE.toLowerCase()) {
				if (lookUp) {
					if (primaryKeys.size > 0) {
						let error = {};

						error.field = memberName;

						error.type = requestInstance.constructor.name;

						error.keys = Array.from(primaryKeys.keys()).toString();

						if (instanceNumber != null) {
							error.instance_number = instanceNumber;
						}

						throw new SDKException(Constants.MANDATORY_VALUE_ERROR, Constants.PRIMARY_KEY_ERROR, error, null);
					}
				}
				else if (requiredKeys.size > 0) {
					let error = {};

					error.field = memberName;

					error.type = requestInstance.constructor.name;

					error.keys = Array.from(requiredKeys.keys()).toString();

					if (instanceNumber != null) {
						error.instance_number = instanceNumber;
					}

					throw new SDKException(Constants.MANDATORY_VALUE_ERROR, Constants.MANDATORY_KEY_ERROR, error, null);
				}
			}

			if (this.commonAPIHandler.getCategoryMethod().toUpperCase() == Constants.REQUEST_CATEGORY_UPDATE && primaryKeys.size > 0) {
				let error = {};

				error.field = memberName;

				error.type = requestInstance.constructor.name;

				error.keys = Array.from(primaryKeys.keys()).toString();

				if (instanceNumber != null) {
					error.instance_number = instanceNumber;
				}

				throw new SDKException(Constants.MANDATORY_VALUE_ERROR, Constants.PRIMARY_KEY_ERROR, error, null);
			}
		}

		else if (lookUp && this.commonAPIHandler.getCategoryMethod().toLowerCase() == Constants.REQUEST_CATEGORY_UPDATE.toLowerCase()) {
			if (primaryKeys.size > 0) {
				let error = {};

				error.field = memberName;

				error.type = requestInstance.constructor.name;

				error.keys = Array.from(primaryKeys.keys()).toString();

				if (instanceNumber != null) {
					error.instance_number = instanceNumber;
				}

				throw new SDKException(Constants.MANDATORY_VALUE_ERROR, Constants.PRIMARY_KEY_ERROR, error, null);
			}
		}

		return true;
	}

	async isRecordRequest(recordInstance, classDetail, instanceNumber, classMemberDetail) {
		var requestJSON = {};

		var moduleDetail = {};

		var lookUp = false;

		var skipMandatory = false;

		var classMemberName = null;

		if (classMemberDetail != null) {
			lookUp = (classMemberDetail.hasOwnProperty(Constants.LOOKUP) ? classMemberDetail[Constants.LOOKUP] : false);

			skipMandatory = (classMemberDetail.hasOwnProperty(Constants.SKIP_MANDATORY) ? classMemberDetail[Constants.SKIP_MANDATORY] : false);

			classMemberName = this.buildName(classMemberDetail[Constants.NAME]);
		}

		var moduleAPIName = this.commonAPIHandler.getModuleAPIName();

		if (moduleAPIName != null) { // entry
			this.commonAPIHandler.setModuleAPIName(null);

			let fullDetail = await Utility.searchJSONDetails(moduleAPIName);// to get correct moduleapiname in proper format

			if (fullDetail != null) { // from Jsondetails
				moduleDetail = fullDetail[Constants.MODULEDETAILS];
			}
			else { // from user spec
				moduleDetail = await this.getModuleDetailFromUserSpecJSON(moduleAPIName);
			}
		}
		else {
			moduleDetail = classDetail;

			classDetail = classDetailMap[Constants.RECORD_NAMESPACE];
		} // class detail must contain record structure at this point

		//Super Class
		if (Object.getPrototypeOf(Object.getPrototypeOf(recordInstance)).constructor.name === "Record") {
			Object.setPrototypeOf(recordInstance, ZCRM.Record.Model.Record.prototype);
		}

		if (moduleDetail == null) {
			moduleDetail = {};
		}

		var keyValues = new Map();

		keyValues = Reflect.get(recordInstance, Constants.KEY_VALUES);

		var keyModified = new Map();

		keyModified = Reflect.get(recordInstance, Constants.KEY_MODIFIED);

		var requiredKeys = new Map();

		var primaryKeys = new Map();

		if (!skipMandatory) {
			for (let keyName of Object.keys(moduleDetail)) {
				let keyDetail = moduleDetail[keyName];

				let name = keyDetail[Constants.NAME];

				if (keyDetail != null && keyDetail.hasOwnProperty(Constants.REQUIRED) && keyDetail[Constants.REQUIRED] == true) {
					requiredKeys.set(name, true);
				}

				if (keyDetail != null && keyDetail.hasOwnProperty(Constants.PRIMARY) && keyDetail[Constants.PRIMARY] == true) {
					primaryKeys.set(name, true);
				}
			}

			for (let keyName of Object.keys(classDetail)) {
				let keyDetail = classDetail[keyName];

				let name = keyDetail[Constants.NAME];

				if (keyDetail != null && keyDetail.hasOwnProperty(Constants.REQUIRED) && keyDetail[Constants.REQUIRED] == true) {
					requiredKeys.set(name, true);
				}

				if (keyDetail != null && keyDetail.hasOwnProperty(Constants.PRIMARY) && keyDetail[Constants.PRIMARY] == true) {
					primaryKeys.set(name, true);
				}
			}
		}

		for (let keyName of Array.from(keyModified.keys())) {
			if (keyModified.get(keyName) != 1) {
				continue;
			}

			let keyDetail = {};

			let keyValue = keyValues.has(keyName) ? keyValues.get(keyName) : null;

			let jsonValue = null;

			if (keyValue != null) {
				requiredKeys.delete(keyName);

				primaryKeys.delete(keyName);
			}

			let memberName = this.buildName(keyName);

			if (moduleDetail != null && Object.keys(moduleDetail).length > 0 && (moduleDetail.hasOwnProperty(keyName) || moduleDetail.hasOwnProperty(memberName))) {
				if (moduleDetail.hasOwnProperty(keyName)) {
					keyDetail = moduleDetail[keyName]; // incase of user spec json
				}
				else {
					keyDetail = moduleDetail[memberName]; // json details
				}
			}
			else if (classDetail.hasOwnProperty(memberName)) {
				keyDetail = classDetail[memberName];
			}

			if (Object.keys(keyDetail).length > 0) {
				if ((keyDetail.hasOwnProperty(Constants.READ_ONLY) && (keyDetail[Constants.READ_ONLY] == true || keyDetail[Constants.READ_ONLY] == 'true')) || !keyDetail.hasOwnProperty(Constants.NAME)) { // read only or no keyName
					continue;
				}

				if (await this.valueChecker(recordInstance.constructor.name, keyName, keyDetail, keyValue, this.uniqueValuesMap, instanceNumber)) {
					jsonValue = await this.setData(keyDetail, keyValue);
				}
			}
			else {
				jsonValue = await this.redirectorForObjectToJSON(keyValue);
			}

			requestJSON[keyName] = jsonValue;
		}

		if (skipMandatory || await this.checkException(classMemberName, recordInstance, instanceNumber, lookUp, requiredKeys, primaryKeys, new Map())) {
			return requestJSON;
		}
	}

	async setData(memberDetail, fieldValue) {
		if (fieldValue != null) {
			let type = memberDetail[Constants.TYPE].toString();

			if (type.toLowerCase() === Constants.LIST_NAMESPACE.toLowerCase()) {
				return await this.setJSONArray(fieldValue, memberDetail);
			}
			else if (type.toLowerCase() === Constants.MAP_NAMESPACE.toLowerCase()) {
				return await this.setJSONObject(fieldValue, memberDetail);
			}
			else if (type.toLowerCase() === Constants.CHOICE_NAMESPACE.toLowerCase() || (memberDetail.hasOwnProperty(Constants.STRUCTURE_NAME) && memberDetail[Constants.STRUCTURE_NAME].toLowerCase() == Constants.CHOICE_NAMESPACE.toLowerCase())) {
				return fieldValue.getValue();
			}
			else if (memberDetail.hasOwnProperty(Constants.STRUCTURE_NAME) && memberDetail.hasOwnProperty(Constants.MODULE)) {
				return await this.isRecordRequest(fieldValue, await this.getModuleDetailFromUserSpecJSON(memberDetail[Constants.MODULE]), null, memberDetail);
			}
			else if (memberDetail.hasOwnProperty(Constants.STRUCTURE_NAME)) {
				return await this.formRequest(fieldValue, memberDetail[Constants.STRUCTURE_NAME], null, memberDetail);
			}
			else {
				return await DataTypeConverter.postConvert(fieldValue, type);
			}
		}

		return null;
	}

	async setJSONObject(fieldValue, memberDetail) {
		var jsonObject = {};

		var requestObject = fieldValue;

		if (Array.from(requestObject.keys()).length > 0) {
			if (memberDetail == null || (memberDetail != null && !memberDetail.hasOwnProperty(Constants.KEYS))) {
				for (let key of Array.from(requestObject.keys())) {
					jsonObject[key] = await this.redirectorForObjectToJSON(requestObject.get(key));
				}
			}
			else if (memberDetail !== null && memberDetail.hasOwnProperty(Constants.KEYS)) {
				var keysDetail = memberDetail[Constants.KEYS];

				for (let keyIndex = 0; keyIndex < keysDetail.length; keyIndex++) {
					let keyDetail = keysDetail[keyIndex];

					let keyName = keyDetail[Constants.NAME];

					let keyValue = null;

					if (requestObject.has(keyName) && requestObject.get(keyName) != null) {
						keyValue = await this.setData(keyDetail, requestObject.get(keyName));

						jsonObject[keyName] = keyValue;
					}
				}
			}
		}

		return jsonObject;
	}

	async setJSONArray(fieldValue, memberDetail) {
		var jsonArray = [];

		var requestObjects = fieldValue;

		if (requestObjects.length > 0) {
			if (memberDetail == null || (memberDetail != null && !memberDetail.hasOwnProperty(Constants.STRUCTURE_NAME))) {
				for (let request of requestObjects) {
					jsonArray.push(await this.redirectorForObjectToJSON(request));
				}
			}
			else {
				let pack = memberDetail[Constants.STRUCTURE_NAME].toString();

				if (pack == Constants.CHOICE_NAMESPACE) {
					for (let request of requestObjects) {
						jsonArray.push(request.getValue());
					}
				}
				else if (memberDetail.hasOwnProperty(Constants.MODULE) && memberDetail[Constants.MODULE] != null) {
					let instanceCount = 0;

					for (let request of requestObjects) {
						jsonArray.push(await this.isRecordRequest(request, await this.getModuleDetailFromUserSpecJSON(memberDetail[Constants.MODULE]), instanceCount, memberDetail));

						instanceCount++;
					}
				}
				else {
					let instanceCount = 0;

					for (let request of requestObjects) {
						jsonArray.push(await this.formRequest(request, pack, instanceCount, memberDetail));

						instanceCount++;
					}
				}
			}
		}

		return jsonArray;
	}

	async redirectorForObjectToJSON(request) {
		if (Array.isArray(request)) {
			return await this.setJSONArray(request, null);
		}
		else if (request instanceof Map) {
			return await this.setJSONObject(request, null);
		}
		else {
			return request;
		}
	}

	async getWrappedResponse(response, pack) {
		super.getWrappedResponse(response, pack);

		if (response.response != null) {
			let responseObject = response.response;

			if (responseObject.valueOf() instanceof ArrayBuffer) {
				let binary = '';

				let bytes = new Uint8Array(responseObject);

				let len = bytes.byteLength;

				for (var i = 0; i < len; i++) {

					binary += await String.fromCharCode(bytes[i]);
				}

				responseObject = binary;
			}

			if (responseObject != null && responseObject.toString() != "" && Object.keys(responseObject).length > 0) {
				return await this.getResponse(JSON.parse(responseObject), pack);
			}
		}

		return null;
	}

	async getResponse(response, packageName) {
		super.getResponse(response, packageName);

		var instance = null;

		if (response == null || response == "" || Object.keys(response).length === 0) {
			return instance;
		}

		var responseJson = response;

		var classDetail = classDetailMap[packageName];

		if (classDetail.hasOwnProperty(Constants.INTERFACE) && classDetail[Constants.INTERFACE]) { // if interface
			let classes = classDetail[Constants.CLASSES];

			instance = await this.findMatch(classes, responseJson);// findmatch returns instance(calls getresponse() recursively)
		}
		else {
			var ClassName = this.stringToFunction(packageName);

			instance = new ClassName();

			if (instance instanceof ZCRM.Record.Model.Record) { // if record -> based on response json data will be assigned to field Values
				let moduleAPIName = this.commonAPIHandler.getModuleAPIName();

				instance = await this.isRecordResponse(responseJson, classDetail, packageName);

				this.commonAPIHandler.setModuleAPIName(moduleAPIName);
			}
			else {
				instance = await this.notRecordResponse(instance, responseJson, classDetail);// based on json details data will be assigned
			}
		}

		return instance;
	}

	async notRecordResponse(instance, responseJson, classDetail) {
		for (let memberName in classDetail) {
			let keyDetail = classDetail[memberName];

			let keyName = keyDetail.hasOwnProperty(Constants.NAME) ? keyDetail[Constants.NAME] : null;// api-name of the member

			if (keyName != null && responseJson.hasOwnProperty(keyName) && responseJson[keyName] !== null) {
				let keyData = responseJson[keyName];

				let memberValue = await this.getData(keyData, keyDetail);

				Reflect.set(instance, memberName, memberValue);
			}
		}

		return instance;
	}

	async isRecordResponse(responseJson, classDetail, pack) {
		let className = this.stringToFunction(pack);

		let recordInstance = new className();

		let moduleAPIName = this.commonAPIHandler.getModuleAPIName();

		let moduleDetail = {};

		if (moduleAPIName != null) { // entry
			this.commonAPIHandler.setModuleAPIName(null);

			let fullDetail = await Utility.searchJSONDetails(moduleAPIName);// to get correct moduleapiname in proper format

			if (fullDetail != null) { // from Jsondetails
				moduleDetail = fullDetail[Constants.MODULEDETAILS];

				let moduleClassName = this.stringToFunction(fullDetail[Constants.MODULEPACKAGENAME]);

				recordInstance = new moduleClassName();
			}
			else { // from user spec
				moduleDetail = await this.getModuleDetailFromUserSpecJSON(moduleAPIName);
			}
		}

		if (moduleDetail == null) {
			moduleDetail = {};
		}

		for (let key in classDetail) {
			moduleDetail[key] = classDetail[key];
		}

		let recordDetail = classDetailMap[Constants.RECORD_NAMESPACE];

		// after above steps, recordDetail must always contain record structure detail,module detail could be any,entry case pack detail is record

		var keyValues = new Map();

		for (let keyName in responseJson) {
			let memberName = this.buildName(keyName);

			let keyDetail = {};

			if (moduleDetail != null && Object.keys(moduleDetail).length > 0 && (moduleDetail.hasOwnProperty(keyName) || moduleDetail.hasOwnProperty(memberName))) {
				if (moduleDetail.hasOwnProperty(keyName)) {
					keyDetail = moduleDetail[keyName];// incase of user spec json
				}
				else {
					keyDetail = moduleDetail[memberName];// json details
				}
			}
			else if (recordDetail.hasOwnProperty(memberName)) {
				keyDetail = recordDetail[memberName];
			}

			let keyValue = null;

			let keyData = responseJson[keyName];

			if (keyDetail != null && Object.keys(keyDetail).length > 0) {
				keyName = keyDetail[Constants.NAME];

				keyValue = await this.getData(keyData, keyDetail);
			}
			else {// if not key detail
				keyValue = await this.redirectorForJSONToObject(keyData);
			}

			keyValues.set(keyName, keyValue);
		}

		Reflect.set(recordInstance, Constants.KEY_VALUES, keyValues);

		return recordInstance;
	}

	async getData(keyData, memberDetail) {
		let memberValue = null;

		if (keyData != null) {
			let type = memberDetail[Constants.TYPE].toString();

			if (type.toLowerCase() === Constants.LIST_NAMESPACE.toLowerCase()) {
				memberValue = await this.getCollectionsData(keyData, memberDetail);
			}
			else if (type.toLowerCase() === Constants.MAP_NAMESPACE.toLowerCase()) {
				memberValue = await this.getMapData(keyData, memberDetail);
			}
			else if (type === Constants.CHOICE_NAMESPACE || (memberDetail.hasOwnProperty(Constants.STRUCTURE_NAME) && memberDetail[Constants.STRUCTURE_NAME].toLowerCase() === Constants.CHOICE_NAMESPACE.toLowerCase())) {
				memberValue = new Choice(keyData);
			}
			else if (memberDetail.hasOwnProperty(Constants.STRUCTURE_NAME) && memberDetail.hasOwnProperty(Constants.MODULE)) {
				memberValue = await this.isRecordResponse(keyData, await this.getModuleDetailFromUserSpecJSON(memberDetail[Constants.MODULE]), memberDetail[Constants.STRUCTURE_NAME]);
			}
			else if (memberDetail.hasOwnProperty(Constants.STRUCTURE_NAME)) {
				memberValue = await this.getResponse(keyData, memberDetail[Constants.STRUCTURE_NAME]);
			}
			else {
				memberValue = await DataTypeConverter.preConvert(keyData, type);
			}
		}

		return memberValue;
	}

	async getMapData(response, memberDetail) {
		var mapInstance = new Map();

		if (Object.keys(response).length > 0) {
			if (memberDetail == null || (memberDetail != null && !memberDetail.hasOwnProperty(Constants.KEYS))) {
				for (let key in response) {
					mapInstance.set(key, await this.redirectorForJSONToObject(response[key]));
				}
			}
			else if (memberDetail.hasOwnProperty(Constants.KEYS)) { // member must have keys
				var keysDetail = memberDetail[Constants.KEYS];

				for (let keyIndex = 0; keyIndex < keysDetail.length; keyIndex++) {
					var keyDetail = keysDetail[keyIndex];

					var keyName = keyDetail[Constants.NAME];

					var keyValue = null;

					if (response.hasOwnProperty(keyName) && response[keyName] != null) {
						keyValue = await this.getData(response[keyName], keyDetail);

						mapInstance.set(keyName, keyValue);
					}
				}
			}
		}

		return mapInstance;
	}

	async getCollectionsData(responses, memberDetail) {
		var values = new Array();

		if (responses.length > 0) {
			if (memberDetail == null || (memberDetail != null && !memberDetail.hasOwnProperty(Constants.STRUCTURE_NAME))) {
				for (let response of responses) {
					values.push(await this.redirectorForJSONToObject(response));
				}
			}
			else { // need to have structure Name in memberDetail
				let pack = memberDetail[Constants.STRUCTURE_NAME];

				if (pack == Constants.CHOICE_NAMESPACE) {
					for (let response of responses) {
						values.push(new Choice(response));
					}
				}
				else if (memberDetail.hasOwnProperty(Constants.MODULE) && memberDetail[Constants.MODULE] != null) {
					for (let response of responses) {
						values.push(await this.isRecordResponse(response, await this.getModuleDetailFromUserSpecJSON(memberDetail[Constants.MODULE]), pack));
					}
				}
				else {
					for (let response of responses) {
						values.push(await this.getResponse(response, pack));
					}
				}
			}
		}

		return values;
	}

	async getModuleDetailFromUserSpecJSON(module) {
		let moduleDetail = {};

		if (Initializer.sdkConfig.getCacheStore()) {
			var converterInstance = new Converter();

			var encodedName = await converterInstance.getEncodedFileName();

			if (await LocalCache.exist()) {
				let recordFieldDetailsJson = await LocalCache.get(encodedName);

				if (recordFieldDetailsJson.hasOwnProperty(module.toLowerCase())) {
					moduleDetail = recordFieldDetailsJson[module.toLowerCase()];
				}
			}
		}
		else {
			let json = CommonAPIHandler.recordFieldDetails;

			moduleDetail = await Utility.getJSONObject(json, module.toLowerCase());
		}

		return moduleDetail;
	}

	async redirectorForJSONToObject(keyData) {
		let type = Object.prototype.toString.call(keyData);

		if (type === Constants.OBJECT_TYPE) {
			return await this.getMapData(keyData, null);
		}
		else if (type === Constants.ARRAY_KEY) {
			return await this.getCollectionsData(keyData, null);
		}
		else {
			return keyData;
		}
	}

	async findMatch(classes, responseJson) {
		let pack = "";

		let ratio = 0;

		for (let className of classes) {
			var matchRatio = await this.findRatio(className, responseJson);

			if (matchRatio === 1.0) {
				pack = className;

				ratio = 1;

				break;
			}
			else if (matchRatio > ratio) {
				pack = className;

				ratio = matchRatio;
			}
		}

		return await this.getResponse(responseJson, pack);
	}

	findRatio(className, responseJson) {
		var classDetail = classDetailMap[className];

		var totalPoints = Array.from(Object.keys(classDetail)).length;

		var matches = 0;

		if (totalPoints == 0) {
			return 0;
		}
		else {
			for (let memberName in classDetail) {
				var memberDetail = classDetail[memberName];

				var keyName = memberDetail.hasOwnProperty(Constants.NAME) ? memberDetail[Constants.NAME] : null;

				if (keyName != null && responseJson.hasOwnProperty(keyName) && responseJson[keyName] != null) {// key not empty
					var keyData = responseJson[keyName];

					let type = Object.prototype.toString.call(keyData);

					let structureName = memberDetail.hasOwnProperty(Constants.STRUCTURE_NAME) ? memberDetail[Constants.STRUCTURE_NAME] : null;

					if (type.toLowerCase() == Constants.OBJECT_TYPE.toLowerCase()) {
						type = Constants.MAP_KEY;
					}

					if (Constants.TYPE_VS_DATATYPE.has(memberDetail[Constants.TYPE].toLowerCase()) && Constants.TYPE_VS_DATATYPE.get(memberDetail[Constants.TYPE].toLowerCase()) == type) {
						matches++;
					}
					else if (memberDetail[Constants.TYPE].toLowerCase() == Constants.CHOICE_NAMESPACE.toLowerCase()) {
						let values = memberDetail[Constants.VALUES];

						for (let value of values) {
							if (keyData == value) {
								matches++;

								break;
							}
						}
					}

					if (structureName != null && structureName == memberDetail[Constants.TYPE]) {
						if (memberDetail.hasOwnProperty(Constants.VALUES)) {
							let values = memberDetail[Constants.VALUES];

							for (let value of values) {
								if (keyData == value) {
									matches++;

									break;
								}
							}
						}
						else {
							matches++;
						}
					}
				}
			}
		}

		return matches / totalPoints;
	}

	buildName(memberName) {
		let name = memberName.toLowerCase().split("_");

		var index = 0;

		if (name.length == 0) {
			index = 1;
		}

		var sdkName = name[0];

		sdkName = sdkName[0].toLowerCase() + sdkName.slice(1);

		index = 1;

		for (var nameIndex = index; nameIndex < name.length; nameIndex++) {
			var fieldName = name[nameIndex];

			var firstLetterUppercase = "";

			if (fieldName.length > 0) {
				firstLetterUppercase = fieldName[0].toUpperCase() + fieldName.slice(1);
			}

			sdkName = sdkName.concat(firstLetterUppercase);
		}

		return sdkName;
	}

	stringToFunction(str) {
		str = "ZCRM." + str;

		var arr = str.split(".");

		var fn = (window || this);

		for (var i = 0, len = arr.length; i < len; i++) {
			fn = fn[arr[i]];
		}

		if (typeof fn !== Constants.FUNCTION) {
			throw new SDKException(Constants.CLASS_NOT_FOUND, null, null, null);
		}

		return fn;
	}

	getFileName(name) {
		let fileName = [];

		let nameParts = name.split(/([A-Z][a-z]+)/).filter(function (e) { return e });

		fileName.push(nameParts[0].toLowerCase());

		for (let i = 1; i < nameParts.length; i++) {
			fileName.push(nameParts[i].toLowerCase());
		}

		return fileName.join("_");
	}
}

/**
 * This class processes the API response object to the POJO object and POJO object to an XML object.
 */
class XMLConverter extends Converter {
	constructor(commonAPIHandler) {
		super(commonAPIHandler);

		this.uniqueValuesMap = {};
	}

	formRequest(requestObject, pack, instanceNumber) {
		super.formRequest(requestObject, pack, instanceNumber);
	}

	appendToRequest(request) {
		super.appendToRequest(request);
	}

	getWrappedResponse(response, pack) {
		super.getWrappedResponse(response, pack);
	}

	getResponse(response, pack) {
		super.getResponse(response, pack);
	}
}

/**
 * This class is to process the download file and stream response.
 */
class Downloader extends Converter {
	constructor(commonApiHandler) {
		super(commonApiHandler);

		this.uniqueValuesMap = {};
	}

	appendToRequest(request) {
		super.appendToRequest(request);
	}

	formRequest(requestObject, pack, instanceNumber) {
		super.formRequest(requestObject, pack, instanceNumber);
	}

	async getWrappedResponse(response, pack) {
		super.getWrappedResponse(response, pack);

		return await this.getResponse(response, pack);
	}

	async getResponse(response, pack) {
		super.getResponse(response, pack);

		var instance = null;

		var recordJsonDetails = classDetailMap[pack];

		if (recordJsonDetails.hasOwnProperty(Constants.INTERFACE) && recordJsonDetails[Constants.INTERFACE]) { // if interface
			let classes = recordJsonDetails[Constants.CLASSES];

			for (let index = 0; index < classes.length; index++) {
				let className = classes[index];

				if (className.toString().toLowerCase().includes(Constants.FILE_BODY_WRAPPER.toLowerCase())) {
					return await this.getResponse(response, className);
				}
			}
		}
		else {
			let className = await this.stringToFunction(pack);

			instance = new className();

			for (let memberName in recordJsonDetails) {
				var memberDetail = recordJsonDetails[memberName];

				var type = memberDetail[Constants.TYPE];

				var instanceValue = null;

				if (type === Constants.STREAM_WRAPPER_CLASS) {
					var filename;

					if (response.getAllResponseHeaders().indexOf(Constants.CONTENT_DISPOSITION) >= 0) {
						var disposition = response.getResponseHeader(Constants.CONTENT_DISPOSITION);//No I18N

						if (disposition && disposition.indexOf('attachment') !== -1) {
							var filenameRegex = /filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/;

							var matches = filenameRegex.exec(disposition);

							if (matches != null && matches[1]) {
								filename = matches[1].replace(/['"]/g, '');

								filename = filename.replace('UTF-8', '');
							}
						}
					}

					var mimeType = response.getResponseHeader(Constants.CONTENT_TYPE_HEADER.toLowerCase());//No I18N

					if (mimeType != undefined && mimeType != null) {
						if (mimeType.includes(";")) {
							mimeType = mimeType.split(";")[0];
						}
					}
					else {
						mimeType = "text/plain";
					}

					let blob = new Blob([response.response], { type: mimeType.toString() });

					var fileInstance = new StreamWrapper.Model.StreamWrapper(filename, blob);

					instanceValue = fileInstance;
				}

				Reflect.set(instance, memberName, instanceValue);
			}
		}

		return instance;
	}

	stringToFunction(str) {
		str = "ZCRM." + str;

		var arr = str.split(".");

		var fn = (window || this);

		for (var i = 0, len = arr.length; i < len; i++) {
			fn = fn[arr[i]];
		}

		if (typeof fn !== Constants.FUNCTION) {
			throw new SDKException(Constants.CLASS_NOT_FOUND, null, null, null);
		}

		return fn;
	};
}

/**
 * This class is to process the upload file and stream.
 */
class FormDataConverter extends Converter {
	constructor(commonApiHandler) {
		super(commonApiHandler);

		this.uniqueValuesMap = {};
	}

	async appendToRequest(requestBase) {
		super.appendToRequest(requestBase);

		var formDataRequestBody = new FormData();

		await this.addFileBody(requestBase.getRequestBody(), formDataRequestBody);

		return formDataRequestBody;
	}

	async addFileBody(requestObject, formData) {
		let requestKeys = Object.keys(requestObject);

		for (let key of requestKeys) {
			let value = requestObject[key];

			let type = Object.prototype.toString.call(value);

			if (Array.isArray(value)) {
				for (let fileObject of value) {
					if (fileObject instanceof StreamWrapper.Model.StreamWrapper) {
						formData.append(key, new Blob([fileObject.getStream()]), fileObject.getName());
					}
					else {
						formData.append(key, fileObject);
					}
				}
			}
			else if (value instanceof StreamWrapper.Model.StreamWrapper) {
				formData.append(key, new Blob([value.getStream()]), value.getName());
			}
			else if(value != null && type == Constants.OBJECT_TYPE && Object.keys(value).length > 0){
				await this.addFileBody(value, formData);
			}
			else {
				formData.append(key, value);
			}
		}
	}

	async formRequest(requestInstance, pack, instanceNumber, classMemberDetail) {
		super.formRequest(requestInstance, pack, instanceNumber);

		var classDetail = classDetailMap[pack];

		var request = {};

		if (classDetail.hasOwnProperty(Constants.INTERFACE) && classDetail[Constants.INTERFACE]) {
			var classes = classDetail[Constants.CLASSES];

			var baseName = pack.split('/').slice(0, -1);

			let className = await this.getFileName(requestInstance.constructor.name);

			baseName.push(className);

			let requestObjectClassName = baseName.join('/');

			for (let classname of classes) {
				if (classname.toLowerCase() == requestObjectClassName.toLowerCase()) {
					classDetail = classDetailMap[requestObjectClassName];

					break;
				}
			}
		}

		for (let memberName in classDetail) {
			var modification = null;

			var memberDetail = classDetail[memberName];

			// check and neglect read_only
			if ((memberDetail.hasOwnProperty(Constants.READ_ONLY) && memberDetail[Constants.READ_ONLY] == Constants.TRUE) || !memberDetail.hasOwnProperty(Constants.NAME)) {
				continue;
			}

			try {
				modification = requestInstance.isKeyModified(memberDetail[Constants.NAME]);
			}
			catch (e) {
				throw new SDKException(Constants.EXCEPTION_IS_KEY_MODIFIED, null, null, e);
			}

			// check required
			if ((modification == null || modification === 0) && memberDetail.hasOwnProperty(Constants.REQUIRED) && memberDetail[Constants.REQUIRED] == Constants.TRUE) {
				throw new SDKException(Constants.MANDATORY_VALUE_MISSING_ERROR, Constants.MANDATORY_KEY_MISSING_ERROR + memberName);
			}

			var fieldValue = Reflect.get(requestInstance, memberName);

			if (modification != null && modification !== 0 && await this.valueChecker(requestInstance.constructor.name, memberName, memberDetail, fieldValue, this.uniqueValuesMap, instanceNumber) === true) {
				var keyName = memberDetail[Constants.NAME];

				var type = memberDetail[Constants.TYPE];

				if (type.toLowerCase() == Constants.LIST_NAMESPACE.toLowerCase()) {
					request[keyName] = await this.setJSONArray(fieldValue, memberDetail);
				}
				else if (type.toLowerCase() == Constants.MAP_NAMESPACE.toLowerCase()) {
					request[keyName] = await this.setJSONObject(fieldValue, memberDetail);
				}
				else if (memberDetail.hasOwnProperty(Constants.STRUCTURE_NAME)) {
					request[keyName] = await this.formRequest(fieldValue, memberDetail[Constants.STRUCTURE_NAME], 0, memberDetail);
				}
				else {
					request[keyName] = fieldValue;
				}
			}
		}

		return request;
	}

	getFileName(name) {
		let fileName = [];

		let nameParts = name.split(/([A-Z][a-z]+)/).filter(function (e) { return e; });

		fileName.push(nameParts[0].toLowerCase());

		for (let i = 1; i < nameParts.length; i++) {
			fileName.push(nameParts[i].toLowerCase());
		}

		return fileName.join("_");
	}

	async setJSONObject(fieldValue, memberDetail) {
		var jsonObject = {};

		var requestObject = fieldValue;

		if (memberDetail == null) {
			for (let key of Array.from(requestObject.keys())) {
				jsonObject[key] = await this.redirectorForObjectToJSON(requestObject.get(key));
			}
		}
		else {
			if(memberDetail.hasOwnProperty(Constants.KEYS)){
				var keysDetail = memberDetail[Constants.KEYS];
				for (let keyIndex = 0; keyIndex < keysDetail.length; keyIndex++) {
					let keyDetail = keysDetail[keyIndex];

					let keyName = keyDetail[Constants.NAME];

					let keyValue = null;

					if (requestObject.hasOwnProperty(keyName) && requestObject[keyName] != null) {
						if (keyDetail.hasOwnProperty(Constants.STRUCTURE_NAME)) {
							keyValue = await this.formRequest(requestObject[keyName], keyDetail[Constants.STRUCTURE_NAME], 0, memberDetail);

							jsonObject[keyName] = keyValue;
						}
						else {
							jsonObject[keyName] = await this.redirectorForObjectToJSON(requestObject[keyName]);
						}
					}
				}
			}
			else {
				for (let key of Array.from(requestObject.keys())) {
					jsonObject[key] = await this.redirectorForObjectToJSON(requestObject.get(key));
				}
			}
		}

		return jsonObject;
	}

	async setJSONArray(fieldValue, memberDetail) {
		var jsonArray = [];

		var requestObjects = fieldValue;

		if (memberDetail == null) {
			for (let request of requestObjects) {
				jsonArray.push(await this.redirectorForObjectToJSON(request));
			}
		}
		else if (memberDetail.hasOwnProperty(Constants.STRUCTURE_NAME)) {
			let instanceCount = 0;

			let pack = memberDetail[Constants.STRUCTURE_NAME];

			for (let request of requestObjects) {
				jsonArray.push(await this.formRequest(request, pack, instanceCount++, memberDetail));
			}
		}
		else {
			for (let request of requestObjects) {
				jsonArray.push(await this.redirectorForObjectToJSON(request));
			}
		}

		return jsonArray;
	}

	redirectorForObjectToJSON(request) {
		let type = Object.prototype.toString.call(request)

		if (type.toLowerCase() == Constants.ARRAY_KEY.toLowerCase()) {
			return this.setJSONArray(request, null);
		}
		else if (type.toLowerCase() == Constants.MAP_KEY.toLowerCase()) {
			return this.setJSONObject(request, null);
		}
		else {
			return request;
		}
	}

	getWrappedResponse(response, pack) {
		super.getWrappedResponse(response, pack);
	}

	getResponse(responseJson, pack) {
		super.getResponse(responseJson, pack);
	}
}

var LocalCache = {
    data: {},
    remove: async function () {
        if ('caches' in window) {
            await caches.delete(Constants.CRMSDK);
        }
    },
    exist: async function () {
        if ('caches' in window) {
            return await caches.has(Constants.CRMSDK);
        }
    },
    get: async function (userKey) {
        let request = '/' + userKey + '.json';

        let response = await caches.match(request);

        if (response != undefined) {
            return await response.json();
        }

        return {};
    },
    set: async function (userKey, value) {
        if ('caches' in window) {
            let cache = await caches.open(Constants.CRMSDK);

            let request = '/' + userKey + '.json';

            await cache.put(request, new Response(JSON.stringify(value)));
        }
    },
    removeKey: async function (userKey) {
        if ('caches' in window) {
            let cache = await caches.open(Constants.CRMSDK);

            let request = '/' + userKey + '.json';

            await cache.delete(request);
        }
    }
};

/**
 * This class is to process the API request and its response.
 * Construct the objects that are to be sent as parameters or in the request body with the API.
 * The Request parameter, header and body objects are constructed here.
 * Process the response JSON and converts it to relevant objects in the library.
 */
class CommonAPIHandler {
    constructor() {
        this._apiPath = null;

        this._param = new ParameterMap();

        this._header = new HeaderMap();

        this._request = null;

        this._httpMethod = null;

        this._moduleAPIName = null;

        this._contentType = null;

        this._categoryMethod = null;

        this._mandatoryChecker = null;
    }

    /**
     * This is a setter method to set an API request content type.
     * @param {String} contentType A String containing the API request content type.
     */
    setContentType(contentType) {
        this._contentType = contentType;
    }

    /**
     * This is a setter method to set the API request URL.
     * @param {String} apiPath A String containing the API request URL.
     */
    setAPIPath(apiPath) {
        this._apiPath = apiPath;
    }

    /**
     * This method is to add an API request parameter.
     * @param {Param} paramInstance A Param instance containing the API request parameter.
     * @param {object} paramValue A object containing the API request parameter value.
     */
    async addParam(paramInstance, paramValue) {
        if (paramValue == null) {
            return;
        }

        if (this._param == null) {
            this._param = new ParameterMap();
        }

        await this._param.add(paramInstance, paramValue);
    }

    /**
     * This method to add an API request header.
     * @param {Header} headerInstance A Header instance the API request header.
     * @param {object} headerValue A object containing the API request header value.
     */
    async addHeader(headerInstance, headerValue) {
        if (headerValue == null) {
            return;
        }

        if (this._header == null) {
            this._header = new HeaderMap();
        }

        await this._header.add(headerInstance, headerValue);
    }

    /**
     * This is a setter method to set the API request parameter map.
     * @param {ParameterMap} param A ParameterMap class instance containing the API request parameter.
     */
    setParam(param) {
        if (param == null) {
            return;
        }

        if (this._param.getParameterMap() != null && this._param.getParameterMap().size > 0) {
            for (let key of param.getParameterMap().keys()) {
                this._param.getParameterMap().set(key, param.getParameterMap().get(key));
            }
        }
        else {
            this._param = param;
        }
    }

    /**
     * This is a getter method to get the Zoho CRM module API name.
     * @returns {String} A String representing the Zoho CRM module API name.
     */
    getModuleAPIName() {
        return this._moduleAPIName;
    }

    /**
     * This is a setter method to set the Zoho CRM module API name.
     * @param {String} moduleAPIName A String containing the Zoho CRM module API name.
     */
    setModuleAPIName(moduleAPIName) {
        this._moduleAPIName = moduleAPIName;
    }

    /**
     * This is a setter method to set the API request header map.
     * @param {HeaderMap} header A HeaderMap class instance containing the API request header.
     */
    setHeader(header) {
        if (header == null) {
            return;
        }

        if (this._header.getHeaderMap() != null && this._header.getHeaderMap().size > 0) {
            for (let key of header.getHeaderMap().keys()) {
                this._header.getHeaderMap().set(key, header.getHeaderMap().get(key));
            }
        }
        else {
            this._header = header;
        }
    }

    /**
     * This is a setter method to set the API request body object.
     * @param {object} request A Object containing the API request body object.
     */
    setRequest(request) {
        this._request = request;
    }

    /**
     * This is a setter method to set the HTTP API request method.
     * @param {String} httpMethod A String containing the HTTP API request method.
     */
    setHttpMethod(httpMethod) {
        this._httpMethod = httpMethod;
    }

    /**
     * This is a getter method to get mandatoryChecker
     * @returns {Boolean} - A Boolean value representing mandatoryChecker
     */
    isMandatoryChecker() {
        return this._mandatoryChecker;
    }

    /**
     * This is a setter method to set mandatoryChecker
     * @param {Bool} mandatoryChecker - A Boolean value
     */
    setMandatoryChecker(mandatoryChecker) {
        this._mandatoryChecker = mandatoryChecker;
    }

    /**
     * This is a getter method to get the HTTP API request method.
     * @returns {String} A String representing the HTTP API request method.
     */
    getHttpMethod() {
        return this._httpMethod;
    }

    /**
     * This is a getter method to get categoryMethod
     * @returns {String} - A String value representing categoryMethod
     */
    getCategoryMethod() {
        return this._categoryMethod;
    }

    /**
     * This is a setter method to set categoryMethod
     * @param {String} categoryMethod - A String value representing categoryMethod
     */
    setCategoryMethod(category) {
        this._categoryMethod = category;
    }

    /** 
     * This is a getter method to get the API request URL.
     * @returns {String} A String containing the API request URL.
     */
    getAPIPath() {
        return this._apiPath;
    }

    /**
     * This method is used in constructing API request and response details. To make the Zoho CRM API calls.
     * @param {String} className A String containing the method return type.
     * @param {String} encodeType A String containing the expected API response content type.
     * @returns {APIResponse} A APIResponse representing the Zoho CRM API response instance or null.
     */
    async apiCall(className, encodeType) {
        if (Initializer == null) {
            throw new SDKException(Constants.SDK_UNINITIALIZATION_ERROR, Constants.SDK_UNINITIALIZATION_MESSAGE);
        }

        var connector = new APIHTTPConnector();

        try {
            await this.setAPIUrl(connector);
        }
        catch (error) {
            if (!(error instanceof SDKException)) {
                error = new SDKException(null, null, null, error);
            }

            SDKLogger.log(Levels.ERROR, Constants.SET_API_URL_EXCEPTION + error.toString());

            throw error;
        }

        connector.setRequestMethod(this._httpMethod);

        connector.setContentType(this._contentType);

        if (this._header != null && this._header.getHeaderMap().size > 0) {
            connector.setHeaders(this._header.getHeaderMap());
        }

        if (this._param != null && this._param.getParameterMap().size > 0) {
            connector.setParams(this._param.getParameterMap());
        }

        try {
            await Initializer.token.authenticate(connector);
        }
        catch (error) {
            if (!(error instanceof SDKException)) {
                error = new SDKException(null, null, null, error);
            }

            SDKLogger.log(Levels.ERROR, Constants.AUTHENTICATION_EXCEPTION + error.toString());

            throw error;
        }

        var returnObject = null;

        var convertInstance = null;

        if (this._contentType != null && Constants.IS_GENERATE_REQUEST_BODY.includes(this._httpMethod.toUpperCase())) {
            let request = null;

            var requestClassName = className.split(".");

            requestClassName[requestClassName.length - 1] = this._request.constructor.name;

            try {
                convertInstance = await this.getConverterClassInstance(this._contentType.toLowerCase());

                request = await convertInstance.formRequest(this._request, requestClassName.join("."), null, null);
            }
            catch (error) {
                if (!(error instanceof SDKException)) {
                    error = new SDKException(null, null, null, error);
                }

                SDKLogger.log(Levels.ERROR, Constants.FORM_REQUEST_EXCEPTION + error.toString());

                throw error;
            }

            connector.setRequestBody(request);
        }

        try {
            // let zoho_sdk_value = navigator.appCodeName + "/" + parseFloat(navigator.appVersion) + "javascript-2.0/" + ":" + Constants.SDK_VERSION;
            // connector.addHeader(Constants.ZOHO_SDK, zoho_sdk_value);

            let response = await connector.fireRequest(convertInstance);

            var statusCode = response.status;

            var headerMap = await this.getHeaders(await response.getAllResponseHeaders());

            if (headerMap.hasOwnProperty(Constants.CONTENT_TYPE_HEADER.toLowerCase())) {
                var mimeType = headerMap[Constants.CONTENT_TYPE_HEADER];

                if (mimeType != undefined && mimeType != null) {
                    if (mimeType.includes(";")) {

                        mimeType = mimeType.split(";")[0];
                    }

                    convertInstance = await this.getConverterClassInstance(mimeType.toLowerCase());

                    returnObject = await convertInstance.getWrappedResponse(response, className);
                }
            }
            else {
                SDKLogger.log(Levels.ERROR, Constants.API_ERROR_RESPONSE + statusCode.toString());
            }

            return new APIResponse(headerMap, statusCode, returnObject);
        }
        catch (error) {
            if (!(error instanceof SDKException)) {
                error = new SDKException(null, null, null, error);
            }

            SDKLogger.log(Levels.ERROR, Constants.API_CALL_EXCEPTION + error.toString());

            throw error;
        }
    }

    /**
     * This method to get API response headers.
     * @param {ByteString} headers A ByteString containing the API response headers.
     * @return {Map} A Map&lt;String,String&gt; representing the API response headers.
     */
    async getHeaders(headers) {
        // Convert the header string into an array
        // of individual headers
        var arr = headers.trim().split(/[\r\n]+/);

        // Create a map of header names to values
        var headerMap = new Map();

        arr.forEach(function (line) {
            var parts = line.split(': ');

            var header = parts.shift();

            var value = parts.join(': ');

            headerMap[header] = value;
        });

        return headerMap;
    }

    /**
     * This method is used to get a Converter class instance.
     * @param {String} encodeType A String containing the API response content type.
     * @return A Converter class instance.
     */
    async getConverterClassInstance(encodeType) {
        switch (encodeType) {
            case "application/json":
            case "text/plain":
            case "application/ld+json":
                return new JSONConverter(this);
            case "application/xml":
            case "text/xml":
                return new XMLConverter(this);
            case "multipart/form-data":
                return new FormDataConverter(this);
            case "image/png":
            case "image/jpeg":
            case "image/gif":
            case "image/tiff":
            case "image/svg+xml":
            case "image/bmp":
            case "image/webp":
            case "text/csv":
            case "text/html":
            case "text/css":
            case "text/javascript":
            case "text/calendar":
            case "application/x-download":
            case "application/zip":
            case "application/pdf":
            case "application/java-archive":
            case "application/javascript":
            case "application/octet-stream":
            case "application/xhtml+xml":
            case "application/x-bzip":
            case "application/msword":
            case "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
            case "application/gzip":
            case "application/x-httpd-php":
            case "application/vnd.ms-powerpoint":
            case "application/vnd.rar":
            case "application/x-sh":
            case "application/x-tar":
            case "application/vnd.ms-excel":
            case "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":
            case "application/x-7z-compressed":
            case "audio/mpeg":
            case "audio/x-ms-wma":
            case "audio/vnd.rn-realaudio":
            case "audio/x-wav":
            case "audio/3gpp":
            case "audio/3gpp2":
            case "video/mpeg":
            case "video/mp4":
            case "video/webm":
            case "video/3gpp":
            case "video/3gpp2":
            case "font/ttf":
                return new Downloader(this);
        }

        return null;
    }

    async setAPIUrl(connector) {
        var apiPath = "";

        if (this._apiPath.toString().includes(Constants.HTTP)) {
            if (this._apiPath.includes(Constants.CONTENT_API_URL)) {
                apiPath = apiPath.concat(Initializer.environment.getFileUploadUrl())

                try {
                    const myURL = new URL(this._apiPath);

                    apiPath = apiPath.concat(myURL.pathname);
                }
                catch (error) {
                    throw new SDKException(Constants.INVALID_URL_ERROR, null, null, error);
                }
            }
            else {

                if (this._apiPath.substring(0, 1) == "/") {
                    this._apiPath = this._apiPath.substring(1);
                }

                apiPath = apiPath.concat(this._apiPath);
            }
        }
        else {
            apiPath = Initializer.environment.getUrl();

            apiPath = apiPath.concat(this._apiPath);
        }

        connector.setUrl(apiPath);
    }
}

CommonAPIHandler.recordFieldDetails = new Map();

/**
 * This module is to make HTTP connections, trigger the requests and receive the response.
 */
class APIHTTPConnector {
    constructor() {
        this._url = null;

        this._requestMethod = null;

        this._headers = new Map();

        this._parameters = new Map();

        this._requestBody = {};

        this._contentType = null;
    }

    /**
     * This is a getter method to get API request ContentType.
     * @returns {String} A String representing the API request ContentType.
     */
    getContentType() {
        return this._contentType;
    }

    /**
     * This is a setter method to set API request ContentType.
     * @param {String} A String containing the API request ContentType.
     */
    setContentType(contentType) {
        this._contentType = contentType;
    }


    /**
     * This is a setter method to set the API URL.
     * @param {String} url A String containing the API Request URL.
     */
    setUrl(url) {
        this._url = url;
    }

    /**
     * This is a setter method to set the API request method.
     * @param {String} httpMethod A String containing the API request method.
     */
    setRequestMethod(httpMethod) {
        this._requestMethod = httpMethod;
    }

    /**
     * This is a getter method to get API request headers.
     * @returns {Map} A Map representing the API request headers.
     */
    getHeaders() {
        return this._headers;
    }

    /**
     * This is a setter method to set API request headers.
     * @param {Map} A Map containing the API request headers.
     */
    setHeaders(headers) {
        this._headers = headers;
    }

    /**
     * This method to add API request header name and value.
     * @param {String} headerName A String containing the API request header name.
     * @param {String} headerValue A String containing the API request header value.
     */
    addHeader(headerName, headerValue) {
        this._headers.set(headerName, headerValue);
    }

    /**
     * This is a getter method to get API request parameters.
     * @returns {Map} A Map representing the API request parameters.
     */
    getParams() {
        return this._parameters;
    }

    /**
     * This is a setter method to set API request parameters.
     * @param Map A Map containing the API request parameters.
     */
    setParams(params) {
        this._parameters = params;
    }

    /**
     * This method to add API request param name and value.
     * @param {String} paramName A String containing the API request param name.
     * @param {String} paramValue A String containing the API request param value.
     */
    addParam(paramName, paramValue) {
        this._parameters.set(paramName, paramValue);
    }

    /**
     * This is a setter method to set the API request body.
     * @param {object} requestBody A Object containing the API request body.
     */
    setRequestBody(requestBody) {
        this._requestBody = requestBody;
    }

    /**
     * This is a setter method to set the API request body.
     */
    getRequestBody() {
        return this._requestBody;
    }

    /**
     * This method makes a Zoho CRM Rest API request.
     * @param {Converter} converterInstance A Converter class instance to call appendToRequest method.
     * @returns JSON A JSON representing the API response.
     */
    async fireRequest(converterInstance) {
        var apiHeaders = {};

        var modifiedRequestBody = "";

        if (this._contentType != null) {
            await this.setContentTypeHeader();
        }

        if (this._headers) {
            this._headers.forEach(function (value, key) {
                apiHeaders[key] = value;
            });
        }

        var baseUrl = this._url;

        if (this._parameters != null && this._parameters.size > 0) {
            baseUrl = await this.setQueryParams(this._parameters);
        }

        if (Array.from(Object.keys(this._requestBody)).length > 0) {
            modifiedRequestBody = await converterInstance.appendToRequest(this, null);
        }

        let proxy = {};

        if (Initializer.requestProxy != null) {
            proxy.host = Initializer.requestProxy.getHost();
            proxy.port = Initializer.requestProxy.getPort();
            SDKLogger.log(Levels.INFO, await this.proxyLog(Initializer.requestProxy));
        }

        var requestObj = {
            uri: baseUrl,
            method: this._requestMethod,
            headers: apiHeaders,
            body: modifiedRequestBody,
            encoding: Constants.ENCODING,
            requestProxy: proxy
        };

        SDKLogger.log(Levels.INFO, await this.toString());

        return await new APIHTTPConnector().makeAPICall(requestObj);
    }

    async makeAPICall(requestDetails) {
        return new Promise(function (resolve, reject) {
            var body, xhr, i;

            xhr = new XMLHttpRequest(requestDetails.requestProxy);

            if (!requestDetails.uri.includes(Constants.CONTENT_API) && !requestDetails.uri.includes(Constants.ZIP)) {
                xhr.withCredentials = true;
            }

            xhr.open(requestDetails.method, requestDetails.uri, true);

            xhr.responseType = Constants.ARRAY_BUFFER;

            for (i in requestDetails.headers) {
                xhr.setRequestHeader(i, requestDetails.headers[i]);
            }

            body = requestDetails.body || null;

            xhr.timeout = Initializer.sdkConfig.getTimeout();

            xhr.send(body);

            xhr.onreadystatechange = function () {
                if (xhr.readyState == 4) {
                    resolve(xhr);
                }
            }

            xhr.ontimeout = function () {
                SDKLogger.log(Levels.ERROR, Constants.TIME_OUT);
            }
        })
    }

    async setQueryParams(parameters) {
        var params;

        parameters.forEach(function (value, key) {
            if (parameters.has(key)) {
                if (params) {
                    params = params + key + '=' + encodeURI(value) + '&';
                }
                else {
                    params = key + '=' + encodeURI(value) + '&';
                }
            }
        });

        return this._url + '?' + params.substring(0, params.length - 1);
    }

    async setContentTypeHeader() {
        let apiURL = this._url;

        let __contentType = this._contentType;

        for (let url of Constants.SET_TO_CONTENT_TYPE) {
            if (apiURL.includes(url)) {
                this.addHeader(Constants.CONTENT_TYPE, __contentType);

                return;
            }
        }
    }

    toString() {
        let headers = new Map(this._headers);

        headers.set(Constants.AUTHORIZATION, Constants.CANT_DISCLOSE);

        let headerMapString = JSON.stringify(headers, (key, value) => (value instanceof Map ? [...value] : value));

        let paramMapString = JSON.stringify(this._parameters, (key, value) => (value instanceof Map ? [...value] : value));

        return this._requestMethod + " - " + Constants.URL_NAME + " = " + this._url + " , " + Constants.HEADERS + " = " + headerMapString + " , " + Constants.PARAMS + " = " + paramMapString + ".";
    }

    async proxyLog(requestProxy) {
        return Constants.PROXY_SETTINGS.concat(Constants.PROXY_HOST).concat(requestProxy.getHost()).concat(" , ").concat(Constants.PROXY_PORT).concat(requestProxy.getPort().toString());;
    }
}

/**
 * This class converts JSON value to the expected data type.
 */
class DataTypeConverter {
    /**
     * This method is to initialize the PreConverter and PostConverter lambda functions.
     */
    static init() {
        if (DataTypeConverter.preConverterMap.size != 0 && DataTypeConverter.postConverterMap.size != 0) {
            return;
        }

        var string = (obj) => {
            return obj.toString();
        }

        var integer = (obj) => {
            return parseInt(obj);
        }

        var long = (obj) => {
            return obj.toString() != Constants.NULL_VALUE ? BigInt(obj) : null;
        }

        var longToString = (obj) => {
            return obj.toString()
        }

        var bool = (obj) => {
            return Boolean(obj);
        }

        var stringToDateTime = (obj) => {
            return new Date(obj);
        }

        var dateTimeToString = (obj) => {
            return obj.toISOString().split('.')[0] + "Z";
        }

        var dateToString = (obj) => {
            return obj.toISOString().split('T')[0];
        }

        var stringToDate = (obj) => {
            return new Date(obj);
        }

        var double = (obj) => {
            return parseFloat(obj.toString());
        }

        var preObject = (obj) => {
            return this.preConvertObjectData(obj);
        }

        var postObject = (obj) => {
            return this.postConvertObjectData(obj);
        }

        this.addToMap(Constants.STRING_NAMESPACE, string, string);

        this.addToMap(Constants.INTEGER_NAMESPACE, integer, integer);

        this.addToMap(Constants.LONG_NAMESPACE, long, longToString);

        this.addToMap(Constants.BOOLEAN_NAMESPACE, bool, bool);

        this.addToMap(Constants.DATE_NAMESPACE, stringToDate, dateToString);

        this.addToMap(Constants.DATETIME_NAMESPACE, stringToDateTime, dateTimeToString);

        this.addToMap(Constants.DOUBLE_NAMESPACE, double, double);

        this.addToMap(Constants.FLOAT_NAMESPACE, double, double);

        this.addToMap(Constants.OBJECT_NAMESPACE, preObject, postObject);
    }

    static preConvertObjectData(obj) {
        return obj;
    }

    static postConvertObjectData(obj) {
        if (Array.isArray(obj)) {

            let list = [];

            for (let data of obj) {
                if (data instanceof Date) {
                    if (data.getHours() == 0 && data.getMinutes() == 0 && data.getSeconds() == 0) {
                        list.push(this.postConvert(data, Constants.DATE_NAMESPACE));
                    }
                    else {
                        list.push(this.postConvert(data, Constants.DATETIME_NAMESPACE));
                    }
                }
                else if (data instanceof Map) {
                    this.postConvertObjectData(data);
                }
                else {
                    list.push(data);
                }
            }

            return list;
        }
        else if (obj instanceof Map) {
            let requestObject = {};

            for (let key of Array.from(obj.keys())) {
                let value = obj.get(key);

                if (Array.isArray(value)) {
                    requestObject[key] = this.postConvertObjectData(value);
                }
                else if (value instanceof Date) {
                    if (value.getHours() == 0 && value.getMinutes() == 0 && value.getSeconds() == 0) {
                        requestObject[key] = this.postConvert(value, Constants.DATE_NAMESPACE);
                    }
                    else {
                        requestObject[key] = this.postConvert(value, Constants.DATETIME_NAMESPACE);
                    }
                }
                else if (value instanceof Map) {
                    requestObject[key] = this.postConvertObjectData(value);
                }
                else {
                    requestObject[key] = value;
                }
            }

            return requestObject;
        }
        else if (obj instanceof Date) {
            if (obj.getHours() == 0 && obj.getMinutes() == 0 && obj.getSeconds() == 0) {
                return this.postConvert(obj, Constants.DATE_NAMESPACE);
            }
            else {
                return this.postConvert(obj, Constants.DATETIME_NAMESPACE);
            }
        }
        else {
            return obj;
        }
    }

    /**
     * This method is to add PreConverter and PostConverter instance.
     * @param {string} name A String containing the data type class name.
     * @param {Map} preConverter A PreConverter Map.
     * @param {Map} postConverter A PostConverter Map.
     */
    static addToMap(name, preConverter, postConverter) {
        DataTypeConverter.preConverterMap.set(name, preConverter);

        DataTypeConverter.postConverterMap.set(name, postConverter);
    }

    /**
     * This method is to convert JSON value to expected data value.
     * @param {object} obj - An Object containing the JSON value.
     * @param {string} type - A String containing the expected method return type.
     * @throws {Error}
     */
    static preConvert(obj, type) {
        this.init();

        if (DataTypeConverter.preConverterMap.has(type)) {
            return DataTypeConverter.preConverterMap.get(type)(obj);
        }

        return obj;
    }

    /**
     * This method to convert JavaScript data to JSON data value.
     * @param {object} obj - An object containing the JavaScript data value.
     * @param {string} type - A String containing the expected method return type.
     * @throws {Error}
     */
    static postConvert(obj, type) {
        this.init();

        if (DataTypeConverter.postConverterMap.has(type)) {
            return DataTypeConverter.postConverterMap.get(type)(obj);
        }

        return obj;
    }
}

DataTypeConverter.preConverterMap = new Map();

DataTypeConverter.postConverterMap = new Map();

var StreamWrapper = {
    Model: {
        /**
         * This class handles the file stream and name.
         */
        StreamWrapper: class {
            /**
             * Creates a StreamWrapper class instance with the specified parameters.
             * @param {string} name A String containing the file name.
             * @param {stream} Stream A object containing the file stream
             */
            constructor(name = null, stream = null) {
                this._name = null;

                this._stream = null;

                try {
                    (async () => {
                        this._name = name !== null ? name : stream.name;

                        this._stream = stream;
                    })()
                }
                catch (e) {
                    throw new SDKException(Constants.FILE_ERROR, Constants.FILE_DOES_NOT_EXISTS);
                }
            }

            /**
             * This is a getter method to get the file name.
             * @returns {string} A String representing the file name.
             */
            getName() {
                return this._name;
            }

            /**
             * This is a setter method to set the file name.
             * @returns {string} A String representing the file name.
             */
            setName(name) {
                this._name = name;
            }

            /**
             * This is a getter method to get the file input stream.
             */
            getStream() {
                return this._stream;
            }

            /**
             * This is a setter method to set the file input stream.
             */
            setStream(stream) {
                this._stream = stream;
            }
        }
    }
}


/**
 * This class is the common API response object.
 */
class APIResponse {
    /**
     * Creates an APIResponse class instance with the specified parameters.
     * @param {Map} headers A Map containing the API response headers.
     * @param {String} statusCode A String containing the API response HTTP status code.
     * @param {object} dataObject A Object containing the API response POJO class instance.
     */
    constructor(headers, statusCode, dataObject) {
        this._headers = headers;

        this._statusCode = statusCode;

        this._dataObject = dataObject;
    }

    /**
     * This is a getter method to get API response headers.
     * @returns {Map} A Map representing the API response headers.
     */
    getHeaders() {
        return this._headers;
    }

    /**
     * This is a getter method to get the API response HTTP status code.
     * @returns {String} A String representing the API response HTTP status code.
     */
    getStatusCode() {
        return this._statusCode;
    }

    /**
     * This method to get an API response POJO class instance.
     * @returns {object} A POJO class instance.
     */
    getObject() {
        return this._dataObject;
    }
}

/**
 * The abstract class represents the properties of Zoho CRM Environment.
 */
var Environment = class {
    /**
     * Creates an instance of Environment with the given parameters.
     * @param {*} url A String containing the Zoho CRM API URL.
     * @param {*} accountsUrl A String containing the accounts URL.
     * @param {*} fileUploadUrl A String containing the file Upload URL.
    */
    constructor(url, accountsUrl, fileUploadUrl) {
        this.url = url;

        this.accountsUrl = accountsUrl;

        this.fileUploadUrl = fileUploadUrl;
    }

    /**
     * This method to get Zoho CRM API URL.
     * @returns {String} A String representing the Zoho CRM API URL.
     */
    getUrl() {
        return this.url;
    }

    /**
     * This method to get Zoho CRM Accounts URL.
     * @returns {String} A String representing the accounts URL.
     */
    getAccountsUrl() {
        return this.accountsUrl;
    }

    /**
     * This method to get Zoho CRM File Upload URL.
     * @returns {String} A String representing the File Upload URL.
     */
    getFileUploadUrl() {
        return this.fileUploadUrl;
    }
}

/**
 * The abstract class represents the properties of Zoho CRM DataCenter.
 */
var DataCenter = {
    /**
     * This class represents the properties of Zoho CRM in AU Domain.
     */
    AU: {
        /**
         * This Environment class instance represents the Zoho CRM Production Environment in AU Domain.
         */
        PRODUCTION: function () {
            return new Environment("https://www.zohoapis.com.au", DataCenter.AU.getIAMUrl(), DataCenter.AU.getFileUploadUrl());
        },

        /**
         * This Environment class instance represents the Zoho CRM Sandbox Environment in AU Domain.
         */
        SANDBOX: function () {
            return new Environment("https://sandbox.zohoapis.com.au", DataCenter.AU.getIAMUrl(), DataCenter.AU.getFileUploadUrl());
        },

        /**
         * This Environment class instance represents the Zoho CRM Developer Environment in AU Domain.
         */
        DEVELOPER: function () {
            return new Environment("https://developer.zohoapis.com.au", DataCenter.AU.getIAMUrl(), DataCenter.AU.getFileUploadUrl());
        },

        /**
         * This method to get accounts URL. URL to be used when calling an OAuth accounts.
         * @returns {String} A String representing the accounts URL.
         */
        getIAMUrl() {
            return "https://accounts.zoho.com.au/oauth/v2/auth";
        },

        /**
         * The method to get File Upload URL.
         * @returns {String} A String representing the accounts URL.
         */
        getFileUploadUrl() {
            return "https://content.zohoapis.com.au";
        }
    },

    /**
     * This class represents the properties of Zoho CRM in CN Domain.
     */
    CN: {
        /**
         * This Environment class instance represents the Zoho CRM Production Environment in CN Domain.
         */
        PRODUCTION: function () {
            return new Environment("https://www.zohoapis.com.cn", DataCenter.CN.getIAMUrl(), DataCenter.CN.getFileUploadUrl());
        },

        /**
         * This Environment class instance represents the Zoho CRM Sandbox Environment in CN Domain.
         */
        SANDBOX: function () {
            return new Environment("https://sandbox.zohoapis.com.cn", DataCenter.CN.getIAMUrl(), DataCenter.CN.getFileUploadUrl());
        },

        /**
         * This Environment class instance represents the Zoho CRM Developer Environment in CN Domain.
         */
        DEVELOPER: function () {
            return new Environment("https://developer.zohoapis.com.cn", DataCenter.CN.getIAMUrl(), DataCenter.CN.getFileUploadUrl());
        },

        /**
         * This method to get accounts URL. URL to be used when calling an OAuth accounts.
         * @returns {String} A String representing the accounts URL.
         */
        getIAMUrl() {
            return "https://accounts.zoho.com.cn/oauth/v2/auth";
        },

        /**
         * The method to get File Upload URL.
         * @returns {String} A String representing the accounts URL.
         */
        getFileUploadUrl() {
            return "https://content.zohoapis.com.cn";
        }
    },

    /**
     * This class represents the properties of Zoho CRM in EU Domain.
     */
    EU: {
        /**
         * This Environment class instance represents the Zoho CRM Production Environment in EU Domain.
         */
        PRODUCTION: function () {
            return new Environment("https://www.zohoapis.eu", DataCenter.EU.getIAMUrl(), DataCenter.EU.getFileUploadUrl());
        },

        /**
         * This Environment class instance represents the Zoho CRM Sandbox Environment in EU Domain.
         */
        SANDBOX: function () {
            return new Environment("https://sandbox.zohoapis.eu", DataCenter.EU.getIAMUrl(), DataCenter.EU.getFileUploadUrl());
        },

        /**
         * This Environment class instance represents the Zoho CRM Developer Environment in EU Domain.
         */
        DEVELOPER: function () {
            return new Environment("https://developer.zohoapis.eu", DataCenter.EU.getIAMUrl(), DataCenter.EU.getFileUploadUrl());
        },

        /**
         * This method to get accounts URL. URL to be used when calling an OAuth accounts.
         * @returns {String} A String representing the accounts URL.
         */
        getIAMUrl() {
            return "https://accounts.zoho.eu/oauth/v2/auth";
        },

        /**
         * The method to get File Upload URL.
         * @returns {String} A String representing the accounts URL.
         */
        getFileUploadUrl() {
            return "https://content.zohoapis.eu";
        }
    },

    /**
     * This class represents the properties of Zoho CRM in IN Domain.
     */
    IN: {
        /**
         * This Environment class instance represents the Zoho CRM Production Environment in IN Domain.
         */
        PRODUCTION: function () {
            return new Environment("https://www.zohoapis.in", DataCenter.IN.getIAMUrl(), DataCenter.IN.getFileUploadUrl());
        },

        /**
         * This Environment class instance represents the Zoho CRM Sandbox Environment in IN Domain.
         */
        SANDBOX: function () {
            return new Environment("https://sandbox.zohoapis.in", DataCenter.IN.getIAMUrl(), DataCenter.IN.getFileUploadUrl());
        },

        /**
         * This Environment class instance represents the Zoho CRM Developer Environment in IN Domain.
         */
        DEVELOPER: function () {
            return new Environment("https://developer.zohoapis.in", DataCenter.IN.getIAMUrl(), DataCenter.IN.getFileUploadUrl());
        },

        /**
         * This method to get accounts URL. URL to be used when calling an OAuth accounts.
         * @returns {String} A String representing the accounts URL.
         */
        getIAMUrl() {
            return "https://accounts.zoho.in/oauth/v2/auth";
        },

        /**
         * The method to get File Upload URL.
         * @returns {String} A String representing the accounts URL.
         */
        getFileUploadUrl() {
            return "https://content.zohoapis.in";
        }
    },

    /**
     * This class represents the properties of Zoho CRM in US Domain.
     */
    US: {
        /**
         * This Environment class instance represents the Zoho CRM Production Environment in US Domain.
         */
        PRODUCTION: function () {
            return new Environment("https://www.zohoapis.com", DataCenter.US.getIAMUrl(), DataCenter.US.getFileUploadUrl());
        },

        /**
         * This Environment class instance represents the Zoho CRM Sandbox Environment in US Domain.
         */
        SANDBOX: function () {
            return new Environment("https://sandbox.zohoapis.com", DataCenter.US.getIAMUrl(), DataCenter.US.getFileUploadUrl());
        },

        /**
         * This Environment class instance represents the Zoho CRM Developer Environment in US Domain.
         */
        DEVELOPER: function () {
            return new Environment("https://developer.zohoapis.com", DataCenter.US.getIAMUrl(), DataCenter.US.getFileUploadUrl());
        },

        /**
         * This method to get accounts URL. URL to be used when calling an OAuth accounts.
         * @returns {String} A String representing the accounts URL.
         */
        getIAMUrl() {
            return "https://accounts.zoho.com/oauth/v2/auth";
        },

        /**
         * The method to get File Upload URL.
         * @returns {String} A String representing the accounts URL.
         */
        getFileUploadUrl() {
            return "https://content.zohoapis.com";
        }
    }
}

ZCRM.Currency = {
	Model : {
		ActionHandler : class{
			constructor(){

			}


		},

		ActionResponse : class{
			constructor(){

			}


		},

		BaseCurrencyActionHandler : class{
			constructor(){

			}


		},

		ResponseHandler : class{
			constructor(){

			}


		},

		Currency : class{
			constructor(){

				this.symbol=null;
				this.createdTime=null;
				this.isActive=null;
				this.exchangeRate=null;
				this.format=null;
				this.createdBy=null;
				this.prefixSymbol=null;
				this.isBase=null;
				this.modifiedTime=null;
				this.name=null;
				this.modifiedBy=null;
				this.id=null;
				this.isoCode=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the symbol
			 * @returns {String} A String representing the symbol
			 */
			getSymbol()	{
				return this.symbol;

			}

			/**
			 * The method to set the value to symbol
			 * @param {String} symbol A String
			 */
			setSymbol(symbol)	{
				if((symbol != null) && (!(Object.prototype.toString.call(symbol) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: symbol EXPECTED TYPE: String", null, null);
				}
				this.symbol = symbol;
				this.keyModified.set("symbol", 1);

			}

			/**
			 * The method to get the createdTime
			 * @returns {OffsetDateTime} An instance of OffsetDateTime
			 */
			getCreatedTime()	{
				return this.createdTime;

			}

			/**
			 * The method to set the value to createdTime
			 * @param {OffsetDateTime} createdTime An instance of OffsetDateTime
			 */
			setCreatedTime(createdTime)	{
				if((createdTime != null) && (!(createdTime instanceof Date))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: createdTime EXPECTED TYPE: Date", null, null);
				}
				this.createdTime = createdTime;
				this.keyModified.set("created_time", 1);

			}

			/**
			 * The method to get the isActive
			 * @returns {Boolean} A Boolean representing the isActive
			 */
			getIsActive()	{
				return this.isActive;

			}

			/**
			 * The method to set the value to isActive
			 * @param {Boolean} isActive A Boolean
			 */
			setIsActive(isActive)	{
				if((isActive != null) && (!(Object.prototype.toString.call(isActive) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: isActive EXPECTED TYPE: Boolean", null, null);
				}
				this.isActive = isActive;
				this.keyModified.set("is_active", 1);

			}

			/**
			 * The method to get the exchangeRate
			 * @returns {String} A String representing the exchangeRate
			 */
			getExchangeRate()	{
				return this.exchangeRate;

			}

			/**
			 * The method to set the value to exchangeRate
			 * @param {String} exchangeRate A String
			 */
			setExchangeRate(exchangeRate)	{
				if((exchangeRate != null) && (!(Object.prototype.toString.call(exchangeRate) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: exchangeRate EXPECTED TYPE: String", null, null);
				}
				this.exchangeRate = exchangeRate;
				this.keyModified.set("exchange_rate", 1);

			}

			/**
			 * The method to get the format
			 * @returns {Format} An instance of Format
			 */
			getFormat()	{
				return this.format;

			}

			/**
			 * The method to set the value to format
			 * @param {Format} format An instance of Format
			 */
			setFormat(format)	{
				if((format != null) && (!(format instanceof ZCRM.Currency.Model.Format))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: format EXPECTED TYPE: Format", null, null);
				}
				this.format = format;
				this.keyModified.set("format", 1);

			}

			/**
			 * The method to get the createdBy
			 * @returns {User} An instance of User
			 */
			getCreatedBy()	{
				return this.createdBy;

			}

			/**
			 * The method to set the value to createdBy
			 * @param {User} createdBy An instance of User
			 */
			setCreatedBy(createdBy)	{
				if((createdBy != null) && (!(createdBy instanceof ZCRM.User.Model.User))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: createdBy EXPECTED TYPE: User", null, null);
				}
				this.createdBy = createdBy;
				this.keyModified.set("created_by", 1);

			}

			/**
			 * The method to get the prefixSymbol
			 * @returns {Boolean} A Boolean representing the prefixSymbol
			 */
			getPrefixSymbol()	{
				return this.prefixSymbol;

			}

			/**
			 * The method to set the value to prefixSymbol
			 * @param {Boolean} prefixSymbol A Boolean
			 */
			setPrefixSymbol(prefixSymbol)	{
				if((prefixSymbol != null) && (!(Object.prototype.toString.call(prefixSymbol) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: prefixSymbol EXPECTED TYPE: Boolean", null, null);
				}
				this.prefixSymbol = prefixSymbol;
				this.keyModified.set("prefix_symbol", 1);

			}

			/**
			 * The method to get the isBase
			 * @returns {Boolean} A Boolean representing the isBase
			 */
			getIsBase()	{
				return this.isBase;

			}

			/**
			 * The method to set the value to isBase
			 * @param {Boolean} isBase A Boolean
			 */
			setIsBase(isBase)	{
				if((isBase != null) && (!(Object.prototype.toString.call(isBase) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: isBase EXPECTED TYPE: Boolean", null, null);
				}
				this.isBase = isBase;
				this.keyModified.set("is_base", 1);

			}

			/**
			 * The method to get the modifiedTime
			 * @returns {OffsetDateTime} An instance of OffsetDateTime
			 */
			getModifiedTime()	{
				return this.modifiedTime;

			}

			/**
			 * The method to set the value to modifiedTime
			 * @param {OffsetDateTime} modifiedTime An instance of OffsetDateTime
			 */
			setModifiedTime(modifiedTime)	{
				if((modifiedTime != null) && (!(modifiedTime instanceof Date))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modifiedTime EXPECTED TYPE: Date", null, null);
				}
				this.modifiedTime = modifiedTime;
				this.keyModified.set("modified_time", 1);

			}

			/**
			 * The method to get the name
			 * @returns {String} A String representing the name
			 */
			getName()	{
				return this.name;

			}

			/**
			 * The method to set the value to name
			 * @param {String} name A String
			 */
			setName(name)	{
				if((name != null) && (!(Object.prototype.toString.call(name) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: name EXPECTED TYPE: String", null, null);
				}
				this.name = name;
				this.keyModified.set("name", 1);

			}

			/**
			 * The method to get the modifiedBy
			 * @returns {User} An instance of User
			 */
			getModifiedBy()	{
				return this.modifiedBy;

			}

			/**
			 * The method to set the value to modifiedBy
			 * @param {User} modifiedBy An instance of User
			 */
			setModifiedBy(modifiedBy)	{
				if((modifiedBy != null) && (!(modifiedBy instanceof ZCRM.User.Model.User))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modifiedBy EXPECTED TYPE: User", null, null);
				}
				this.modifiedBy = modifiedBy;
				this.keyModified.set("modified_by", 1);

			}

			/**
			 * The method to get the id
			 * @returns {Long} A BigInt representing the id
			 */
			getId()	{
				return this.id;

			}

			/**
			 * The method to set the value to id
			 * @param {Long} id A BigInt
			 */
			setId(id)	{
				if((id != null) && (!(Object.prototype.toString.call(id) == "[object BigInt]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
				}
				this.id = id;
				this.keyModified.set("id", 1);

			}

			/**
			 * The method to get the isoCode
			 * @returns {String} A String representing the isoCode
			 */
			getIsoCode()	{
				return this.isoCode;

			}

			/**
			 * The method to set the value to isoCode
			 * @param {String} isoCode A String
			 */
			setIsoCode(isoCode)	{
				if((isoCode != null) && (!(Object.prototype.toString.call(isoCode) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: isoCode EXPECTED TYPE: String", null, null);
				}
				this.isoCode = isoCode;
				this.keyModified.set("iso_code", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		ResponseWrapper : class{
			constructor(){

				this.currencies=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the currencies
			 * @returns {List} An Array representing the currencies
			 */
			getCurrencies()	{
				return this.currencies;

			}

			/**
			 * The method to set the value to currencies
			 * @param {List} currencies An Array
			 */
			setCurrencies(currencies)	{
				if((currencies != null) && (!(Object.prototype.toString.call(currencies) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: currencies EXPECTED TYPE: Array", null, null);
				}
				this.currencies = currencies;
				this.keyModified.set("currencies", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		SuccessResponse : class{
			constructor(){

				this.status=null;
				this.code=null;
				this.message=null;
				this.details=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		BaseCurrencyWrapper : class{
			constructor(){

				this.baseCurrency=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the baseCurrency
			 * @returns {Currency} An instance of Currency
			 */
			getBaseCurrency()	{
				return this.baseCurrency;

			}

			/**
			 * The method to set the value to baseCurrency
			 * @param {Currency} baseCurrency An instance of Currency
			 */
			setBaseCurrency(baseCurrency)	{
				if((baseCurrency != null) && (!(baseCurrency instanceof ZCRM.Currency.Model.Currency))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: baseCurrency EXPECTED TYPE: Currency", null, null);
				}
				this.baseCurrency = baseCurrency;
				this.keyModified.set("base_currency", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		ActionWrapper : class{
			constructor(){

				this.currencies=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the currencies
			 * @returns {List} An Array representing the currencies
			 */
			getCurrencies()	{
				return this.currencies;

			}

			/**
			 * The method to set the value to currencies
			 * @param {List} currencies An Array
			 */
			setCurrencies(currencies)	{
				if((currencies != null) && (!(Object.prototype.toString.call(currencies) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: currencies EXPECTED TYPE: Array", null, null);
				}
				this.currencies = currencies;
				this.keyModified.set("currencies", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		APIException : class{
			constructor(){

				this.status=null;
				this.code=null;
				this.message=null;
				this.details=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		BodyWrapper : class{
			constructor(){

				this.currencies=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the currencies
			 * @returns {List} An Array representing the currencies
			 */
			getCurrencies()	{
				return this.currencies;

			}

			/**
			 * The method to set the value to currencies
			 * @param {List} currencies An Array
			 */
			setCurrencies(currencies)	{
				if((currencies != null) && (!(Object.prototype.toString.call(currencies) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: currencies EXPECTED TYPE: Array", null, null);
				}
				this.currencies = currencies;
				this.keyModified.set("currencies", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		Format : class{
			constructor(){

				this.decimalSeparator=null;
				this.thousandSeparator=null;
				this.decimalPlaces=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the decimalSeparator
			 * @returns {Choice} An instance of Choice
			 */
			getDecimalSeparator()	{
				return this.decimalSeparator;

			}

			/**
			 * The method to set the value to decimalSeparator
			 * @param {Choice} decimalSeparator An instance of Choice
			 */
			setDecimalSeparator(decimalSeparator)	{
				if((decimalSeparator != null) && (!(decimalSeparator instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: decimalSeparator EXPECTED TYPE: Choice", null, null);
				}
				this.decimalSeparator = decimalSeparator;
				this.keyModified.set("decimal_separator", 1);

			}

			/**
			 * The method to get the thousandSeparator
			 * @returns {Choice} An instance of Choice
			 */
			getThousandSeparator()	{
				return this.thousandSeparator;

			}

			/**
			 * The method to set the value to thousandSeparator
			 * @param {Choice} thousandSeparator An instance of Choice
			 */
			setThousandSeparator(thousandSeparator)	{
				if((thousandSeparator != null) && (!(thousandSeparator instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: thousandSeparator EXPECTED TYPE: Choice", null, null);
				}
				this.thousandSeparator = thousandSeparator;
				this.keyModified.set("thousand_separator", 1);

			}

			/**
			 * The method to get the decimalPlaces
			 * @returns {Choice} An instance of Choice
			 */
			getDecimalPlaces()	{
				return this.decimalPlaces;

			}

			/**
			 * The method to set the value to decimalPlaces
			 * @param {Choice} decimalPlaces An instance of Choice
			 */
			setDecimalPlaces(decimalPlaces)	{
				if((decimalPlaces != null) && (!(decimalPlaces instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: decimalPlaces EXPECTED TYPE: Choice", null, null);
				}
				this.decimalPlaces = decimalPlaces;
				this.keyModified.set("decimal_places", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		BaseCurrencyActionWrapper : class{
			constructor(){

				this.baseCurrency=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the baseCurrency
			 * @returns {ActionResponse} An instance of ActionResponse
			 */
			getBaseCurrency()	{
				return this.baseCurrency;

			}

			/**
			 * The method to set the value to baseCurrency
			 * @param {ActionResponse} baseCurrency An instance of ActionResponse
			 */
			setBaseCurrency(baseCurrency)	{
				if((baseCurrency != null) && (!(baseCurrency instanceof ZCRM.Currency.Model.ActionResponse))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: baseCurrency EXPECTED TYPE: ActionResponse", null, null);
				}
				this.baseCurrency = baseCurrency;
				this.keyModified.set("base_currency", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		}
	},
	Operations : class {
		constructor(){

		}

		/**
		 * The method to get currencies
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getCurrencies(){
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/org/currencies");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			return handlerInstance.apiCall("Currency.Model.ResponseHandler", "application/json");

		}

		/**
		 * The method to add currencies
		 * @param {BodyWrapper} request An instance of BodyWrapper
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async addCurrencies(request){
			if((request != null) && (!(request instanceof ZCRM.Currency.Model.BodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: BodyWrapper", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/org/currencies");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_POST);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_CREATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			handlerInstance.setMandatoryChecker(true);
			return handlerInstance.apiCall("Currency.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to update currencies
		 * @param {BodyWrapper} request An instance of BodyWrapper
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async updateCurrencies(request){
			if((request != null) && (!(request instanceof ZCRM.Currency.Model.BodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: BodyWrapper", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/org/currencies");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_PUT);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_UPDATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			handlerInstance.setMandatoryChecker(true);
			return handlerInstance.apiCall("Currency.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to enable multiple currencies
		 * @param {BaseCurrencyWrapper} request An instance of BaseCurrencyWrapper
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async enableMultipleCurrencies(request){
			if((request != null) && (!(request instanceof ZCRM.Currency.Model.BaseCurrencyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: BaseCurrencyWrapper", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/org/currencies/actions/enable");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_POST);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_CREATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			handlerInstance.setMandatoryChecker(true);
			return handlerInstance.apiCall("Currency.Model.BaseCurrencyActionHandler", "application/json");

		}

		/**
		 * The method to update base currency
		 * @param {BaseCurrencyWrapper} request An instance of BaseCurrencyWrapper
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async updateBaseCurrency(request){
			if((request != null) && (!(request instanceof ZCRM.Currency.Model.BaseCurrencyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: BaseCurrencyWrapper", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/org/currencies/actions/enable");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_PUT);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_UPDATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			handlerInstance.setMandatoryChecker(true);
			return handlerInstance.apiCall("Currency.Model.BaseCurrencyActionHandler", "application/json");

		}

		/**
		 * The method to get currency
		 * @param {Long} id A BigInt
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getCurrency(id){
			if((!(Object.prototype.toString.call(id) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/org/currencies/");
			apiPath = apiPath.concat(id.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			return handlerInstance.apiCall("Currency.Model.ResponseHandler", "application/json");

		}

		/**
		 * The method to update currency
		 * @param {Long} id A BigInt
		 * @param {BodyWrapper} request An instance of BodyWrapper
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async updateCurrency(id, request){
			if((!(Object.prototype.toString.call(id) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
			}
			if((request != null) && (!(request instanceof ZCRM.Currency.Model.BodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: BodyWrapper", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/org/currencies/");
			apiPath = apiPath.concat(id.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_PUT);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_UPDATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			return handlerInstance.apiCall("Currency.Model.ActionHandler", "application/json");

		}
	},

}

ZCRM.Territory = {
	Model : {
		ResponseHandler : class{
			constructor(){

			}


		},

		Territory : class{
			constructor(){

				this.createdTime=null;
				this.modifiedTime=null;
				this.manager=null;
				this.parentId=null;
				this.criteria=null;
				this.name=null;
				this.modifiedBy=null;
				this.description=null;
				this.id=null;
				this.createdBy=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the createdTime
			 * @returns {OffsetDateTime} An instance of OffsetDateTime
			 */
			getCreatedTime()	{
				return this.createdTime;

			}

			/**
			 * The method to set the value to createdTime
			 * @param {OffsetDateTime} createdTime An instance of OffsetDateTime
			 */
			setCreatedTime(createdTime)	{
				if((createdTime != null) && (!(createdTime instanceof Date))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: createdTime EXPECTED TYPE: Date", null, null);
				}
				this.createdTime = createdTime;
				this.keyModified.set("created_time", 1);

			}

			/**
			 * The method to get the modifiedTime
			 * @returns {OffsetDateTime} An instance of OffsetDateTime
			 */
			getModifiedTime()	{
				return this.modifiedTime;

			}

			/**
			 * The method to set the value to modifiedTime
			 * @param {OffsetDateTime} modifiedTime An instance of OffsetDateTime
			 */
			setModifiedTime(modifiedTime)	{
				if((modifiedTime != null) && (!(modifiedTime instanceof Date))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modifiedTime EXPECTED TYPE: Date", null, null);
				}
				this.modifiedTime = modifiedTime;
				this.keyModified.set("modified_time", 1);

			}

			/**
			 * The method to get the manager
			 * @returns {User} An instance of User
			 */
			getManager()	{
				return this.manager;

			}

			/**
			 * The method to set the value to manager
			 * @param {User} manager An instance of User
			 */
			setManager(manager)	{
				if((manager != null) && (!(manager instanceof ZCRM.User.Model.User))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: manager EXPECTED TYPE: User", null, null);
				}
				this.manager = manager;
				this.keyModified.set("manager", 1);

			}

			/**
			 * The method to get the parentId
			 * @returns {String} A String representing the parentId
			 */
			getParentId()	{
				return this.parentId;

			}

			/**
			 * The method to set the value to parentId
			 * @param {String} parentId A String
			 */
			setParentId(parentId)	{
				if((parentId != null) && (!(Object.prototype.toString.call(parentId) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: parentId EXPECTED TYPE: String", null, null);
				}
				this.parentId = parentId;
				this.keyModified.set("parent_id", 1);

			}

			/**
			 * The method to get the criteria
			 * @returns {Criteria} An instance of Criteria
			 */
			getCriteria()	{
				return this.criteria;

			}

			/**
			 * The method to set the value to criteria
			 * @param {Criteria} criteria An instance of Criteria
			 */
			setCriteria(criteria)	{
				if((criteria != null) && (!(criteria instanceof ZCRM.CustomView.Model.Criteria))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: criteria EXPECTED TYPE: Criteria", null, null);
				}
				this.criteria = criteria;
				this.keyModified.set("criteria", 1);

			}

			/**
			 * The method to get the name
			 * @returns {String} A String representing the name
			 */
			getName()	{
				return this.name;

			}

			/**
			 * The method to set the value to name
			 * @param {String} name A String
			 */
			setName(name)	{
				if((name != null) && (!(Object.prototype.toString.call(name) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: name EXPECTED TYPE: String", null, null);
				}
				this.name = name;
				this.keyModified.set("name", 1);

			}

			/**
			 * The method to get the modifiedBy
			 * @returns {User} An instance of User
			 */
			getModifiedBy()	{
				return this.modifiedBy;

			}

			/**
			 * The method to set the value to modifiedBy
			 * @param {User} modifiedBy An instance of User
			 */
			setModifiedBy(modifiedBy)	{
				if((modifiedBy != null) && (!(modifiedBy instanceof ZCRM.User.Model.User))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modifiedBy EXPECTED TYPE: User", null, null);
				}
				this.modifiedBy = modifiedBy;
				this.keyModified.set("modified_by", 1);

			}

			/**
			 * The method to get the description
			 * @returns {String} A String representing the description
			 */
			getDescription()	{
				return this.description;

			}

			/**
			 * The method to set the value to description
			 * @param {String} description A String
			 */
			setDescription(description)	{
				if((description != null) && (!(Object.prototype.toString.call(description) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: description EXPECTED TYPE: String", null, null);
				}
				this.description = description;
				this.keyModified.set("description", 1);

			}

			/**
			 * The method to get the id
			 * @returns {Long} A BigInt representing the id
			 */
			getId()	{
				return this.id;

			}

			/**
			 * The method to set the value to id
			 * @param {Long} id A BigInt
			 */
			setId(id)	{
				if((id != null) && (!(Object.prototype.toString.call(id) == "[object BigInt]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
				}
				this.id = id;
				this.keyModified.set("id", 1);

			}

			/**
			 * The method to get the createdBy
			 * @returns {User} An instance of User
			 */
			getCreatedBy()	{
				return this.createdBy;

			}

			/**
			 * The method to set the value to createdBy
			 * @param {User} createdBy An instance of User
			 */
			setCreatedBy(createdBy)	{
				if((createdBy != null) && (!(createdBy instanceof ZCRM.User.Model.User))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: createdBy EXPECTED TYPE: User", null, null);
				}
				this.createdBy = createdBy;
				this.keyModified.set("created_by", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		APIException : class{
			constructor(){

				this.code=null;
				this.status=null;
				this.message=null;
				this.details=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		ResponseWrapper : class{
			constructor(){

				this.territories=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the territories
			 * @returns {List} An Array representing the territories
			 */
			getTerritories()	{
				return this.territories;

			}

			/**
			 * The method to set the value to territories
			 * @param {List} territories An Array
			 */
			setTerritories(territories)	{
				if((territories != null) && (!(Object.prototype.toString.call(territories) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: territories EXPECTED TYPE: Array", null, null);
				}
				this.territories = territories;
				this.keyModified.set("territories", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		}
	},
	Operations : class {
		constructor(){

		}

		/**
		 * The method to get territories
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getTerritories(){
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/settings/territories");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			return handlerInstance.apiCall("Territory.Model.ResponseHandler", "application/json");

		}

		/**
		 * The method to get territory
		 * @param {Long} id A BigInt
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getTerritory(id){
			if((!(Object.prototype.toString.call(id) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/settings/territories/");
			apiPath = apiPath.concat(id.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			return handlerInstance.apiCall("Territory.Model.ResponseHandler", "application/json");

		}
	},

}

ZCRM.Record = {
	Model : {
		ResponseHandler : class{
			constructor(){

			}


		},

		ConvertActionResponse : class{
			constructor(){

			}


		},

		ConvertActionHandler : class{
			constructor(){

			}


		},

		ActionHandler : class{
			constructor(){

			}


		},

		DownloadHandler : class{
			constructor(){

			}


		},

		MassUpdateResponseHandler : class{
			constructor(){

			}


		},

		MassUpdateResponse : class{
			constructor(){

			}


		},

		ActionResponse : class{
			constructor(){

			}


		},

		MassUpdateActionHandler : class{
			constructor(){

			}


		},

		MassUpdateActionResponse : class{
			constructor(){

			}


		},

		FileHandler : class{
			constructor(){

			}


		},

		DeletedRecordsHandler : class{
			constructor(){

			}


		},

		ResponseWrapper : class{
			constructor(){

				this.data=null;
				this.info=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the data
			 * @returns {List} An Array representing the data
			 */
			getData()	{
				return this.data;

			}

			/**
			 * The method to set the value to data
			 * @param {List} data An Array
			 */
			setData(data)	{
				if((data != null) && (!(Object.prototype.toString.call(data) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: data EXPECTED TYPE: Array", null, null);
				}
				this.data = data;
				this.keyModified.set("data", 1);

			}

			/**
			 * The method to get the info
			 * @returns {Info} An instance of Info
			 */
			getInfo()	{
				return this.info;

			}

			/**
			 * The method to set the value to info
			 * @param {Info} info An instance of Info
			 */
			setInfo(info)	{
				if((info != null) && (!(info instanceof ZCRM.Record.Model.Info))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: info EXPECTED TYPE: Info", null, null);
				}
				this.info = info;
				this.keyModified.set("info", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		SuccessResponse : class{
			constructor(){

				this.status=null;
				this.code=null;
				this.duplicateField=null;
				this.action=null;
				this.message=null;
				this.details=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the duplicateField
			 * @returns {String} A String representing the duplicateField
			 */
			getDuplicateField()	{
				return this.duplicateField;

			}

			/**
			 * The method to set the value to duplicateField
			 * @param {String} duplicateField A String
			 */
			setDuplicateField(duplicateField)	{
				if((duplicateField != null) && (!(Object.prototype.toString.call(duplicateField) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: duplicateField EXPECTED TYPE: String", null, null);
				}
				this.duplicateField = duplicateField;
				this.keyModified.set("duplicate_field", 1);

			}

			/**
			 * The method to get the action
			 * @returns {Choice} An instance of Choice
			 */
			getAction()	{
				return this.action;

			}

			/**
			 * The method to set the value to action
			 * @param {Choice} action An instance of Choice
			 */
			setAction(action)	{
				if((action != null) && (!(action instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: action EXPECTED TYPE: Choice", null, null);
				}
				this.action = action;
				this.keyModified.set("action", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		ConvertActionWrapper : class{
			constructor(){

				this.data=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the data
			 * @returns {List} An Array representing the data
			 */
			getData()	{
				return this.data;

			}

			/**
			 * The method to set the value to data
			 * @param {List} data An Array
			 */
			setData(data)	{
				if((data != null) && (!(Object.prototype.toString.call(data) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: data EXPECTED TYPE: Array", null, null);
				}
				this.data = data;
				this.keyModified.set("data", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		MassUpdateBodyWrapper : class{
			constructor(){

				this.data=null;
				this.cvid=null;
				this.ids=null;
				this.territory=null;
				this.overWrite=null;
				this.criteria=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the data
			 * @returns {List} An Array representing the data
			 */
			getData()	{
				return this.data;

			}

			/**
			 * The method to set the value to data
			 * @param {List} data An Array
			 */
			setData(data)	{
				if((data != null) && (!(Object.prototype.toString.call(data) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: data EXPECTED TYPE: Array", null, null);
				}
				this.data = data;
				this.keyModified.set("data", 1);

			}

			/**
			 * The method to get the cvid
			 * @returns {String} A String representing the cvid
			 */
			getCvid()	{
				return this.cvid;

			}

			/**
			 * The method to set the value to cvid
			 * @param {String} cvid A String
			 */
			setCvid(cvid)	{
				if((cvid != null) && (!(Object.prototype.toString.call(cvid) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: cvid EXPECTED TYPE: String", null, null);
				}
				this.cvid = cvid;
				this.keyModified.set("cvid", 1);

			}

			/**
			 * The method to get the ids
			 * @returns {List} An Array representing the ids
			 */
			getIds()	{
				return this.ids;

			}

			/**
			 * The method to set the value to ids
			 * @param {List} ids An Array
			 */
			setIds(ids)	{
				if((ids != null) && (!(Object.prototype.toString.call(ids) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: ids EXPECTED TYPE: Array", null, null);
				}
				this.ids = ids;
				this.keyModified.set("ids", 1);

			}

			/**
			 * The method to get the territory
			 * @returns {Territory} An instance of Territory
			 */
			getTerritory()	{
				return this.territory;

			}

			/**
			 * The method to set the value to territory
			 * @param {Territory} territory An instance of Territory
			 */
			setTerritory(territory)	{
				if((territory != null) && (!(territory instanceof ZCRM.Record.Model.Territory))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: territory EXPECTED TYPE: Territory", null, null);
				}
				this.territory = territory;
				this.keyModified.set("territory", 1);

			}

			/**
			 * The method to get the overWrite
			 * @returns {Boolean} A Boolean representing the overWrite
			 */
			getOverWrite()	{
				return this.overWrite;

			}

			/**
			 * The method to set the value to overWrite
			 * @param {Boolean} overWrite A Boolean
			 */
			setOverWrite(overWrite)	{
				if((overWrite != null) && (!(Object.prototype.toString.call(overWrite) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: overWrite EXPECTED TYPE: Boolean", null, null);
				}
				this.overWrite = overWrite;
				this.keyModified.set("over_write", 1);

			}

			/**
			 * The method to get the criteria
			 * @returns {List} An Array representing the criteria
			 */
			getCriteria()	{
				return this.criteria;

			}

			/**
			 * The method to set the value to criteria
			 * @param {List} criteria An Array
			 */
			setCriteria(criteria)	{
				if((criteria != null) && (!(Object.prototype.toString.call(criteria) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: criteria EXPECTED TYPE: Array", null, null);
				}
				this.criteria = criteria;
				this.keyModified.set("criteria", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		APIException : class{
			constructor(){

				this.status=null;
				this.code=null;
				this.message=null;
				this.details=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		Territory : class{
			constructor(){

				this.id=null;
				this.includeChild=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the id
			 * @returns {Long} A BigInt representing the id
			 */
			getId()	{
				return this.id;

			}

			/**
			 * The method to set the value to id
			 * @param {Long} id A BigInt
			 */
			setId(id)	{
				if((id != null) && (!(Object.prototype.toString.call(id) == "[object BigInt]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
				}
				this.id = id;
				this.keyModified.set("id", 1);

			}

			/**
			 * The method to get the includeChild
			 * @returns {Boolean} A Boolean representing the includeChild
			 */
			getIncludeChild()	{
				return this.includeChild;

			}

			/**
			 * The method to set the value to includeChild
			 * @param {Boolean} includeChild A Boolean
			 */
			setIncludeChild(includeChild)	{
				if((includeChild != null) && (!(Object.prototype.toString.call(includeChild) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: includeChild EXPECTED TYPE: Boolean", null, null);
				}
				this.includeChild = includeChild;
				this.keyModified.set("include_child", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		SuccessfulConvert : class{
			constructor(){

				this.contacts=null;
				this.deals=null;
				this.accounts=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the contacts
			 * @returns {String} A String representing the contacts
			 */
			getContacts()	{
				return this.contacts;

			}

			/**
			 * The method to set the value to contacts
			 * @param {String} contacts A String
			 */
			setContacts(contacts)	{
				if((contacts != null) && (!(Object.prototype.toString.call(contacts) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: contacts EXPECTED TYPE: String", null, null);
				}
				this.contacts = contacts;
				this.keyModified.set("Contacts", 1);

			}

			/**
			 * The method to get the deals
			 * @returns {String} A String representing the deals
			 */
			getDeals()	{
				return this.deals;

			}

			/**
			 * The method to set the value to deals
			 * @param {String} deals A String
			 */
			setDeals(deals)	{
				if((deals != null) && (!(Object.prototype.toString.call(deals) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: deals EXPECTED TYPE: String", null, null);
				}
				this.deals = deals;
				this.keyModified.set("Deals", 1);

			}

			/**
			 * The method to get the accounts
			 * @returns {String} A String representing the accounts
			 */
			getAccounts()	{
				return this.accounts;

			}

			/**
			 * The method to set the value to accounts
			 * @param {String} accounts A String
			 */
			setAccounts(accounts)	{
				if((accounts != null) && (!(Object.prototype.toString.call(accounts) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: accounts EXPECTED TYPE: String", null, null);
				}
				this.accounts = accounts;
				this.keyModified.set("Accounts", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		LeadConverter : class{
			constructor(){

				this.overwrite=null;
				this.notifyLeadOwner=null;
				this.notifyNewEntityOwner=null;
				this.accounts=null;
				this.contacts=null;
				this.assignTo=null;
				this.deals=null;
				this.carryOverTags=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the overwrite
			 * @returns {Boolean} A Boolean representing the overwrite
			 */
			getOverwrite()	{
				return this.overwrite;

			}

			/**
			 * The method to set the value to overwrite
			 * @param {Boolean} overwrite A Boolean
			 */
			setOverwrite(overwrite)	{
				if((overwrite != null) && (!(Object.prototype.toString.call(overwrite) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: overwrite EXPECTED TYPE: Boolean", null, null);
				}
				this.overwrite = overwrite;
				this.keyModified.set("overwrite", 1);

			}

			/**
			 * The method to get the notifyLeadOwner
			 * @returns {Boolean} A Boolean representing the notifyLeadOwner
			 */
			getNotifyLeadOwner()	{
				return this.notifyLeadOwner;

			}

			/**
			 * The method to set the value to notifyLeadOwner
			 * @param {Boolean} notifyLeadOwner A Boolean
			 */
			setNotifyLeadOwner(notifyLeadOwner)	{
				if((notifyLeadOwner != null) && (!(Object.prototype.toString.call(notifyLeadOwner) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: notifyLeadOwner EXPECTED TYPE: Boolean", null, null);
				}
				this.notifyLeadOwner = notifyLeadOwner;
				this.keyModified.set("notify_lead_owner", 1);

			}

			/**
			 * The method to get the notifyNewEntityOwner
			 * @returns {Boolean} A Boolean representing the notifyNewEntityOwner
			 */
			getNotifyNewEntityOwner()	{
				return this.notifyNewEntityOwner;

			}

			/**
			 * The method to set the value to notifyNewEntityOwner
			 * @param {Boolean} notifyNewEntityOwner A Boolean
			 */
			setNotifyNewEntityOwner(notifyNewEntityOwner)	{
				if((notifyNewEntityOwner != null) && (!(Object.prototype.toString.call(notifyNewEntityOwner) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: notifyNewEntityOwner EXPECTED TYPE: Boolean", null, null);
				}
				this.notifyNewEntityOwner = notifyNewEntityOwner;
				this.keyModified.set("notify_new_entity_owner", 1);

			}

			/**
			 * The method to get the accounts
			 * @returns {String} A String representing the accounts
			 */
			getAccounts()	{
				return this.accounts;

			}

			/**
			 * The method to set the value to accounts
			 * @param {String} accounts A String
			 */
			setAccounts(accounts)	{
				if((accounts != null) && (!(Object.prototype.toString.call(accounts) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: accounts EXPECTED TYPE: String", null, null);
				}
				this.accounts = accounts;
				this.keyModified.set("Accounts", 1);

			}

			/**
			 * The method to get the contacts
			 * @returns {String} A String representing the contacts
			 */
			getContacts()	{
				return this.contacts;

			}

			/**
			 * The method to set the value to contacts
			 * @param {String} contacts A String
			 */
			setContacts(contacts)	{
				if((contacts != null) && (!(Object.prototype.toString.call(contacts) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: contacts EXPECTED TYPE: String", null, null);
				}
				this.contacts = contacts;
				this.keyModified.set("Contacts", 1);

			}

			/**
			 * The method to get the assignTo
			 * @returns {String} A String representing the assignTo
			 */
			getAssignTo()	{
				return this.assignTo;

			}

			/**
			 * The method to set the value to assignTo
			 * @param {String} assignTo A String
			 */
			setAssignTo(assignTo)	{
				if((assignTo != null) && (!(Object.prototype.toString.call(assignTo) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: assignTo EXPECTED TYPE: String", null, null);
				}
				this.assignTo = assignTo;
				this.keyModified.set("assign_to", 1);

			}

			/**
			 * The method to get the deals
			 * @returns {Record} An instance of Record
			 */
			getDeals()	{
				return this.deals;

			}

			/**
			 * The method to set the value to deals
			 * @param {Record} deals An instance of Record
			 */
			setDeals(deals)	{
				if((deals != null) && (!(deals instanceof ZCRM.Record.Model.Record))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: deals EXPECTED TYPE: Record", null, null);
				}
				this.deals = deals;
				this.keyModified.set("Deals", 1);

			}

			/**
			 * The method to get the carryOverTags
			 * @returns {CarryOverTags} An instance of CarryOverTags
			 */
			getCarryOverTags()	{
				return this.carryOverTags;

			}

			/**
			 * The method to set the value to carryOverTags
			 * @param {CarryOverTags} carryOverTags An instance of CarryOverTags
			 */
			setCarryOverTags(carryOverTags)	{
				if((carryOverTags != null) && (!(carryOverTags instanceof ZCRM.Record.Model.CarryOverTags))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: carryOverTags EXPECTED TYPE: CarryOverTags", null, null);
				}
				this.carryOverTags = carryOverTags;
				this.keyModified.set("carry_over_tags", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		BodyWrapper : class{
			constructor(){

				this.data=null;
				this.trigger=null;
				this.process=null;
				this.duplicateCheckFields=null;
				this.wfTrigger=null;
				this.larId=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the data
			 * @returns {List} An Array representing the data
			 */
			getData()	{
				return this.data;

			}

			/**
			 * The method to set the value to data
			 * @param {List} data An Array
			 */
			setData(data)	{
				if((data != null) && (!(Object.prototype.toString.call(data) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: data EXPECTED TYPE: Array", null, null);
				}
				this.data = data;
				this.keyModified.set("data", 1);

			}

			/**
			 * The method to get the trigger
			 * @returns {List} An Array representing the trigger
			 */
			getTrigger()	{
				return this.trigger;

			}

			/**
			 * The method to set the value to trigger
			 * @param {List} trigger An Array
			 */
			setTrigger(trigger)	{
				if((trigger != null) && (!(Object.prototype.toString.call(trigger) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: trigger EXPECTED TYPE: Array", null, null);
				}
				this.trigger = trigger;
				this.keyModified.set("trigger", 1);

			}

			/**
			 * The method to get the process
			 * @returns {List} An Array representing the process
			 */
			getProcess()	{
				return this.process;

			}

			/**
			 * The method to set the value to process
			 * @param {List} process An Array
			 */
			setProcess(process)	{
				if((process != null) && (!(Object.prototype.toString.call(process) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: process EXPECTED TYPE: Array", null, null);
				}
				this.process = process;
				this.keyModified.set("process", 1);

			}

			/**
			 * The method to get the duplicateCheckFields
			 * @returns {List} An Array representing the duplicateCheckFields
			 */
			getDuplicateCheckFields()	{
				return this.duplicateCheckFields;

			}

			/**
			 * The method to set the value to duplicateCheckFields
			 * @param {List} duplicateCheckFields An Array
			 */
			setDuplicateCheckFields(duplicateCheckFields)	{
				if((duplicateCheckFields != null) && (!(Object.prototype.toString.call(duplicateCheckFields) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: duplicateCheckFields EXPECTED TYPE: Array", null, null);
				}
				this.duplicateCheckFields = duplicateCheckFields;
				this.keyModified.set("duplicate_check_fields", 1);

			}

			/**
			 * The method to get the wfTrigger
			 * @returns {String} A String representing the wfTrigger
			 */
			getWfTrigger()	{
				return this.wfTrigger;

			}

			/**
			 * The method to set the value to wfTrigger
			 * @param {String} wfTrigger A String
			 */
			setWfTrigger(wfTrigger)	{
				if((wfTrigger != null) && (!(Object.prototype.toString.call(wfTrigger) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: wfTrigger EXPECTED TYPE: String", null, null);
				}
				this.wfTrigger = wfTrigger;
				this.keyModified.set("wf_trigger", 1);

			}

			/**
			 * The method to get the larId
			 * @returns {String} A String representing the larId
			 */
			getLarId()	{
				return this.larId;

			}

			/**
			 * The method to set the value to larId
			 * @param {String} larId A String
			 */
			setLarId(larId)	{
				if((larId != null) && (!(Object.prototype.toString.call(larId) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: larId EXPECTED TYPE: String", null, null);
				}
				this.larId = larId;
				this.keyModified.set("lar_id", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		Criteria : class{
			constructor(){

				this.comparator=null;
				this.field=null;
				this.value=null;
				this.groupOperator=null;
				this.group=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the comparator
			 * @returns {Choice} An instance of Choice
			 */
			getComparator()	{
				return this.comparator;

			}

			/**
			 * The method to set the value to comparator
			 * @param {Choice} comparator An instance of Choice
			 */
			setComparator(comparator)	{
				if((comparator != null) && (!(comparator instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: comparator EXPECTED TYPE: Choice", null, null);
				}
				this.comparator = comparator;
				this.keyModified.set("comparator", 1);

			}

			/**
			 * The method to get the field
			 * @returns {String} A String representing the field
			 */
			getField()	{
				return this.field;

			}

			/**
			 * The method to set the value to field
			 * @param {String} field A String
			 */
			setField(field)	{
				if((field != null) && (!(Object.prototype.toString.call(field) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: field EXPECTED TYPE: String", null, null);
				}
				this.field = field;
				this.keyModified.set("field", 1);

			}

			/**
			 * The method to get the value
			 * @returns {Object} An Object representing the value
			 */
			getValue()	{
				return this.value;

			}

			/**
			 * The method to set the value to value
			 * @param {Object} value An Object
			 */
			setValue(value)	{
				this.value = value;
				this.keyModified.set("value", 1);

			}

			/**
			 * The method to get the groupOperator
			 * @returns {Choice} An instance of Choice
			 */
			getGroupOperator()	{
				return this.groupOperator;

			}

			/**
			 * The method to set the value to groupOperator
			 * @param {Choice} groupOperator An instance of Choice
			 */
			setGroupOperator(groupOperator)	{
				if((groupOperator != null) && (!(groupOperator instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: groupOperator EXPECTED TYPE: Choice", null, null);
				}
				this.groupOperator = groupOperator;
				this.keyModified.set("group_operator", 1);

			}

			/**
			 * The method to get the group
			 * @returns {List} An Array representing the group
			 */
			getGroup()	{
				return this.group;

			}

			/**
			 * The method to set the value to group
			 * @param {List} group An Array
			 */
			setGroup(group)	{
				if((group != null) && (!(Object.prototype.toString.call(group) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: group EXPECTED TYPE: Array", null, null);
				}
				this.group = group;
				this.keyModified.set("group", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		MassUpdateActionWrapper : class{
			constructor(){

				this.data=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the data
			 * @returns {List} An Array representing the data
			 */
			getData()	{
				return this.data;

			}

			/**
			 * The method to set the value to data
			 * @param {List} data An Array
			 */
			setData(data)	{
				if((data != null) && (!(Object.prototype.toString.call(data) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: data EXPECTED TYPE: Array", null, null);
				}
				this.data = data;
				this.keyModified.set("data", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		Info : class{
			constructor(){

				this.perPage=null;
				this.count=null;
				this.page=null;
				this.moreRecords=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the perPage
			 * @returns {Integer} An Integer representing the perPage
			 */
			getPerPage()	{
				return this.perPage;

			}

			/**
			 * The method to set the value to perPage
			 * @param {Integer} perPage An Integer
			 */
			setPerPage(perPage)	{
				if((perPage != null) && (!(Object.prototype.toString.call(perPage) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: perPage EXPECTED TYPE: Integer", null, null);
				}
				this.perPage = perPage;
				this.keyModified.set("per_page", 1);

			}

			/**
			 * The method to get the count
			 * @returns {Integer} An Integer representing the count
			 */
			getCount()	{
				return this.count;

			}

			/**
			 * The method to set the value to count
			 * @param {Integer} count An Integer
			 */
			setCount(count)	{
				if((count != null) && (!(Object.prototype.toString.call(count) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: count EXPECTED TYPE: Integer", null, null);
				}
				this.count = count;
				this.keyModified.set("count", 1);

			}

			/**
			 * The method to get the page
			 * @returns {Integer} An Integer representing the page
			 */
			getPage()	{
				return this.page;

			}

			/**
			 * The method to set the value to page
			 * @param {Integer} page An Integer
			 */
			setPage(page)	{
				if((page != null) && (!(Object.prototype.toString.call(page) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: page EXPECTED TYPE: Integer", null, null);
				}
				this.page = page;
				this.keyModified.set("page", 1);

			}

			/**
			 * The method to get the moreRecords
			 * @returns {Boolean} A Boolean representing the moreRecords
			 */
			getMoreRecords()	{
				return this.moreRecords;

			}

			/**
			 * The method to set the value to moreRecords
			 * @param {Boolean} moreRecords A Boolean
			 */
			setMoreRecords(moreRecords)	{
				if((moreRecords != null) && (!(Object.prototype.toString.call(moreRecords) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: moreRecords EXPECTED TYPE: Boolean", null, null);
				}
				this.moreRecords = moreRecords;
				this.keyModified.set("more_records", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		FileBodyWrapper : class{
			constructor(){

				this.file=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the file
			 * @returns {StreamWrapper} An instance of StreamWrapper
			 */
			getFile()	{
				return this.file;

			}

			/**
			 * The method to set the value to file
			 * @param {StreamWrapper} file An instance of StreamWrapper
			 */
			setFile(file)	{
				if((file != null) && (!(file instanceof StreamWrapper.Model.StreamWrapper))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: file EXPECTED TYPE: StreamWrapper", null, null);
				}
				this.file = file;
				this.keyModified.set("file", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		MassUpdate : class{
			constructor(){

				this.status=null;
				this.failedCount=null;
				this.updatedCount=null;
				this.notUpdatedCount=null;
				this.totalCount=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("Status", 1);

			}

			/**
			 * The method to get the failedCount
			 * @returns {Integer} An Integer representing the failedCount
			 */
			getFailedCount()	{
				return this.failedCount;

			}

			/**
			 * The method to set the value to failedCount
			 * @param {Integer} failedCount An Integer
			 */
			setFailedCount(failedCount)	{
				if((failedCount != null) && (!(Object.prototype.toString.call(failedCount) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: failedCount EXPECTED TYPE: Integer", null, null);
				}
				this.failedCount = failedCount;
				this.keyModified.set("Failed_Count", 1);

			}

			/**
			 * The method to get the updatedCount
			 * @returns {Integer} An Integer representing the updatedCount
			 */
			getUpdatedCount()	{
				return this.updatedCount;

			}

			/**
			 * The method to set the value to updatedCount
			 * @param {Integer} updatedCount An Integer
			 */
			setUpdatedCount(updatedCount)	{
				if((updatedCount != null) && (!(Object.prototype.toString.call(updatedCount) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: updatedCount EXPECTED TYPE: Integer", null, null);
				}
				this.updatedCount = updatedCount;
				this.keyModified.set("Updated_Count", 1);

			}

			/**
			 * The method to get the notUpdatedCount
			 * @returns {Integer} An Integer representing the notUpdatedCount
			 */
			getNotUpdatedCount()	{
				return this.notUpdatedCount;

			}

			/**
			 * The method to set the value to notUpdatedCount
			 * @param {Integer} notUpdatedCount An Integer
			 */
			setNotUpdatedCount(notUpdatedCount)	{
				if((notUpdatedCount != null) && (!(Object.prototype.toString.call(notUpdatedCount) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: notUpdatedCount EXPECTED TYPE: Integer", null, null);
				}
				this.notUpdatedCount = notUpdatedCount;
				this.keyModified.set("Not_Updated_Count", 1);

			}

			/**
			 * The method to get the totalCount
			 * @returns {Integer} An Integer representing the totalCount
			 */
			getTotalCount()	{
				return this.totalCount;

			}

			/**
			 * The method to set the value to totalCount
			 * @param {Integer} totalCount An Integer
			 */
			setTotalCount(totalCount)	{
				if((totalCount != null) && (!(Object.prototype.toString.call(totalCount) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: totalCount EXPECTED TYPE: Integer", null, null);
				}
				this.totalCount = totalCount;
				this.keyModified.set("Total_Count", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		Field : class{


			/**
			 * Creates an instance of Field with the given parameters
			 * @param {String} apiName A String
			 */
			constructor(apiName){
				if((apiName != null) && (!(Object.prototype.toString.call(apiName) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: apiName EXPECTED TYPE: String", null, null);
				}
								this.apiName = apiName;

			}

			/**
			 * The method to get the apiName
			 * @returns {String} A String representing the apiName
			 */
			getAPIName()	{
				return this.apiName;

			}

		},

		ActionWrapper : class{
			constructor(){

				this.data=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the data
			 * @returns {List} An Array representing the data
			 */
			getData()	{
				return this.data;

			}

			/**
			 * The method to set the value to data
			 * @param {List} data An Array
			 */
			setData(data)	{
				if((data != null) && (!(Object.prototype.toString.call(data) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: data EXPECTED TYPE: Array", null, null);
				}
				this.data = data;
				this.keyModified.set("data", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		Record : class{
			constructor(){

				this.keyValues=new Map();
				this.keyModified=new Map();
			}



			/**
			 * The method to get the id
			 * @returns {Long} A BigInt representing the id
			 */
			getId()	{
				return this.getKeyValue("id");

			}

			/**
			 * The method to set the value to id
			 * @param {Long} id A BigInt
			 */
			setId(id)	{
				if((id != null) && (!(Object.prototype.toString.call(id) == "[object BigInt]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
				}
				this.addKeyValue("id", id);

			}

			/**
			 * The method to get the createdBy
			 * @returns {User} An instance of User
			 */
			getCreatedBy()	{
				return this.getKeyValue("Created_By");

			}

			/**
			 * The method to set the value to createdBy
			 * @param {User} createdBy An instance of User
			 */
			setCreatedBy(createdBy)	{
				if((createdBy != null) && (!(createdBy instanceof ZCRM.User.Model.User))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: createdBy EXPECTED TYPE: User", null, null);
				}
				this.addKeyValue("Created_By", createdBy);

			}

			/**
			 * The method to get the createdTime
			 * @returns {OffsetDateTime} An instance of OffsetDateTime
			 */
			getCreatedTime()	{
				return this.getKeyValue("Created_Time");

			}

			/**
			 * The method to set the value to createdTime
			 * @param {OffsetDateTime} createdTime An instance of OffsetDateTime
			 */
			setCreatedTime(createdTime)	{
				if((createdTime != null) && (!(createdTime instanceof Date))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: createdTime EXPECTED TYPE: Date", null, null);
				}
				this.addKeyValue("Created_Time", createdTime);

			}

			/**
			 * The method to get the modifiedBy
			 * @returns {User} An instance of User
			 */
			getModifiedBy()	{
				return this.getKeyValue("Modified_By");

			}

			/**
			 * The method to set the value to modifiedBy
			 * @param {User} modifiedBy An instance of User
			 */
			setModifiedBy(modifiedBy)	{
				if((modifiedBy != null) && (!(modifiedBy instanceof ZCRM.User.Model.User))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modifiedBy EXPECTED TYPE: User", null, null);
				}
				this.addKeyValue("Modified_By", modifiedBy);

			}

			/**
			 * The method to get the modifiedTime
			 * @returns {OffsetDateTime} An instance of OffsetDateTime
			 */
			getModifiedTime()	{
				return this.getKeyValue("Modified_Time");

			}

			/**
			 * The method to set the value to modifiedTime
			 * @param {OffsetDateTime} modifiedTime An instance of OffsetDateTime
			 */
			setModifiedTime(modifiedTime)	{
				if((modifiedTime != null) && (!(modifiedTime instanceof Date))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modifiedTime EXPECTED TYPE: Date", null, null);
				}
				this.addKeyValue("Modified_Time", modifiedTime);

			}

			/**
			 * The method to get the tag
			 * @returns {List} An Array representing the tag
			 */
			getTag()	{
				return this.getKeyValue("Tag");

			}

			/**
			 * The method to set the value to tag
			 * @param {List} tag An Array
			 */
			setTag(tag)	{
				if((tag != null) && (!(Object.prototype.toString.call(tag) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: tag EXPECTED TYPE: Array", null, null);
				}
				this.addKeyValue("Tag", tag);

			}

			/**
			 * The method to add field value
			 * @param {Field} field An instance of Field
			 * @param {*} value An object
			 */
			addFieldValue(field, value)	{
				if((field != null) && (!(field instanceof ZCRM.Record.Model.Field))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: field EXPECTED TYPE: Field", null, null);
				}
				this.addKeyValue(field.getAPIName(), value);

			}

			/**
			 * The method to add key value
			 * @param {String} apiName A String
			 * @param {Object} value An Object
			 */
			addKeyValue(apiName, value)	{
				if((apiName != null) && (!(Object.prototype.toString.call(apiName) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: apiName EXPECTED TYPE: String", null, null);
				}
				this.keyValues.set(apiName, value);
				this.keyModified.set(apiName, 1);

			}

			/**
			 * The method to get key value
			 * @param {String} apiName A String
			 * @returns {Object} An Object representing the keyValue
			 */
			getKeyValue(apiName)	{
				if((apiName != null) && (!(Object.prototype.toString.call(apiName) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: apiName EXPECTED TYPE: String", null, null);
				}
				if(this.keyValues.has(apiName)){
					return this.keyValues.get(apiName);
				}
				return null;

			}

			/**
			 * The method to get key values
			 * @returns {HashMap} A Map representing the keyValues
			 */
			getKeyValues()	{
				return this.keyValues;

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		RemindAt : class{
			constructor(){

				this.alarm=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the alarm
			 * @returns {String} A String representing the alarm
			 */
			getAlarm()	{
				return this.alarm;

			}

			/**
			 * The method to set the value to alarm
			 * @param {String} alarm A String
			 */
			setAlarm(alarm)	{
				if((alarm != null) && (!(Object.prototype.toString.call(alarm) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: alarm EXPECTED TYPE: String", null, null);
				}
				this.alarm = alarm;
				this.keyModified.set("ALARM", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		ConvertBodyWrapper : class{
			constructor(){

				this.data=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the data
			 * @returns {List} An Array representing the data
			 */
			getData()	{
				return this.data;

			}

			/**
			 * The method to set the value to data
			 * @param {List} data An Array
			 */
			setData(data)	{
				if((data != null) && (!(Object.prototype.toString.call(data) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: data EXPECTED TYPE: Array", null, null);
				}
				this.data = data;
				this.keyModified.set("data", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		MassUpdateResponseWrapper : class{
			constructor(){

				this.data=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the data
			 * @returns {List} An Array representing the data
			 */
			getData()	{
				return this.data;

			}

			/**
			 * The method to set the value to data
			 * @param {List} data An Array
			 */
			setData(data)	{
				if((data != null) && (!(Object.prototype.toString.call(data) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: data EXPECTED TYPE: Array", null, null);
				}
				this.data = data;
				this.keyModified.set("data", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		FileDetails : class{
			constructor(){

				this.extn=null;
				this.isPreviewAvailable=null;
				this.downloadUrl=null;
				this.deleteUrl=null;
				this.entityId=null;
				this.mode=null;
				this.originalSizeByte=null;
				this.previewUrl=null;
				this.fileName=null;
				this.fileId=null;
				this.attachmentId=null;
				this.fileSize=null;
				this.creatorId=null;
				this.linkDocs=null;
				this.delete1=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the extn
			 * @returns {String} A String representing the extn
			 */
			getExtn()	{
				return this.extn;

			}

			/**
			 * The method to set the value to extn
			 * @param {String} extn A String
			 */
			setExtn(extn)	{
				if((extn != null) && (!(Object.prototype.toString.call(extn) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: extn EXPECTED TYPE: String", null, null);
				}
				this.extn = extn;
				this.keyModified.set("extn", 1);

			}

			/**
			 * The method to get the isPreviewAvailable
			 * @returns {Boolean} A Boolean representing the isPreviewAvailable
			 */
			getIsPreviewAvailable()	{
				return this.isPreviewAvailable;

			}

			/**
			 * The method to set the value to isPreviewAvailable
			 * @param {Boolean} isPreviewAvailable A Boolean
			 */
			setIsPreviewAvailable(isPreviewAvailable)	{
				if((isPreviewAvailable != null) && (!(Object.prototype.toString.call(isPreviewAvailable) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: isPreviewAvailable EXPECTED TYPE: Boolean", null, null);
				}
				this.isPreviewAvailable = isPreviewAvailable;
				this.keyModified.set("is_Preview_Available", 1);

			}

			/**
			 * The method to get the downloadUrl
			 * @returns {String} A String representing the downloadUrl
			 */
			getDownloadUrl()	{
				return this.downloadUrl;

			}

			/**
			 * The method to set the value to downloadUrl
			 * @param {String} downloadUrl A String
			 */
			setDownloadUrl(downloadUrl)	{
				if((downloadUrl != null) && (!(Object.prototype.toString.call(downloadUrl) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: downloadUrl EXPECTED TYPE: String", null, null);
				}
				this.downloadUrl = downloadUrl;
				this.keyModified.set("download_Url", 1);

			}

			/**
			 * The method to get the deleteUrl
			 * @returns {String} A String representing the deleteUrl
			 */
			getDeleteUrl()	{
				return this.deleteUrl;

			}

			/**
			 * The method to set the value to deleteUrl
			 * @param {String} deleteUrl A String
			 */
			setDeleteUrl(deleteUrl)	{
				if((deleteUrl != null) && (!(Object.prototype.toString.call(deleteUrl) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: deleteUrl EXPECTED TYPE: String", null, null);
				}
				this.deleteUrl = deleteUrl;
				this.keyModified.set("delete_Url", 1);

			}

			/**
			 * The method to get the entityId
			 * @returns {String} A String representing the entityId
			 */
			getEntityId()	{
				return this.entityId;

			}

			/**
			 * The method to set the value to entityId
			 * @param {String} entityId A String
			 */
			setEntityId(entityId)	{
				if((entityId != null) && (!(Object.prototype.toString.call(entityId) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: entityId EXPECTED TYPE: String", null, null);
				}
				this.entityId = entityId;
				this.keyModified.set("entity_Id", 1);

			}

			/**
			 * The method to get the mode
			 * @returns {String} A String representing the mode
			 */
			getMode()	{
				return this.mode;

			}

			/**
			 * The method to set the value to mode
			 * @param {String} mode A String
			 */
			setMode(mode)	{
				if((mode != null) && (!(Object.prototype.toString.call(mode) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: mode EXPECTED TYPE: String", null, null);
				}
				this.mode = mode;
				this.keyModified.set("mode", 1);

			}

			/**
			 * The method to get the originalSizeByte
			 * @returns {String} A String representing the originalSizeByte
			 */
			getOriginalSizeByte()	{
				return this.originalSizeByte;

			}

			/**
			 * The method to set the value to originalSizeByte
			 * @param {String} originalSizeByte A String
			 */
			setOriginalSizeByte(originalSizeByte)	{
				if((originalSizeByte != null) && (!(Object.prototype.toString.call(originalSizeByte) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: originalSizeByte EXPECTED TYPE: String", null, null);
				}
				this.originalSizeByte = originalSizeByte;
				this.keyModified.set("original_Size_Byte", 1);

			}

			/**
			 * The method to get the previewUrl
			 * @returns {String} A String representing the previewUrl
			 */
			getPreviewUrl()	{
				return this.previewUrl;

			}

			/**
			 * The method to set the value to previewUrl
			 * @param {String} previewUrl A String
			 */
			setPreviewUrl(previewUrl)	{
				if((previewUrl != null) && (!(Object.prototype.toString.call(previewUrl) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: previewUrl EXPECTED TYPE: String", null, null);
				}
				this.previewUrl = previewUrl;
				this.keyModified.set("preview_Url", 1);

			}

			/**
			 * The method to get the fileName
			 * @returns {String} A String representing the fileName
			 */
			getFileName()	{
				return this.fileName;

			}

			/**
			 * The method to set the value to fileName
			 * @param {String} fileName A String
			 */
			setFileName(fileName)	{
				if((fileName != null) && (!(Object.prototype.toString.call(fileName) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: fileName EXPECTED TYPE: String", null, null);
				}
				this.fileName = fileName;
				this.keyModified.set("file_Name", 1);

			}

			/**
			 * The method to get the fileId
			 * @returns {String} A String representing the fileId
			 */
			getFileId()	{
				return this.fileId;

			}

			/**
			 * The method to set the value to fileId
			 * @param {String} fileId A String
			 */
			setFileId(fileId)	{
				if((fileId != null) && (!(Object.prototype.toString.call(fileId) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: fileId EXPECTED TYPE: String", null, null);
				}
				this.fileId = fileId;
				this.keyModified.set("file_Id", 1);

			}

			/**
			 * The method to get the attachmentId
			 * @returns {String} A String representing the attachmentId
			 */
			getAttachmentId()	{
				return this.attachmentId;

			}

			/**
			 * The method to set the value to attachmentId
			 * @param {String} attachmentId A String
			 */
			setAttachmentId(attachmentId)	{
				if((attachmentId != null) && (!(Object.prototype.toString.call(attachmentId) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: attachmentId EXPECTED TYPE: String", null, null);
				}
				this.attachmentId = attachmentId;
				this.keyModified.set("attachment_Id", 1);

			}

			/**
			 * The method to get the fileSize
			 * @returns {String} A String representing the fileSize
			 */
			getFileSize()	{
				return this.fileSize;

			}

			/**
			 * The method to set the value to fileSize
			 * @param {String} fileSize A String
			 */
			setFileSize(fileSize)	{
				if((fileSize != null) && (!(Object.prototype.toString.call(fileSize) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: fileSize EXPECTED TYPE: String", null, null);
				}
				this.fileSize = fileSize;
				this.keyModified.set("file_Size", 1);

			}

			/**
			 * The method to get the creatorId
			 * @returns {String} A String representing the creatorId
			 */
			getCreatorId()	{
				return this.creatorId;

			}

			/**
			 * The method to set the value to creatorId
			 * @param {String} creatorId A String
			 */
			setCreatorId(creatorId)	{
				if((creatorId != null) && (!(Object.prototype.toString.call(creatorId) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: creatorId EXPECTED TYPE: String", null, null);
				}
				this.creatorId = creatorId;
				this.keyModified.set("creator_Id", 1);

			}

			/**
			 * The method to get the linkDocs
			 * @returns {Integer} An Integer representing the linkDocs
			 */
			getLinkDocs()	{
				return this.linkDocs;

			}

			/**
			 * The method to set the value to linkDocs
			 * @param {Integer} linkDocs An Integer
			 */
			setLinkDocs(linkDocs)	{
				if((linkDocs != null) && (!(Object.prototype.toString.call(linkDocs) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: linkDocs EXPECTED TYPE: Integer", null, null);
				}
				this.linkDocs = linkDocs;
				this.keyModified.set("link_Docs", 1);

			}

			/**
			 * The method to get the delete
			 * @returns {String} A String representing the delete1
			 */
			getDelete()	{
				return this.delete1;

			}

			/**
			 * The method to set the value to delete
			 * @param {String} delete1 A String
			 */
			setDelete(delete1)	{
				if((delete1 != null) && (!(Object.prototype.toString.call(delete1) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: delete1 EXPECTED TYPE: String", null, null);
				}
				this.delete1 = delete1;
				this.keyModified.set("_delete", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		Options : class{
			constructor(){

			}



		},

		Reminder : class{
			constructor(){

				this.period=null;
				this.unit=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the period
			 * @returns {String} A String representing the period
			 */
			getPeriod()	{
				return this.period;

			}

			/**
			 * The method to set the value to period
			 * @param {String} period A String
			 */
			setPeriod(period)	{
				if((period != null) && (!(Object.prototype.toString.call(period) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: period EXPECTED TYPE: String", null, null);
				}
				this.period = period;
				this.keyModified.set("period", 1);

			}

			/**
			 * The method to get the unit
			 * @returns {String} A String representing the unit
			 */
			getUnit()	{
				return this.unit;

			}

			/**
			 * The method to set the value to unit
			 * @param {String} unit A String
			 */
			setUnit(unit)	{
				if((unit != null) && (!(Object.prototype.toString.call(unit) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: unit EXPECTED TYPE: String", null, null);
				}
				this.unit = unit;
				this.keyModified.set("unit", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		DeletedRecordsWrapper : class{
			constructor(){

				this.data=null;
				this.info=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the data
			 * @returns {List} An Array representing the data
			 */
			getData()	{
				return this.data;

			}

			/**
			 * The method to set the value to data
			 * @param {List} data An Array
			 */
			setData(data)	{
				if((data != null) && (!(Object.prototype.toString.call(data) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: data EXPECTED TYPE: Array", null, null);
				}
				this.data = data;
				this.keyModified.set("data", 1);

			}

			/**
			 * The method to get the info
			 * @returns {Info} An instance of Info
			 */
			getInfo()	{
				return this.info;

			}

			/**
			 * The method to set the value to info
			 * @param {Info} info An instance of Info
			 */
			setInfo(info)	{
				if((info != null) && (!(info instanceof ZCRM.Record.Model.Info))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: info EXPECTED TYPE: Info", null, null);
				}
				this.info = info;
				this.keyModified.set("info", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		DeletedRecord : class{
			constructor(){

				this.deletedBy=null;
				this.id=null;
				this.displayName=null;
				this.type=null;
				this.createdBy=null;
				this.deletedTime=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the deletedBy
			 * @returns {User} An instance of User
			 */
			getDeletedBy()	{
				return this.deletedBy;

			}

			/**
			 * The method to set the value to deletedBy
			 * @param {User} deletedBy An instance of User
			 */
			setDeletedBy(deletedBy)	{
				if((deletedBy != null) && (!(deletedBy instanceof ZCRM.User.Model.User))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: deletedBy EXPECTED TYPE: User", null, null);
				}
				this.deletedBy = deletedBy;
				this.keyModified.set("deleted_by", 1);

			}

			/**
			 * The method to get the id
			 * @returns {Long} A BigInt representing the id
			 */
			getId()	{
				return this.id;

			}

			/**
			 * The method to set the value to id
			 * @param {Long} id A BigInt
			 */
			setId(id)	{
				if((id != null) && (!(Object.prototype.toString.call(id) == "[object BigInt]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
				}
				this.id = id;
				this.keyModified.set("id", 1);

			}

			/**
			 * The method to get the displayName
			 * @returns {String} A String representing the displayName
			 */
			getDisplayName()	{
				return this.displayName;

			}

			/**
			 * The method to set the value to displayName
			 * @param {String} displayName A String
			 */
			setDisplayName(displayName)	{
				if((displayName != null) && (!(Object.prototype.toString.call(displayName) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: displayName EXPECTED TYPE: String", null, null);
				}
				this.displayName = displayName;
				this.keyModified.set("display_name", 1);

			}

			/**
			 * The method to get the type
			 * @returns {String} A String representing the type
			 */
			getType()	{
				return this.type;

			}

			/**
			 * The method to set the value to type
			 * @param {String} type A String
			 */
			setType(type)	{
				if((type != null) && (!(Object.prototype.toString.call(type) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: type EXPECTED TYPE: String", null, null);
				}
				this.type = type;
				this.keyModified.set("type", 1);

			}

			/**
			 * The method to get the createdBy
			 * @returns {User} An instance of User
			 */
			getCreatedBy()	{
				return this.createdBy;

			}

			/**
			 * The method to set the value to createdBy
			 * @param {User} createdBy An instance of User
			 */
			setCreatedBy(createdBy)	{
				if((createdBy != null) && (!(createdBy instanceof ZCRM.User.Model.User))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: createdBy EXPECTED TYPE: User", null, null);
				}
				this.createdBy = createdBy;
				this.keyModified.set("created_by", 1);

			}

			/**
			 * The method to get the deletedTime
			 * @returns {OffsetDateTime} An instance of OffsetDateTime
			 */
			getDeletedTime()	{
				return this.deletedTime;

			}

			/**
			 * The method to set the value to deletedTime
			 * @param {OffsetDateTime} deletedTime An instance of OffsetDateTime
			 */
			setDeletedTime(deletedTime)	{
				if((deletedTime != null) && (!(deletedTime instanceof Date))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: deletedTime EXPECTED TYPE: Date", null, null);
				}
				this.deletedTime = deletedTime;
				this.keyModified.set("deleted_time", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		LineTax : class{
			constructor(){

				this.percentage=null;
				this.name=null;
				this.id=null;
				this.value=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the percentage
			 * @returns {Double} A Float representing the percentage
			 */
			getPercentage()	{
				return this.percentage;

			}

			/**
			 * The method to set the value to percentage
			 * @param {Double} percentage A Float
			 */
			setPercentage(percentage)	{
				if((percentage != null) && (!(Object.prototype.toString.call(percentage) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: percentage EXPECTED TYPE: Float", null, null);
				}
				this.percentage = percentage;
				this.keyModified.set("percentage", 1);

			}

			/**
			 * The method to get the name
			 * @returns {String} A String representing the name
			 */
			getName()	{
				return this.name;

			}

			/**
			 * The method to set the value to name
			 * @param {String} name A String
			 */
			setName(name)	{
				if((name != null) && (!(Object.prototype.toString.call(name) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: name EXPECTED TYPE: String", null, null);
				}
				this.name = name;
				this.keyModified.set("name", 1);

			}

			/**
			 * The method to get the id
			 * @returns {Long} A BigInt representing the id
			 */
			getId()	{
				return this.id;

			}

			/**
			 * The method to set the value to id
			 * @param {Long} id A BigInt
			 */
			setId(id)	{
				if((id != null) && (!(Object.prototype.toString.call(id) == "[object BigInt]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
				}
				this.id = id;
				this.keyModified.set("id", 1);

			}

			/**
			 * The method to get the value
			 * @returns {Double} A Float representing the value
			 */
			getValue()	{
				return this.value;

			}

			/**
			 * The method to set the value to value
			 * @param {Double} value A Float
			 */
			setValue(value)	{
				if((value != null) && (!(Object.prototype.toString.call(value) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: value EXPECTED TYPE: Float", null, null);
				}
				this.value = value;
				this.keyModified.set("value", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		RecurringActivity : class{
			constructor(){

				this.rrule=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the rrule
			 * @returns {String} A String representing the rrule
			 */
			getRrule()	{
				return this.rrule;

			}

			/**
			 * The method to set the value to rrule
			 * @param {String} rrule A String
			 */
			setRrule(rrule)	{
				if((rrule != null) && (!(Object.prototype.toString.call(rrule) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: rrule EXPECTED TYPE: String", null, null);
				}
				this.rrule = rrule;
				this.keyModified.set("RRULE", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		Comment : class{
			constructor(){

				this.commentedBy=null;
				this.commentedTime=null;
				this.commentContent=null;
				this.id=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the commentedBy
			 * @returns {String} A String representing the commentedBy
			 */
			getCommentedBy()	{
				return this.commentedBy;

			}

			/**
			 * The method to set the value to commentedBy
			 * @param {String} commentedBy A String
			 */
			setCommentedBy(commentedBy)	{
				if((commentedBy != null) && (!(Object.prototype.toString.call(commentedBy) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: commentedBy EXPECTED TYPE: String", null, null);
				}
				this.commentedBy = commentedBy;
				this.keyModified.set("commented_by", 1);

			}

			/**
			 * The method to get the commentedTime
			 * @returns {OffsetDateTime} An instance of OffsetDateTime
			 */
			getCommentedTime()	{
				return this.commentedTime;

			}

			/**
			 * The method to set the value to commentedTime
			 * @param {OffsetDateTime} commentedTime An instance of OffsetDateTime
			 */
			setCommentedTime(commentedTime)	{
				if((commentedTime != null) && (!(commentedTime instanceof Date))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: commentedTime EXPECTED TYPE: Date", null, null);
				}
				this.commentedTime = commentedTime;
				this.keyModified.set("commented_time", 1);

			}

			/**
			 * The method to get the commentContent
			 * @returns {String} A String representing the commentContent
			 */
			getCommentContent()	{
				return this.commentContent;

			}

			/**
			 * The method to set the value to commentContent
			 * @param {String} commentContent A String
			 */
			setCommentContent(commentContent)	{
				if((commentContent != null) && (!(Object.prototype.toString.call(commentContent) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: commentContent EXPECTED TYPE: String", null, null);
				}
				this.commentContent = commentContent;
				this.keyModified.set("comment_content", 1);

			}

			/**
			 * The method to get the id
			 * @returns {Long} A BigInt representing the id
			 */
			getId()	{
				return this.id;

			}

			/**
			 * The method to set the value to id
			 * @param {Long} id A BigInt
			 */
			setId(id)	{
				if((id != null) && (!(Object.prototype.toString.call(id) == "[object BigInt]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
				}
				this.id = id;
				this.keyModified.set("id", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		CarryOverTags : class{
			constructor(){

				this.contacts=null;
				this.accounts=null;
				this.deals=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the contacts
			 * @returns {List} An Array representing the contacts
			 */
			getContacts()	{
				return this.contacts;

			}

			/**
			 * The method to set the value to contacts
			 * @param {List} contacts An Array
			 */
			setContacts(contacts)	{
				if((contacts != null) && (!(Object.prototype.toString.call(contacts) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: contacts EXPECTED TYPE: Array", null, null);
				}
				this.contacts = contacts;
				this.keyModified.set("Contacts", 1);

			}

			/**
			 * The method to get the accounts
			 * @returns {List} An Array representing the accounts
			 */
			getAccounts()	{
				return this.accounts;

			}

			/**
			 * The method to set the value to accounts
			 * @param {List} accounts An Array
			 */
			setAccounts(accounts)	{
				if((accounts != null) && (!(Object.prototype.toString.call(accounts) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: accounts EXPECTED TYPE: Array", null, null);
				}
				this.accounts = accounts;
				this.keyModified.set("Accounts", 1);

			}

			/**
			 * The method to get the deals
			 * @returns {List} An Array representing the deals
			 */
			getDeals()	{
				return this.deals;

			}

			/**
			 * The method to set the value to deals
			 * @param {List} deals An Array
			 */
			setDeals(deals)	{
				if((deals != null) && (!(Object.prototype.toString.call(deals) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: deals EXPECTED TYPE: Array", null, null);
				}
				this.deals = deals;
				this.keyModified.set("Deals", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		MassUpdateSuccessResponse : class{
			constructor(){

				this.status=null;
				this.code=null;
				this.message=null;
				this.details=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		GetRecordParam : {
			APPROVED : 	new Param("approved", "Record.Model.GetRecordParam"),

			CONVERTED : 	new Param("converted", "Record.Model.GetRecordParam"),

			CVID : 	new Param("cvid", "Record.Model.GetRecordParam"),

			UID : 	new Param("uid", "Record.Model.GetRecordParam"),

			FIELDS : 	new Param("fields", "Record.Model.GetRecordParam"),

			STARTDATETIME : 	new Param("startDateTime", "Record.Model.GetRecordParam"),

			ENDDATETIME : 	new Param("endDateTime", "Record.Model.GetRecordParam"),

			TERRITORY_ID : 	new Param("territory_id", "Record.Model.GetRecordParam"),

			INCLUDE_CHILD : 	new Param("include_child", "Record.Model.GetRecordParam"),


		},

		CreateRecordsHeader : {
			X_EXTERNAL : 	new Header("X-EXTERNAL", "Record.Model.CreateRecordsHeader"),


		},

		UpsertRecordsHeader : {
			X_EXTERNAL : 	new Header("X-EXTERNAL", "Record.Model.UpsertRecordsHeader"),


		},

		DeleteRecordUsingExternalIDParam : {
			WF_TRIGGER : 	new Param("wf_trigger", "Record.Model.DeleteRecordUsingExternalIDParam"),


		},

		GetRecordsHeader : {
			IF_MODIFIED_SINCE : 	new Header("If-Modified-Since", "Record.Model.GetRecordsHeader"),

			X_EXTERNAL : 	new Header("X-EXTERNAL", "Record.Model.GetRecordsHeader"),


		},

		GetRecordHeader : {
			IF_MODIFIED_SINCE : 	new Header("If-Modified-Since", "Record.Model.GetRecordHeader"),

			X_EXTERNAL : 	new Header("X-EXTERNAL", "Record.Model.GetRecordHeader"),


		},

		GetRecordUsingExternalIDParam : {
			APPROVED : 	new Param("approved", "Record.Model.GetRecordUsingExternalIDParam"),

			CONVERTED : 	new Param("converted", "Record.Model.GetRecordUsingExternalIDParam"),

			CVID : 	new Param("cvid", "Record.Model.GetRecordUsingExternalIDParam"),

			UID : 	new Param("uid", "Record.Model.GetRecordUsingExternalIDParam"),

			FIELDS : 	new Param("fields", "Record.Model.GetRecordUsingExternalIDParam"),

			STARTDATETIME : 	new Param("startDateTime", "Record.Model.GetRecordUsingExternalIDParam"),

			ENDDATETIME : 	new Param("endDateTime", "Record.Model.GetRecordUsingExternalIDParam"),

			TERRITORY_ID : 	new Param("territory_id", "Record.Model.GetRecordUsingExternalIDParam"),

			INCLUDE_CHILD : 	new Param("include_child", "Record.Model.GetRecordUsingExternalIDParam"),


		},

		GetDeletedRecordsParam : {
			TYPE : 	new Param("type", "Record.Model.GetDeletedRecordsParam"),

			PAGE : 	new Param("page", "Record.Model.GetDeletedRecordsParam"),

			PER_PAGE : 	new Param("per_page", "Record.Model.GetDeletedRecordsParam"),


		},

		UpdateRecordUsingExternalIDHeader : {
			X_EXTERNAL : 	new Header("X-EXTERNAL", "Record.Model.UpdateRecordUsingExternalIDHeader"),


		},

		GetMassUpdateStatusParam : {
			JOB_ID : 	new Param("job_id", "Record.Model.GetMassUpdateStatusParam"),


		},

		UpdateRecordHeader : {
			X_EXTERNAL : 	new Header("X-EXTERNAL", "Record.Model.UpdateRecordHeader"),


		},

		GetRecordsParam : {
			APPROVED : 	new Param("approved", "Record.Model.GetRecordsParam"),

			CONVERTED : 	new Param("converted", "Record.Model.GetRecordsParam"),

			CVID : 	new Param("cvid", "Record.Model.GetRecordsParam"),

			IDS : 	new Param("ids", "Record.Model.GetRecordsParam"),

			UID : 	new Param("uid", "Record.Model.GetRecordsParam"),

			FIELDS : 	new Param("fields", "Record.Model.GetRecordsParam"),

			SORT_BY : 	new Param("sort_by", "Record.Model.GetRecordsParam"),

			SORT_ORDER : 	new Param("sort_order", "Record.Model.GetRecordsParam"),

			PAGE : 	new Param("page", "Record.Model.GetRecordsParam"),

			PER_PAGE : 	new Param("per_page", "Record.Model.GetRecordsParam"),

			STARTDATETIME : 	new Param("startDateTime", "Record.Model.GetRecordsParam"),

			ENDDATETIME : 	new Param("endDateTime", "Record.Model.GetRecordsParam"),

			TERRITORY_ID : 	new Param("territory_id", "Record.Model.GetRecordsParam"),

			INCLUDE_CHILD : 	new Param("include_child", "Record.Model.GetRecordsParam"),


		},

		SearchRecordsParam : {
			CRITERIA : 	new Param("criteria", "Record.Model.SearchRecordsParam"),

			EMAIL : 	new Param("email", "Record.Model.SearchRecordsParam"),

			PHONE : 	new Param("phone", "Record.Model.SearchRecordsParam"),

			WORD : 	new Param("word", "Record.Model.SearchRecordsParam"),

			CONVERTED : 	new Param("converted", "Record.Model.SearchRecordsParam"),

			APPROVED : 	new Param("approved", "Record.Model.SearchRecordsParam"),

			PAGE : 	new Param("page", "Record.Model.SearchRecordsParam"),

			PER_PAGE : 	new Param("per_page", "Record.Model.SearchRecordsParam"),

			FIELDS : 	new Param("fields", "Record.Model.SearchRecordsParam"),


		},

		DeleteRecordParam : {
			WF_TRIGGER : 	new Param("wf_trigger", "Record.Model.DeleteRecordParam"),


		},

		UpdateRecordsHeader : {
			X_EXTERNAL : 	new Header("X-EXTERNAL", "Record.Model.UpdateRecordsHeader"),


		},

		SearchRecordsHeader : {
			X_EXTERNAL : 	new Header("X-EXTERNAL", "Record.Model.SearchRecordsHeader"),


		},

		DeleteRecordHeader : {
			X_EXTERNAL : 	new Header("X-EXTERNAL", "Record.Model.DeleteRecordHeader"),


		},

		DeleteRecordsParam : {
			IDS : 	new Param("ids", "Record.Model.DeleteRecordsParam"),

			WF_TRIGGER : 	new Param("wf_trigger", "Record.Model.DeleteRecordsParam"),


		},

		DeleteRecordsHeader : {
			X_EXTERNAL : 	new Header("X-EXTERNAL", "Record.Model.DeleteRecordsHeader"),


		},

		GetDeletedRecordsHeader : {
			IF_MODIFIED_SINCE : 	new Header("If-Modified-Since", "Record.Model.GetDeletedRecordsHeader"),


		},

		DeleteRecordUsingExternalIDHeader : {
			X_EXTERNAL : 	new Header("X-EXTERNAL", "Record.Model.DeleteRecordUsingExternalIDHeader"),


		},

		GetRecordUsingExternalIDHeader : {
			IF_MODIFIED_SINCE : 	new Header("If-Modified-Since", "Record.Model.GetRecordUsingExternalIDHeader"),

			X_EXTERNAL : 	new Header("X-EXTERNAL", "Record.Model.GetRecordUsingExternalIDHeader"),


		}
	},
	Operations : class {
		constructor(){

		}

		/**
		 * The method to get record
		 * @param {Long} id A BigInt
		 * @param {String} moduleAPIName A String
		 * @param {ParameterMap} paramInstance An instance of ParameterMap
		 * @param {HeaderMap} headerInstance An instance of HeaderMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getRecord(id, moduleAPIName, paramInstance=null, headerInstance=null){
			if((!(Object.prototype.toString.call(id) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
			}
			if((!(Object.prototype.toString.call(moduleAPIName) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: moduleAPIName EXPECTED TYPE: String", null, null);
			}
			if((paramInstance != null) && (!(paramInstance instanceof ParameterMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paramInstance EXPECTED TYPE: ParameterMap", null, null);
			}
			if((headerInstance != null) && (!(headerInstance instanceof HeaderMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: headerInstance EXPECTED TYPE: HeaderMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/");
			apiPath = apiPath.concat(moduleAPIName.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(id.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			handlerInstance.setParam(paramInstance);
			handlerInstance.setHeader(headerInstance);
			handlerInstance.setModuleAPIName(moduleAPIName);
			await Utility.getFields(moduleAPIName, handlerInstance);
			return handlerInstance.apiCall("Record.Model.ResponseHandler", "application/json");

		}

		/**
		 * The method to update record
		 * @param {Long} id A BigInt
		 * @param {String} moduleAPIName A String
		 * @param {BodyWrapper} request An instance of BodyWrapper
		 * @param {HeaderMap} headerInstance An instance of HeaderMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async updateRecord(id, moduleAPIName, request, headerInstance=null){
			if((!(Object.prototype.toString.call(id) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
			}
			if((!(Object.prototype.toString.call(moduleAPIName) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: moduleAPIName EXPECTED TYPE: String", null, null);
			}
			if((request != null) && (!(request instanceof ZCRM.Record.Model.BodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: BodyWrapper", null, null);
			}
			if((headerInstance != null) && (!(headerInstance instanceof HeaderMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: headerInstance EXPECTED TYPE: HeaderMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/");
			apiPath = apiPath.concat(moduleAPIName.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(id.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_PUT);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_UPDATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			handlerInstance.setHeader(headerInstance);
			handlerInstance.setModuleAPIName(moduleAPIName);
			await Utility.getFields(moduleAPIName, handlerInstance);
			return handlerInstance.apiCall("Record.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to delete record
		 * @param {Long} id A BigInt
		 * @param {String} moduleAPIName A String
		 * @param {ParameterMap} paramInstance An instance of ParameterMap
		 * @param {HeaderMap} headerInstance An instance of HeaderMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async deleteRecord(id, moduleAPIName, paramInstance=null, headerInstance=null){
			if((!(Object.prototype.toString.call(id) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
			}
			if((!(Object.prototype.toString.call(moduleAPIName) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: moduleAPIName EXPECTED TYPE: String", null, null);
			}
			if((paramInstance != null) && (!(paramInstance instanceof ParameterMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paramInstance EXPECTED TYPE: ParameterMap", null, null);
			}
			if((headerInstance != null) && (!(headerInstance instanceof HeaderMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: headerInstance EXPECTED TYPE: HeaderMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/");
			apiPath = apiPath.concat(moduleAPIName.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(id.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_DELETE);
			handlerInstance.setCategoryMethod(Constants.REQUEST_METHOD_DELETE);
			handlerInstance.setParam(paramInstance);
			handlerInstance.setHeader(headerInstance);
			await Utility.getFields(moduleAPIName, handlerInstance);
			return handlerInstance.apiCall("Record.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to get records
		 * @param {String} moduleAPIName A String
		 * @param {ParameterMap} paramInstance An instance of ParameterMap
		 * @param {HeaderMap} headerInstance An instance of HeaderMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getRecords(moduleAPIName, paramInstance=null, headerInstance=null){
			if((!(Object.prototype.toString.call(moduleAPIName) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: moduleAPIName EXPECTED TYPE: String", null, null);
			}
			if((paramInstance != null) && (!(paramInstance instanceof ParameterMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paramInstance EXPECTED TYPE: ParameterMap", null, null);
			}
			if((headerInstance != null) && (!(headerInstance instanceof HeaderMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: headerInstance EXPECTED TYPE: HeaderMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/");
			apiPath = apiPath.concat(moduleAPIName.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			handlerInstance.setParam(paramInstance);
			handlerInstance.setHeader(headerInstance);
			handlerInstance.setModuleAPIName(moduleAPIName);
			await Utility.getFields(moduleAPIName, handlerInstance);
			return handlerInstance.apiCall("Record.Model.ResponseHandler", "application/json");

		}

		/**
		 * The method to create records
		 * @param {String} moduleAPIName A String
		 * @param {BodyWrapper} request An instance of BodyWrapper
		 * @param {HeaderMap} headerInstance An instance of HeaderMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async createRecords(moduleAPIName, request, headerInstance=null){
			if((!(Object.prototype.toString.call(moduleAPIName) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: moduleAPIName EXPECTED TYPE: String", null, null);
			}
			if((request != null) && (!(request instanceof ZCRM.Record.Model.BodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: BodyWrapper", null, null);
			}
			if((headerInstance != null) && (!(headerInstance instanceof HeaderMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: headerInstance EXPECTED TYPE: HeaderMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/");
			apiPath = apiPath.concat(moduleAPIName.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_POST);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_CREATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			handlerInstance.setHeader(headerInstance);
			handlerInstance.setModuleAPIName(moduleAPIName);
			await Utility.getFields(moduleAPIName, handlerInstance);
			return handlerInstance.apiCall("Record.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to update records
		 * @param {String} moduleAPIName A String
		 * @param {BodyWrapper} request An instance of BodyWrapper
		 * @param {HeaderMap} headerInstance An instance of HeaderMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async updateRecords(moduleAPIName, request, headerInstance=null){
			if((!(Object.prototype.toString.call(moduleAPIName) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: moduleAPIName EXPECTED TYPE: String", null, null);
			}
			if((request != null) && (!(request instanceof ZCRM.Record.Model.BodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: BodyWrapper", null, null);
			}
			if((headerInstance != null) && (!(headerInstance instanceof HeaderMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: headerInstance EXPECTED TYPE: HeaderMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/");
			apiPath = apiPath.concat(moduleAPIName.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_PUT);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_UPDATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			handlerInstance.setHeader(headerInstance);
			handlerInstance.setModuleAPIName(moduleAPIName);
			await Utility.getFields(moduleAPIName, handlerInstance);
			return handlerInstance.apiCall("Record.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to delete records
		 * @param {String} moduleAPIName A String
		 * @param {ParameterMap} paramInstance An instance of ParameterMap
		 * @param {HeaderMap} headerInstance An instance of HeaderMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async deleteRecords(moduleAPIName, paramInstance=null, headerInstance=null){
			if((!(Object.prototype.toString.call(moduleAPIName) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: moduleAPIName EXPECTED TYPE: String", null, null);
			}
			if((paramInstance != null) && (!(paramInstance instanceof ParameterMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paramInstance EXPECTED TYPE: ParameterMap", null, null);
			}
			if((headerInstance != null) && (!(headerInstance instanceof HeaderMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: headerInstance EXPECTED TYPE: HeaderMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/");
			apiPath = apiPath.concat(moduleAPIName.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_DELETE);
			handlerInstance.setCategoryMethod(Constants.REQUEST_METHOD_DELETE);
			handlerInstance.setParam(paramInstance);
			handlerInstance.setHeader(headerInstance);
			await Utility.getFields(moduleAPIName, handlerInstance);
			return handlerInstance.apiCall("Record.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to upsert records
		 * @param {String} moduleAPIName A String
		 * @param {BodyWrapper} request An instance of BodyWrapper
		 * @param {HeaderMap} headerInstance An instance of HeaderMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async upsertRecords(moduleAPIName, request, headerInstance=null){
			if((!(Object.prototype.toString.call(moduleAPIName) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: moduleAPIName EXPECTED TYPE: String", null, null);
			}
			if((request != null) && (!(request instanceof ZCRM.Record.Model.BodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: BodyWrapper", null, null);
			}
			if((headerInstance != null) && (!(headerInstance instanceof HeaderMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: headerInstance EXPECTED TYPE: HeaderMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/");
			apiPath = apiPath.concat(moduleAPIName.toString());
			apiPath = apiPath.concat("/upsert");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_POST);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_ACTION);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			handlerInstance.setHeader(headerInstance);
			handlerInstance.setModuleAPIName(moduleAPIName);
			await Utility.getFields(moduleAPIName, handlerInstance);
			return handlerInstance.apiCall("Record.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to get deleted records
		 * @param {String} moduleAPIName A String
		 * @param {ParameterMap} paramInstance An instance of ParameterMap
		 * @param {HeaderMap} headerInstance An instance of HeaderMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getDeletedRecords(moduleAPIName, paramInstance=null, headerInstance=null){
			if((!(Object.prototype.toString.call(moduleAPIName) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: moduleAPIName EXPECTED TYPE: String", null, null);
			}
			if((paramInstance != null) && (!(paramInstance instanceof ParameterMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paramInstance EXPECTED TYPE: ParameterMap", null, null);
			}
			if((headerInstance != null) && (!(headerInstance instanceof HeaderMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: headerInstance EXPECTED TYPE: HeaderMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/");
			apiPath = apiPath.concat(moduleAPIName.toString());
			apiPath = apiPath.concat("/deleted");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			handlerInstance.setParam(paramInstance);
			handlerInstance.setHeader(headerInstance);
			await Utility.getFields(moduleAPIName, handlerInstance);
			return handlerInstance.apiCall("Record.Model.DeletedRecordsHandler", "application/json");

		}

		/**
		 * The method to search records
		 * @param {String} moduleAPIName A String
		 * @param {ParameterMap} paramInstance An instance of ParameterMap
		 * @param {HeaderMap} headerInstance An instance of HeaderMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async searchRecords(moduleAPIName, paramInstance=null, headerInstance=null){
			if((!(Object.prototype.toString.call(moduleAPIName) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: moduleAPIName EXPECTED TYPE: String", null, null);
			}
			if((paramInstance != null) && (!(paramInstance instanceof ParameterMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paramInstance EXPECTED TYPE: ParameterMap", null, null);
			}
			if((headerInstance != null) && (!(headerInstance instanceof HeaderMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: headerInstance EXPECTED TYPE: HeaderMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/");
			apiPath = apiPath.concat(moduleAPIName.toString());
			apiPath = apiPath.concat("/search");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			handlerInstance.setParam(paramInstance);
			handlerInstance.setHeader(headerInstance);
			handlerInstance.setModuleAPIName(moduleAPIName);
			await Utility.getFields(moduleAPIName, handlerInstance);
			return handlerInstance.apiCall("Record.Model.ResponseHandler", "application/json");

		}

		/**
		 * The method to convert lead
		 * @param {Long} id A BigInt
		 * @param {ConvertBodyWrapper} request An instance of ConvertBodyWrapper
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async convertLead(id, request){
			if((!(Object.prototype.toString.call(id) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
			}
			if((request != null) && (!(request instanceof ZCRM.Record.Model.ConvertBodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: ConvertBodyWrapper", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/Leads/");
			apiPath = apiPath.concat(id.toString());
			apiPath = apiPath.concat("/actions/convert");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_POST);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_CREATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			handlerInstance.setMandatoryChecker(true);
			await Utility.getFields("Deals", handlerInstance);
			return handlerInstance.apiCall("Record.Model.ConvertActionHandler", "application/json");

		}

		/**
		 * The method to get photo
		 * @param {Long} id A BigInt
		 * @param {String} moduleAPIName A String
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getPhoto(id, moduleAPIName){
			if((!(Object.prototype.toString.call(id) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
			}
			if((!(Object.prototype.toString.call(moduleAPIName) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: moduleAPIName EXPECTED TYPE: String", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/");
			apiPath = apiPath.concat(moduleAPIName.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(id.toString());
			apiPath = apiPath.concat("/photo");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			await Utility.getFields(moduleAPIName, handlerInstance);
			return handlerInstance.apiCall("Record.Model.DownloadHandler", "application/x-download");

		}

		/**
		 * The method to upload photo
		 * @param {Long} id A BigInt
		 * @param {String} moduleAPIName A String
		 * @param {FileBodyWrapper} request An instance of FileBodyWrapper
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async uploadPhoto(id, moduleAPIName, request){
			if((!(Object.prototype.toString.call(id) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
			}
			if((!(Object.prototype.toString.call(moduleAPIName) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: moduleAPIName EXPECTED TYPE: String", null, null);
			}
			if((request != null) && (!(request instanceof ZCRM.Record.Model.FileBodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: FileBodyWrapper", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/");
			apiPath = apiPath.concat(moduleAPIName.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(id.toString());
			apiPath = apiPath.concat("/photo");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_POST);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_CREATE);
			handlerInstance.setContentType("multipart/form-data");
			handlerInstance.setRequest(request);
			handlerInstance.setMandatoryChecker(true);
			await Utility.getFields(moduleAPIName, handlerInstance);
			await Utility.verifyPhotoSupport(moduleAPIName);
			return handlerInstance.apiCall("Record.Model.FileHandler", "application/json");

		}

		/**
		 * The method to delete photo
		 * @param {Long} id A BigInt
		 * @param {String} moduleAPIName A String
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async deletePhoto(id, moduleAPIName){
			if((!(Object.prototype.toString.call(id) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
			}
			if((!(Object.prototype.toString.call(moduleAPIName) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: moduleAPIName EXPECTED TYPE: String", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/");
			apiPath = apiPath.concat(moduleAPIName.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(id.toString());
			apiPath = apiPath.concat("/photo");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_DELETE);
			handlerInstance.setCategoryMethod(Constants.REQUEST_METHOD_DELETE);
			await Utility.getFields(moduleAPIName, handlerInstance);
			return handlerInstance.apiCall("Record.Model.FileHandler", "application/json");

		}

		/**
		 * The method to mass update records
		 * @param {String} moduleAPIName A String
		 * @param {MassUpdateBodyWrapper} request An instance of MassUpdateBodyWrapper
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async massUpdateRecords(moduleAPIName, request){
			if((!(Object.prototype.toString.call(moduleAPIName) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: moduleAPIName EXPECTED TYPE: String", null, null);
			}
			if((request != null) && (!(request instanceof ZCRM.Record.Model.MassUpdateBodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: MassUpdateBodyWrapper", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/");
			apiPath = apiPath.concat(moduleAPIName.toString());
			apiPath = apiPath.concat("/actions/mass_update");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_POST);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_UPDATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			handlerInstance.setMandatoryChecker(true);
			handlerInstance.setModuleAPIName(moduleAPIName);
			await Utility.getFields(moduleAPIName, handlerInstance);
			return handlerInstance.apiCall("Record.Model.MassUpdateActionHandler", "application/json");

		}

		/**
		 * The method to get mass update status
		 * @param {String} moduleAPIName A String
		 * @param {ParameterMap} paramInstance An instance of ParameterMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getMassUpdateStatus(moduleAPIName, paramInstance=null){
			if((!(Object.prototype.toString.call(moduleAPIName) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: moduleAPIName EXPECTED TYPE: String", null, null);
			}
			if((paramInstance != null) && (!(paramInstance instanceof ParameterMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paramInstance EXPECTED TYPE: ParameterMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/");
			apiPath = apiPath.concat(moduleAPIName.toString());
			apiPath = apiPath.concat("/actions/mass_update");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			handlerInstance.setParam(paramInstance);
			await Utility.getFields(moduleAPIName, handlerInstance);
			return handlerInstance.apiCall("Record.Model.MassUpdateResponseHandler", "application/json");

		}

		/**
		 * The method to get record using external id
		 * @param {String} externalFieldValue A String
		 * @param {String} moduleAPIName A String
		 * @param {ParameterMap} paramInstance An instance of ParameterMap
		 * @param {HeaderMap} headerInstance An instance of HeaderMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getRecordUsingExternalId(externalFieldValue, moduleAPIName, paramInstance=null, headerInstance=null){
			if((!(Object.prototype.toString.call(externalFieldValue) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: externalFieldValue EXPECTED TYPE: String", null, null);
			}
			if((!(Object.prototype.toString.call(moduleAPIName) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: moduleAPIName EXPECTED TYPE: String", null, null);
			}
			if((paramInstance != null) && (!(paramInstance instanceof ParameterMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paramInstance EXPECTED TYPE: ParameterMap", null, null);
			}
			if((headerInstance != null) && (!(headerInstance instanceof HeaderMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: headerInstance EXPECTED TYPE: HeaderMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/");
			apiPath = apiPath.concat(moduleAPIName.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(externalFieldValue.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			handlerInstance.setParam(paramInstance);
			handlerInstance.setHeader(headerInstance);
			handlerInstance.setModuleAPIName(moduleAPIName);
			await Utility.getFields(moduleAPIName, handlerInstance);
			return handlerInstance.apiCall("Record.Model.ResponseHandler", "application/json");

		}

		/**
		 * The method to update record using external id
		 * @param {String} externalFieldValue A String
		 * @param {String} moduleAPIName A String
		 * @param {BodyWrapper} request An instance of BodyWrapper
		 * @param {HeaderMap} headerInstance An instance of HeaderMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async updateRecordUsingExternalId(externalFieldValue, moduleAPIName, request, headerInstance=null){
			if((!(Object.prototype.toString.call(externalFieldValue) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: externalFieldValue EXPECTED TYPE: String", null, null);
			}
			if((!(Object.prototype.toString.call(moduleAPIName) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: moduleAPIName EXPECTED TYPE: String", null, null);
			}
			if((request != null) && (!(request instanceof ZCRM.Record.Model.BodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: BodyWrapper", null, null);
			}
			if((headerInstance != null) && (!(headerInstance instanceof HeaderMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: headerInstance EXPECTED TYPE: HeaderMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/");
			apiPath = apiPath.concat(moduleAPIName.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(externalFieldValue.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_PUT);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_UPDATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			handlerInstance.setHeader(headerInstance);
			handlerInstance.setModuleAPIName(moduleAPIName);
			await Utility.getFields(moduleAPIName, handlerInstance);
			return handlerInstance.apiCall("Record.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to delete record using external id
		 * @param {String} externalFieldValue A String
		 * @param {String} moduleAPIName A String
		 * @param {ParameterMap} paramInstance An instance of ParameterMap
		 * @param {HeaderMap} headerInstance An instance of HeaderMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async deleteRecordUsingExternalId(externalFieldValue, moduleAPIName, paramInstance=null, headerInstance=null){
			if((!(Object.prototype.toString.call(externalFieldValue) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: externalFieldValue EXPECTED TYPE: String", null, null);
			}
			if((!(Object.prototype.toString.call(moduleAPIName) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: moduleAPIName EXPECTED TYPE: String", null, null);
			}
			if((paramInstance != null) && (!(paramInstance instanceof ParameterMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paramInstance EXPECTED TYPE: ParameterMap", null, null);
			}
			if((headerInstance != null) && (!(headerInstance instanceof HeaderMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: headerInstance EXPECTED TYPE: HeaderMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/");
			apiPath = apiPath.concat(moduleAPIName.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(externalFieldValue.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_DELETE);
			handlerInstance.setCategoryMethod(Constants.REQUEST_METHOD_DELETE);
			handlerInstance.setParam(paramInstance);
			handlerInstance.setHeader(headerInstance);
			await Utility.getFields(moduleAPIName, handlerInstance);
			return handlerInstance.apiCall("Record.Model.ActionHandler", "application/json");

		}
	},

}
ZCRM.Record.Model.InventoryLineItems = class extends ZCRM.Record.Model.Record{
	constructor(){
		super();

	}



	/**
	 * The method to get the product
	 * @returns {LineItemProduct} An instance of LineItemProduct
	 */
	getProduct(){
		return this.getKeyValue("product");

	}

	/**
	 * The method to set the value to product
	 * @param {LineItemProduct} product An instance of LineItemProduct
	 */
	setProduct(product){
		if((product != null) && (!(product instanceof ZCRM.Record.Model.LineItemProduct))){
			throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: product EXPECTED TYPE: LineItemProduct", null, null);
		}
		this.addKeyValue("product", product);

	}

	/**
	 * The method to get the quantity
	 * @returns {Double} A Float representing the quantity
	 */
	getQuantity(){
		return this.getKeyValue("quantity");

	}

	/**
	 * The method to set the value to quantity
	 * @param {Double} quantity A Float
	 */
	setQuantity(quantity){
		if((quantity != null) && (!(Object.prototype.toString.call(quantity) == "[object Number]"))){
			throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: quantity EXPECTED TYPE: Float", null, null);
		}
		this.addKeyValue("quantity", quantity);

	}

	/**
	 * The method to get the discount
	 * @returns {String} A String representing the discount
	 */
	getDiscount(){
		return this.getKeyValue("Discount");

	}

	/**
	 * The method to set the value to discount
	 * @param {String} discount A String
	 */
	setDiscount(discount){
		if((discount != null) && (!(Object.prototype.toString.call(discount) == "[object String]"))){
			throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: discount EXPECTED TYPE: String", null, null);
		}
		this.addKeyValue("Discount", discount);

	}

	/**
	 * The method to get the totalAfterDiscount
	 * @returns {Double} A Float representing the totalAfterDiscount
	 */
	getTotalAfterDiscount(){
		return this.getKeyValue("total_after_discount");

	}

	/**
	 * The method to set the value to totalAfterDiscount
	 * @param {Double} totalAfterDiscount A Float
	 */
	setTotalAfterDiscount(totalAfterDiscount){
		if((totalAfterDiscount != null) && (!(Object.prototype.toString.call(totalAfterDiscount) == "[object Number]"))){
			throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: totalAfterDiscount EXPECTED TYPE: Float", null, null);
		}
		this.addKeyValue("total_after_discount", totalAfterDiscount);

	}

	/**
	 * The method to get the netTotal
	 * @returns {Double} A Float representing the netTotal
	 */
	getNetTotal(){
		return this.getKeyValue("net_total");

	}

	/**
	 * The method to set the value to netTotal
	 * @param {Double} netTotal A Float
	 */
	setNetTotal(netTotal){
		if((netTotal != null) && (!(Object.prototype.toString.call(netTotal) == "[object Number]"))){
			throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: netTotal EXPECTED TYPE: Float", null, null);
		}
		this.addKeyValue("net_total", netTotal);

	}

	/**
	 * The method to get the book
	 * @returns {Double} A Float representing the book
	 */
	getBook(){
		return this.getKeyValue("book");

	}

	/**
	 * The method to set the value to book
	 * @param {Double} book A Float
	 */
	setBook(book){
		if((book != null) && (!(Object.prototype.toString.call(book) == "[object Number]"))){
			throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: book EXPECTED TYPE: Float", null, null);
		}
		this.addKeyValue("book", book);

	}

	/**
	 * The method to get the tax
	 * @returns {Double} A Float representing the tax
	 */
	getTax(){
		return this.getKeyValue("Tax");

	}

	/**
	 * The method to set the value to tax
	 * @param {Double} tax A Float
	 */
	setTax(tax){
		if((tax != null) && (!(Object.prototype.toString.call(tax) == "[object Number]"))){
			throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: tax EXPECTED TYPE: Float", null, null);
		}
		this.addKeyValue("Tax", tax);

	}

	/**
	 * The method to get the listPrice
	 * @returns {Double} A Float representing the listPrice
	 */
	getListPrice(){
		return this.getKeyValue("list_price");

	}

	/**
	 * The method to set the value to listPrice
	 * @param {Double} listPrice A Float
	 */
	setListPrice(listPrice){
		if((listPrice != null) && (!(Object.prototype.toString.call(listPrice) == "[object Number]"))){
			throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: listPrice EXPECTED TYPE: Float", null, null);
		}
		this.addKeyValue("list_price", listPrice);

	}

	/**
	 * The method to get the unitPrice
	 * @returns {Double} A Float representing the unitPrice
	 */
	getUnitPrice(){
		return this.getKeyValue("unit_price");

	}

	/**
	 * The method to set the value to unitPrice
	 * @param {Double} unitPrice A Float
	 */
	setUnitPrice(unitPrice){
		if((unitPrice != null) && (!(Object.prototype.toString.call(unitPrice) == "[object Number]"))){
			throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: unitPrice EXPECTED TYPE: Float", null, null);
		}
		this.addKeyValue("unit_price", unitPrice);

	}

	/**
	 * The method to get the quantityInStock
	 * @returns {Double} A Float representing the quantityInStock
	 */
	getQuantityInStock(){
		return this.getKeyValue("quantity_in_stock");

	}

	/**
	 * The method to set the value to quantityInStock
	 * @param {Double} quantityInStock A Float
	 */
	setQuantityInStock(quantityInStock){
		if((quantityInStock != null) && (!(Object.prototype.toString.call(quantityInStock) == "[object Number]"))){
			throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: quantityInStock EXPECTED TYPE: Float", null, null);
		}
		this.addKeyValue("quantity_in_stock", quantityInStock);

	}

	/**
	 * The method to get the total
	 * @returns {Double} A Float representing the total
	 */
	getTotal(){
		return this.getKeyValue("total");

	}

	/**
	 * The method to set the value to total
	 * @param {Double} total A Float
	 */
	setTotal(total){
		if((total != null) && (!(Object.prototype.toString.call(total) == "[object Number]"))){
			throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: total EXPECTED TYPE: Float", null, null);
		}
		this.addKeyValue("total", total);

	}

	/**
	 * The method to get the productDescription
	 * @returns {String} A String representing the productDescription
	 */
	getProductDescription(){
		return this.getKeyValue("product_description");

	}

	/**
	 * The method to set the value to productDescription
	 * @param {String} productDescription A String
	 */
	setProductDescription(productDescription){
		if((productDescription != null) && (!(Object.prototype.toString.call(productDescription) == "[object String]"))){
			throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: productDescription EXPECTED TYPE: String", null, null);
		}
		this.addKeyValue("product_description", productDescription);

	}

	/**
	 * The method to get the lineTax
	 * @returns {List} An Array representing the lineTax
	 */
	getLineTax(){
		return this.getKeyValue("line_tax");

	}

	/**
	 * The method to set the value to lineTax
	 * @param {List} lineTax An Array
	 */
	setLineTax(lineTax){
		if((lineTax != null) && (!(Object.prototype.toString.call(lineTax) == "[object Array]"))){
			throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: lineTax EXPECTED TYPE: Array", null, null);
		}
		this.addKeyValue("line_tax", lineTax);

	}
}

ZCRM.Record.Model.Field.Quotes = {
	OWNER : new ZCRM.Record.Model.Field("Owner"),
	DISCOUNT : new ZCRM.Record.Model.Field("Discount"),
	DESCRIPTION : new ZCRM.Record.Model.Field("Description"),
	SHIPPING_STATE : new ZCRM.Record.Model.Field("Shipping_State"),
	TAX : new ZCRM.Record.Model.Field("Tax"),
	MODIFIED_BY : new ZCRM.Record.Model.Field("Modified_By"),
	DEAL_NAME : new ZCRM.Record.Model.Field("Deal_Name"),
	VALID_TILL : new ZCRM.Record.Model.Field("Valid_Till"),
	BILLING_COUNTRY : new ZCRM.Record.Model.Field("Billing_Country"),
	ACCOUNT_NAME : new ZCRM.Record.Model.Field("Account_Name"),
	TEAM : new ZCRM.Record.Model.Field("Team"),
	ID : new ZCRM.Record.Model.Field("id"),
	CARRIER : new ZCRM.Record.Model.Field("Carrier"),
	QUOTE_STAGE : new ZCRM.Record.Model.Field("Quote_Stage"),
	GRAND_TOTAL : new ZCRM.Record.Model.Field("Grand_Total"),
	MODIFIED_TIME : new ZCRM.Record.Model.Field("Modified_Time"),
	BILLING_STREET : new ZCRM.Record.Model.Field("Billing_Street"),
	ADJUSTMENT : new ZCRM.Record.Model.Field("Adjustment"),
	CREATED_TIME : new ZCRM.Record.Model.Field("Created_Time"),
	TERMS_AND_CONDITIONS : new ZCRM.Record.Model.Field("Terms_and_Conditions"),
	SUB_TOTAL : new ZCRM.Record.Model.Field("Sub_Total"),
	BILLING_CODE : new ZCRM.Record.Model.Field("Billing_Code"),
	PRODUCT_DETAILS : new ZCRM.Record.Model.Field("Product_Details"),
	SUBJECT : new ZCRM.Record.Model.Field("Subject"),
	CONTACT_NAME : new ZCRM.Record.Model.Field("Contact_Name"),
	SHIPPING_CITY : new ZCRM.Record.Model.Field("Shipping_City"),
	SHIPPING_COUNTRY : new ZCRM.Record.Model.Field("Shipping_Country"),
	SHIPPING_CODE : new ZCRM.Record.Model.Field("Shipping_Code"),
	BILLING_CITY : new ZCRM.Record.Model.Field("Billing_City"),
	QUOTE_NUMBER : new ZCRM.Record.Model.Field("Quote_Number"),
	BILLING_STATE : new ZCRM.Record.Model.Field("Billing_State"),
	CREATED_BY : new ZCRM.Record.Model.Field("Created_By"),
	TAG : new ZCRM.Record.Model.Field("Tag"),
	SHIPPING_STREET : new ZCRM.Record.Model.Field("Shipping_Street"),
}
ZCRM.Record.Model.Field.Price_Books = {
	OWNER : new ZCRM.Record.Model.Field("Owner"),
	ACTIVE : new ZCRM.Record.Model.Field("Active"),
	MODIFIED_BY : new ZCRM.Record.Model.Field("Modified_By"),
	MODIFIED_TIME : new ZCRM.Record.Model.Field("Modified_Time"),
	PRICING_DETAILS : new ZCRM.Record.Model.Field("Pricing_Details"),
	PRICING_MODEL : new ZCRM.Record.Model.Field("Pricing_Model"),
	DESCRIPTION : new ZCRM.Record.Model.Field("Description"),
	CREATED_TIME : new ZCRM.Record.Model.Field("Created_Time"),
	PRICE_BOOK_NAME : new ZCRM.Record.Model.Field("Price_Book_Name"),
	ID : new ZCRM.Record.Model.Field("id"),
	CREATED_BY : new ZCRM.Record.Model.Field("Created_By"),
	TAG : new ZCRM.Record.Model.Field("Tag"),
}
ZCRM.Record.Model.Field.Contacts = {
	OWNER : new ZCRM.Record.Model.Field("Owner"),
	EMAIL : new ZCRM.Record.Model.Field("Email"),
	DESCRIPTION : new ZCRM.Record.Model.Field("Description"),
	VENDOR_NAME : new ZCRM.Record.Model.Field("Vendor_Name"),
	MAILING_ZIP : new ZCRM.Record.Model.Field("Mailing_Zip"),
	REPORTS_TO : new ZCRM.Record.Model.Field("Reports_To"),
	OTHER_PHONE : new ZCRM.Record.Model.Field("Other_Phone"),
	MAILING_STATE : new ZCRM.Record.Model.Field("Mailing_State"),
	TWITTER : new ZCRM.Record.Model.Field("Twitter"),
	OTHER_ZIP : new ZCRM.Record.Model.Field("Other_Zip"),
	MAILING_STREET : new ZCRM.Record.Model.Field("Mailing_Street"),
	OTHER_STATE : new ZCRM.Record.Model.Field("Other_State"),
	SALUTATION : new ZCRM.Record.Model.Field("Salutation"),
	OTHER_COUNTRY : new ZCRM.Record.Model.Field("Other_Country"),
	LAST_ACTIVITY_TIME : new ZCRM.Record.Model.Field("Last_Activity_Time"),
	FIRST_NAME : new ZCRM.Record.Model.Field("First_Name"),
	FULL_NAME : new ZCRM.Record.Model.Field("Full_Name"),
	ASST_PHONE : new ZCRM.Record.Model.Field("Asst_Phone"),
	RECORD_IMAGE : new ZCRM.Record.Model.Field("Record_Image"),
	DEPARTMENT : new ZCRM.Record.Model.Field("Department"),
	MODIFIED_BY : new ZCRM.Record.Model.Field("Modified_By"),
	SKYPE_ID : new ZCRM.Record.Model.Field("Skype_ID"),
	ASSISTANT : new ZCRM.Record.Model.Field("Assistant"),
	PHONE : new ZCRM.Record.Model.Field("Phone"),
	MAILING_COUNTRY : new ZCRM.Record.Model.Field("Mailing_Country"),
	ACCOUNT_NAME : new ZCRM.Record.Model.Field("Account_Name"),
	ID : new ZCRM.Record.Model.Field("id"),
	EMAIL_OPT_OUT : new ZCRM.Record.Model.Field("Email_Opt_Out"),
	REPORTING_TO : new ZCRM.Record.Model.Field("Reporting_To"),
	MODIFIED_TIME : new ZCRM.Record.Model.Field("Modified_Time"),
	DATE_OF_BIRTH : new ZCRM.Record.Model.Field("Date_of_Birth"),
	MAILING_CITY : new ZCRM.Record.Model.Field("Mailing_City"),
	OTHER_CITY : new ZCRM.Record.Model.Field("Other_City"),
	CREATED_TIME : new ZCRM.Record.Model.Field("Created_Time"),
	TITLE : new ZCRM.Record.Model.Field("Title"),
	OTHER_STREET : new ZCRM.Record.Model.Field("Other_Street"),
	MOBILE : new ZCRM.Record.Model.Field("Mobile"),
	TERRITORIES : new ZCRM.Record.Model.Field("Territories"),
	HOME_PHONE : new ZCRM.Record.Model.Field("Home_Phone"),
	LAST_NAME : new ZCRM.Record.Model.Field("Last_Name"),
	LEAD_SOURCE : new ZCRM.Record.Model.Field("Lead_Source"),
	IS_RECORD_DUPLICATE : new ZCRM.Record.Model.Field("Is_Record_Duplicate"),
	TAG : new ZCRM.Record.Model.Field("Tag"),
	CREATED_BY : new ZCRM.Record.Model.Field("Created_By"),
	FAX : new ZCRM.Record.Model.Field("Fax"),
	SECONDARY_EMAIL : new ZCRM.Record.Model.Field("Secondary_Email"),
}
ZCRM.Record.Model.Field.Accounts = {
	OWNER : new ZCRM.Record.Model.Field("Owner"),
	OWNERSHIP : new ZCRM.Record.Model.Field("Ownership"),
	DESCRIPTION : new ZCRM.Record.Model.Field("Description"),
	ACCOUNT_TYPE : new ZCRM.Record.Model.Field("Account_Type"),
	RATING : new ZCRM.Record.Model.Field("Rating"),
	SIC_CODE : new ZCRM.Record.Model.Field("SIC_Code"),
	SHIPPING_STATE : new ZCRM.Record.Model.Field("Shipping_State"),
	WEBSITE : new ZCRM.Record.Model.Field("Website"),
	EMPLOYEES : new ZCRM.Record.Model.Field("Employees"),
	LAST_ACTIVITY_TIME : new ZCRM.Record.Model.Field("Last_Activity_Time"),
	INDUSTRY : new ZCRM.Record.Model.Field("Industry"),
	RECORD_IMAGE : new ZCRM.Record.Model.Field("Record_Image"),
	MODIFIED_BY : new ZCRM.Record.Model.Field("Modified_By"),
	ACCOUNT_SITE : new ZCRM.Record.Model.Field("Account_Site"),
	PHONE : new ZCRM.Record.Model.Field("Phone"),
	BILLING_COUNTRY : new ZCRM.Record.Model.Field("Billing_Country"),
	ACCOUNT_NAME : new ZCRM.Record.Model.Field("Account_Name"),
	ID : new ZCRM.Record.Model.Field("id"),
	ACCOUNT_NUMBER : new ZCRM.Record.Model.Field("Account_Number"),
	TICKER_SYMBOL : new ZCRM.Record.Model.Field("Ticker_Symbol"),
	MODIFIED_TIME : new ZCRM.Record.Model.Field("Modified_Time"),
	BILLING_STREET : new ZCRM.Record.Model.Field("Billing_Street"),
	CREATED_TIME : new ZCRM.Record.Model.Field("Created_Time"),
	BILLING_CODE : new ZCRM.Record.Model.Field("Billing_Code"),
	TERRITORIES : new ZCRM.Record.Model.Field("Territories"),
	PARENT_ACCOUNT : new ZCRM.Record.Model.Field("Parent_Account"),
	SHIPPING_CITY : new ZCRM.Record.Model.Field("Shipping_City"),
	SHIPPING_COUNTRY : new ZCRM.Record.Model.Field("Shipping_Country"),
	SHIPPING_CODE : new ZCRM.Record.Model.Field("Shipping_Code"),
	BILLING_CITY : new ZCRM.Record.Model.Field("Billing_City"),
	BILLING_STATE : new ZCRM.Record.Model.Field("Billing_State"),
	TAG : new ZCRM.Record.Model.Field("Tag"),
	CREATED_BY : new ZCRM.Record.Model.Field("Created_By"),
	FAX : new ZCRM.Record.Model.Field("Fax"),
	ANNUAL_REVENUE : new ZCRM.Record.Model.Field("Annual_Revenue"),
	SHIPPING_STREET : new ZCRM.Record.Model.Field("Shipping_Street"),
}
ZCRM.Record.Model.Field.Sales_Orders = {
	OWNER : new ZCRM.Record.Model.Field("Owner"),
	DISCOUNT : new ZCRM.Record.Model.Field("Discount"),
	DESCRIPTION : new ZCRM.Record.Model.Field("Description"),
	CUSTOMER_NO : new ZCRM.Record.Model.Field("Customer_No"),
	SHIPPING_STATE : new ZCRM.Record.Model.Field("Shipping_State"),
	TAX : new ZCRM.Record.Model.Field("Tax"),
	MODIFIED_BY : new ZCRM.Record.Model.Field("Modified_By"),
	DEAL_NAME : new ZCRM.Record.Model.Field("Deal_Name"),
	BILLING_COUNTRY : new ZCRM.Record.Model.Field("Billing_Country"),
	ACCOUNT_NAME : new ZCRM.Record.Model.Field("Account_Name"),
	ID : new ZCRM.Record.Model.Field("id"),
	CARRIER : new ZCRM.Record.Model.Field("Carrier"),
	QUOTE_NAME : new ZCRM.Record.Model.Field("Quote_Name"),
	STATUS : new ZCRM.Record.Model.Field("Status"),
	SALES_COMMISSION : new ZCRM.Record.Model.Field("Sales_Commission"),
	GRAND_TOTAL : new ZCRM.Record.Model.Field("Grand_Total"),
	MODIFIED_TIME : new ZCRM.Record.Model.Field("Modified_Time"),
	DUE_DATE : new ZCRM.Record.Model.Field("Due_Date"),
	BILLING_STREET : new ZCRM.Record.Model.Field("Billing_Street"),
	ADJUSTMENT : new ZCRM.Record.Model.Field("Adjustment"),
	CREATED_TIME : new ZCRM.Record.Model.Field("Created_Time"),
	TERMS_AND_CONDITIONS : new ZCRM.Record.Model.Field("Terms_and_Conditions"),
	SUB_TOTAL : new ZCRM.Record.Model.Field("Sub_Total"),
	BILLING_CODE : new ZCRM.Record.Model.Field("Billing_Code"),
	PRODUCT_DETAILS : new ZCRM.Record.Model.Field("Product_Details"),
	SUBJECT : new ZCRM.Record.Model.Field("Subject"),
	CONTACT_NAME : new ZCRM.Record.Model.Field("Contact_Name"),
	EXCISE_DUTY : new ZCRM.Record.Model.Field("Excise_Duty"),
	SHIPPING_CITY : new ZCRM.Record.Model.Field("Shipping_City"),
	SHIPPING_COUNTRY : new ZCRM.Record.Model.Field("Shipping_Country"),
	SHIPPING_CODE : new ZCRM.Record.Model.Field("Shipping_Code"),
	BILLING_CITY : new ZCRM.Record.Model.Field("Billing_City"),
	SO_NUMBER : new ZCRM.Record.Model.Field("SO_Number"),
	PURCHASE_ORDER : new ZCRM.Record.Model.Field("Purchase_Order"),
	BILLING_STATE : new ZCRM.Record.Model.Field("Billing_State"),
	CREATED_BY : new ZCRM.Record.Model.Field("Created_By"),
	TAG : new ZCRM.Record.Model.Field("Tag"),
	PENDING : new ZCRM.Record.Model.Field("Pending"),
	SHIPPING_STREET : new ZCRM.Record.Model.Field("Shipping_Street"),
}
ZCRM.Record.Model.Field.Notes = {
	OWNER : new ZCRM.Record.Model.Field("Owner"),
	MODIFIED_BY : new ZCRM.Record.Model.Field("Modified_By"),
	MODIFIED_TIME : new ZCRM.Record.Model.Field("Modified_Time"),
	CREATED_TIME : new ZCRM.Record.Model.Field("Created_Time"),
	PARENT_ID : new ZCRM.Record.Model.Field("Parent_Id"),
	ID : new ZCRM.Record.Model.Field("id"),
	CREATED_BY : new ZCRM.Record.Model.Field("Created_By"),
	NOTE_TITLE : new ZCRM.Record.Model.Field("Note_Title"),
	NOTE_CONTENT : new ZCRM.Record.Model.Field("Note_Content"),
}
ZCRM.Record.Model.Field.Products = {
	PRODUCT_CATEGORY : new ZCRM.Record.Model.Field("Product_Category"),
	QTY_IN_DEMAND : new ZCRM.Record.Model.Field("Qty_in_Demand"),
	OWNER : new ZCRM.Record.Model.Field("Owner"),
	DESCRIPTION : new ZCRM.Record.Model.Field("Description"),
	VENDOR_NAME : new ZCRM.Record.Model.Field("Vendor_Name"),
	TAX : new ZCRM.Record.Model.Field("Tax"),
	SALES_START_DATE : new ZCRM.Record.Model.Field("Sales_Start_Date"),
	PRODUCT_ACTIVE : new ZCRM.Record.Model.Field("Product_Active"),
	RECORD_IMAGE : new ZCRM.Record.Model.Field("Record_Image"),
	MODIFIED_BY : new ZCRM.Record.Model.Field("Modified_By"),
	PRODUCT_CODE : new ZCRM.Record.Model.Field("Product_Code"),
	MANUFACTURER : new ZCRM.Record.Model.Field("Manufacturer"),
	ID : new ZCRM.Record.Model.Field("id"),
	SUPPORT_EXPIRY_DATE : new ZCRM.Record.Model.Field("Support_Expiry_Date"),
	MODIFIED_TIME : new ZCRM.Record.Model.Field("Modified_Time"),
	CREATED_TIME : new ZCRM.Record.Model.Field("Created_Time"),
	COMMISSION_RATE : new ZCRM.Record.Model.Field("Commission_Rate"),
	PRODUCT_NAME : new ZCRM.Record.Model.Field("Product_Name"),
	HANDLER : new ZCRM.Record.Model.Field("Handler"),
	SUPPORT_START_DATE : new ZCRM.Record.Model.Field("Support_Start_Date"),
	USAGE_UNIT : new ZCRM.Record.Model.Field("Usage_Unit"),
	QTY_ORDERED : new ZCRM.Record.Model.Field("Qty_Ordered"),
	QTY_IN_STOCK : new ZCRM.Record.Model.Field("Qty_in_Stock"),
	CREATED_BY : new ZCRM.Record.Model.Field("Created_By"),
	TAG : new ZCRM.Record.Model.Field("Tag"),
	SALES_END_DATE : new ZCRM.Record.Model.Field("Sales_End_Date"),
	UNIT_PRICE : new ZCRM.Record.Model.Field("Unit_Price"),
	TAXABLE : new ZCRM.Record.Model.Field("Taxable"),
	REORDER_LEVEL : new ZCRM.Record.Model.Field("Reorder_Level"),
}
ZCRM.Record.Model.Field.Cases = {
	OWNER : new ZCRM.Record.Model.Field("Owner"),
	EMAIL : new ZCRM.Record.Model.Field("Email"),
	DESCRIPTION : new ZCRM.Record.Model.Field("Description"),
	INTERNAL_COMMENTS : new ZCRM.Record.Model.Field("Internal_Comments"),
	NO_OF_COMMENTS : new ZCRM.Record.Model.Field("No_of_comments"),
	REPORTED_BY : new ZCRM.Record.Model.Field("Reported_By"),
	CASE_NUMBER : new ZCRM.Record.Model.Field("Case_Number"),
	MODIFIED_BY : new ZCRM.Record.Model.Field("Modified_By"),
	DEAL_NAME : new ZCRM.Record.Model.Field("Deal_Name"),
	PHONE : new ZCRM.Record.Model.Field("Phone"),
	ACCOUNT_NAME : new ZCRM.Record.Model.Field("Account_Name"),
	ID : new ZCRM.Record.Model.Field("id"),
	SOLUTION : new ZCRM.Record.Model.Field("Solution"),
	STATUS : new ZCRM.Record.Model.Field("Status"),
	MODIFIED_TIME : new ZCRM.Record.Model.Field("Modified_Time"),
	PRIORITY : new ZCRM.Record.Model.Field("Priority"),
	CREATED_TIME : new ZCRM.Record.Model.Field("Created_Time"),
	COMMENTS : new ZCRM.Record.Model.Field("Comments"),
	PRODUCT_NAME : new ZCRM.Record.Model.Field("Product_Name"),
	ADD_COMMENT : new ZCRM.Record.Model.Field("Add_Comment"),
	CASE_ORIGIN : new ZCRM.Record.Model.Field("Case_Origin"),
	SUBJECT : new ZCRM.Record.Model.Field("Subject"),
	CASE_REASON : new ZCRM.Record.Model.Field("Case_Reason"),
	TYPE : new ZCRM.Record.Model.Field("Type"),
	IS_RECORD_DUPLICATE : new ZCRM.Record.Model.Field("Is_Record_Duplicate"),
	TAG : new ZCRM.Record.Model.Field("Tag"),
	CREATED_BY : new ZCRM.Record.Model.Field("Created_By"),
	RELATED_TO : new ZCRM.Record.Model.Field("Related_To"),
}
ZCRM.Record.Model.LineItemProduct = class extends ZCRM.Record.Model.Record{
	constructor(){
		super();

	}



	/**
	 * The method to get the productCode
	 * @returns {String} A String representing the productCode
	 */
	getProductCode(){
		return this.getKeyValue("Product_Code");

	}

	/**
	 * The method to set the value to productCode
	 * @param {String} productCode A String
	 */
	setProductCode(productCode){
		if((productCode != null) && (!(Object.prototype.toString.call(productCode) == "[object String]"))){
			throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: productCode EXPECTED TYPE: String", null, null);
		}
		this.addKeyValue("Product_Code", productCode);

	}

	/**
	 * The method to get the currency
	 * @returns {String} A String representing the currency
	 */
	getCurrency(){
		return this.getKeyValue("Currency");

	}

	/**
	 * The method to set the value to currency
	 * @param {String} currency A String
	 */
	setCurrency(currency){
		if((currency != null) && (!(Object.prototype.toString.call(currency) == "[object String]"))){
			throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: currency EXPECTED TYPE: String", null, null);
		}
		this.addKeyValue("Currency", currency);

	}

	/**
	 * The method to get the name
	 * @returns {String} A String representing the name
	 */
	getName(){
		return this.getKeyValue("name");

	}

	/**
	 * The method to set the value to name
	 * @param {String} name A String
	 */
	setName(name){
		if((name != null) && (!(Object.prototype.toString.call(name) == "[object String]"))){
			throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: name EXPECTED TYPE: String", null, null);
		}
		this.addKeyValue("name", name);

	}
}

ZCRM.Record.Model.Field.Deals = {
	OWNER : new ZCRM.Record.Model.Field("Owner"),
	DESCRIPTION : new ZCRM.Record.Model.Field("Description"),
	CAMPAIGN_SOURCE : new ZCRM.Record.Model.Field("Campaign_Source"),
	CLOSING_DATE : new ZCRM.Record.Model.Field("Closing_Date"),
	LAST_ACTIVITY_TIME : new ZCRM.Record.Model.Field("Last_Activity_Time"),
	MODIFIED_BY : new ZCRM.Record.Model.Field("Modified_By"),
	LEAD_CONVERSION_TIME : new ZCRM.Record.Model.Field("Lead_Conversion_Time"),
	DEAL_NAME : new ZCRM.Record.Model.Field("Deal_Name"),
	EXPECTED_REVENUE : new ZCRM.Record.Model.Field("Expected_Revenue"),
	OVERALL_SALES_DURATION : new ZCRM.Record.Model.Field("Overall_Sales_Duration"),
	STAGE : new ZCRM.Record.Model.Field("Stage"),
	ID : new ZCRM.Record.Model.Field("id"),
	MODIFIED_TIME : new ZCRM.Record.Model.Field("Modified_Time"),
	TERRITORY : new ZCRM.Record.Model.Field("Territory"),
	CREATED_TIME : new ZCRM.Record.Model.Field("Created_Time"),
	AMOUNT : new ZCRM.Record.Model.Field("Amount"),
	PROBABILITY : new ZCRM.Record.Model.Field("Probability"),
	NEXT_STEP : new ZCRM.Record.Model.Field("Next_Step"),
	CONTACT_NAME : new ZCRM.Record.Model.Field("Contact_Name"),
	SALES_CYCLE_DURATION : new ZCRM.Record.Model.Field("Sales_Cycle_Duration"),
	TYPE : new ZCRM.Record.Model.Field("Type"),
	DEAL_CATEGORY_STATUS : new ZCRM.Record.Model.Field("Deal_Category_Status"),
	LEAD_SOURCE : new ZCRM.Record.Model.Field("Lead_Source"),
	CREATED_BY : new ZCRM.Record.Model.Field("Created_By"),
	TAG : new ZCRM.Record.Model.Field("Tag"),
}
ZCRM.Record.Model.Field.Events = {
	ALL_DAY : new ZCRM.Record.Model.Field("All_day"),
	OWNER : new ZCRM.Record.Model.Field("Owner"),
	CHECK_IN_STATE : new ZCRM.Record.Model.Field("Check_In_State"),
	CHECK_IN_ADDRESS : new ZCRM.Record.Model.Field("Check_In_Address"),
	DESCRIPTION : new ZCRM.Record.Model.Field("Description"),
	START_DATETIME : new ZCRM.Record.Model.Field("Start_DateTime"),
	LATITUDE : new ZCRM.Record.Model.Field("Latitude"),
	PARTICIPANTS : new ZCRM.Record.Model.Field("Participants"),
	EVENT_TITLE : new ZCRM.Record.Model.Field("Event_Title"),
	END_DATETIME : new ZCRM.Record.Model.Field("End_DateTime"),
	CHECK_IN_BY : new ZCRM.Record.Model.Field("Check_In_By"),
	MODIFIED_BY : new ZCRM.Record.Model.Field("Modified_By"),
	CHECK_IN_CITY : new ZCRM.Record.Model.Field("Check_In_City"),
	ID : new ZCRM.Record.Model.Field("id"),
	CHECK_IN_COMMENT : new ZCRM.Record.Model.Field("Check_In_Comment"),
	REMIND_AT : new ZCRM.Record.Model.Field("Remind_At"),
	WHO_ID : new ZCRM.Record.Model.Field("Who_Id"),
	CHECK_IN_STATUS : new ZCRM.Record.Model.Field("Check_In_Status"),
	CHECK_IN_COUNTRY : new ZCRM.Record.Model.Field("Check_In_Country"),
	MODIFIED_TIME : new ZCRM.Record.Model.Field("Modified_Time"),
	VENUE : new ZCRM.Record.Model.Field("Venue"),
	ZIP_CODE : new ZCRM.Record.Model.Field("ZIP_Code"),
	CREATED_TIME : new ZCRM.Record.Model.Field("Created_Time"),
	LONGITUDE : new ZCRM.Record.Model.Field("Longitude"),
	CHECK_IN_TIME : new ZCRM.Record.Model.Field("Check_In_Time"),
	RECURRING_ACTIVITY : new ZCRM.Record.Model.Field("Recurring_Activity"),
	WHAT_ID : new ZCRM.Record.Model.Field("What_Id"),
	CHECK_IN_SUB_LOCALITY : new ZCRM.Record.Model.Field("Check_In_Sub_Locality"),
	CREATED_BY : new ZCRM.Record.Model.Field("Created_By"),
	TAG : new ZCRM.Record.Model.Field("Tag"),
}
ZCRM.Record.Model.Participants = class extends ZCRM.Record.Model.Record{
	constructor(){
		super();

	}



	/**
	 * The method to get the name
	 * @returns {String} A String representing the name
	 */
	getName(){
		return this.getKeyValue("name");

	}

	/**
	 * The method to set the value to name
	 * @param {String} name A String
	 */
	setName(name){
		if((name != null) && (!(Object.prototype.toString.call(name) == "[object String]"))){
			throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: name EXPECTED TYPE: String", null, null);
		}
		this.addKeyValue("name", name);

	}

	/**
	 * The method to get the email
	 * @returns {String} A String representing the email
	 */
	getEmail(){
		return this.getKeyValue("Email");

	}

	/**
	 * The method to set the value to email
	 * @param {String} email A String
	 */
	setEmail(email){
		if((email != null) && (!(Object.prototype.toString.call(email) == "[object String]"))){
			throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: email EXPECTED TYPE: String", null, null);
		}
		this.addKeyValue("Email", email);

	}

	/**
	 * The method to get the invited
	 * @returns {Boolean} A Boolean representing the invited
	 */
	getInvited(){
		return this.getKeyValue("invited");

	}

	/**
	 * The method to set the value to invited
	 * @param {Boolean} invited A Boolean
	 */
	setInvited(invited){
		if((invited != null) && (!(Object.prototype.toString.call(invited) == "[object Boolean]"))){
			throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: invited EXPECTED TYPE: Boolean", null, null);
		}
		this.addKeyValue("invited", invited);

	}

	/**
	 * The method to get the type
	 * @returns {String} A String representing the type
	 */
	getType(){
		return this.getKeyValue("type");

	}

	/**
	 * The method to set the value to type
	 * @param {String} type A String
	 */
	setType(type){
		if((type != null) && (!(Object.prototype.toString.call(type) == "[object String]"))){
			throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: type EXPECTED TYPE: String", null, null);
		}
		this.addKeyValue("type", type);

	}

	/**
	 * The method to get the participant
	 * @returns {String} A String representing the participant
	 */
	getParticipant(){
		return this.getKeyValue("participant");

	}

	/**
	 * The method to set the value to participant
	 * @param {String} participant A String
	 */
	setParticipant(participant){
		if((participant != null) && (!(Object.prototype.toString.call(participant) == "[object String]"))){
			throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: participant EXPECTED TYPE: String", null, null);
		}
		this.addKeyValue("participant", participant);

	}

	/**
	 * The method to get the status
	 * @returns {String} A String representing the status
	 */
	getStatus(){
		return this.getKeyValue("status");

	}

	/**
	 * The method to set the value to status
	 * @param {String} status A String
	 */
	setStatus(status){
		if((status != null) && (!(Object.prototype.toString.call(status) == "[object String]"))){
			throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: String", null, null);
		}
		this.addKeyValue("status", status);

	}
}

ZCRM.Record.Model.Field.Invoices = {
	OWNER : new ZCRM.Record.Model.Field("Owner"),
	DISCOUNT : new ZCRM.Record.Model.Field("Discount"),
	DESCRIPTION : new ZCRM.Record.Model.Field("Description"),
	SHIPPING_STATE : new ZCRM.Record.Model.Field("Shipping_State"),
	TAX : new ZCRM.Record.Model.Field("Tax"),
	INVOICE_DATE : new ZCRM.Record.Model.Field("Invoice_Date"),
	MODIFIED_BY : new ZCRM.Record.Model.Field("Modified_By"),
	BILLING_COUNTRY : new ZCRM.Record.Model.Field("Billing_Country"),
	ACCOUNT_NAME : new ZCRM.Record.Model.Field("Account_Name"),
	ID : new ZCRM.Record.Model.Field("id"),
	SALES_ORDER : new ZCRM.Record.Model.Field("Sales_Order"),
	STATUS : new ZCRM.Record.Model.Field("Status"),
	GRAND_TOTAL : new ZCRM.Record.Model.Field("Grand_Total"),
	SALES_COMMISSION : new ZCRM.Record.Model.Field("Sales_Commission"),
	MODIFIED_TIME : new ZCRM.Record.Model.Field("Modified_Time"),
	DUE_DATE : new ZCRM.Record.Model.Field("Due_Date"),
	BILLING_STREET : new ZCRM.Record.Model.Field("Billing_Street"),
	ADJUSTMENT : new ZCRM.Record.Model.Field("Adjustment"),
	CREATED_TIME : new ZCRM.Record.Model.Field("Created_Time"),
	TERMS_AND_CONDITIONS : new ZCRM.Record.Model.Field("Terms_and_Conditions"),
	SUB_TOTAL : new ZCRM.Record.Model.Field("Sub_Total"),
	INVOICE_NUMBER : new ZCRM.Record.Model.Field("Invoice_Number"),
	BILLING_CODE : new ZCRM.Record.Model.Field("Billing_Code"),
	PRODUCT_DETAILS : new ZCRM.Record.Model.Field("Product_Details"),
	SUBJECT : new ZCRM.Record.Model.Field("Subject"),
	CONTACT_NAME : new ZCRM.Record.Model.Field("Contact_Name"),
	EXCISE_DUTY : new ZCRM.Record.Model.Field("Excise_Duty"),
	SHIPPING_CITY : new ZCRM.Record.Model.Field("Shipping_City"),
	SHIPPING_COUNTRY : new ZCRM.Record.Model.Field("Shipping_Country"),
	SHIPPING_CODE : new ZCRM.Record.Model.Field("Shipping_Code"),
	BILLING_CITY : new ZCRM.Record.Model.Field("Billing_City"),
	PURCHASE_ORDER : new ZCRM.Record.Model.Field("Purchase_Order"),
	BILLING_STATE : new ZCRM.Record.Model.Field("Billing_State"),
	CREATED_BY : new ZCRM.Record.Model.Field("Created_By"),
	TAG : new ZCRM.Record.Model.Field("Tag"),
	SHIPPING_STREET : new ZCRM.Record.Model.Field("Shipping_Street"),
}
ZCRM.Record.Model.PricingDetails = class extends ZCRM.Record.Model.Record{
	constructor(){
		super();

	}



	/**
	 * The method to get the toRange
	 * @returns {Double} A Float representing the toRange
	 */
	getToRange(){
		return this.getKeyValue("to_range");

	}

	/**
	 * The method to set the value to toRange
	 * @param {Double} toRange A Float
	 */
	setToRange(toRange){
		if((toRange != null) && (!(Object.prototype.toString.call(toRange) == "[object Number]"))){
			throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: toRange EXPECTED TYPE: Float", null, null);
		}
		this.addKeyValue("to_range", toRange);

	}

	/**
	 * The method to get the discount
	 * @returns {Double} A Float representing the discount
	 */
	getDiscount(){
		return this.getKeyValue("discount");

	}

	/**
	 * The method to set the value to discount
	 * @param {Double} discount A Float
	 */
	setDiscount(discount){
		if((discount != null) && (!(Object.prototype.toString.call(discount) == "[object Number]"))){
			throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: discount EXPECTED TYPE: Float", null, null);
		}
		this.addKeyValue("discount", discount);

	}

	/**
	 * The method to get the fromRange
	 * @returns {Double} A Float representing the fromRange
	 */
	getFromRange(){
		return this.getKeyValue("from_range");

	}

	/**
	 * The method to set the value to fromRange
	 * @param {Double} fromRange A Float
	 */
	setFromRange(fromRange){
		if((fromRange != null) && (!(Object.prototype.toString.call(fromRange) == "[object Number]"))){
			throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: fromRange EXPECTED TYPE: Float", null, null);
		}
		this.addKeyValue("from_range", fromRange);

	}
}

ZCRM.Record.Model.Field.Tasks = {
	STATUS : new ZCRM.Record.Model.Field("Status"),
	OWNER : new ZCRM.Record.Model.Field("Owner"),
	MODIFIED_TIME : new ZCRM.Record.Model.Field("Modified_Time"),
	DESCRIPTION : new ZCRM.Record.Model.Field("Description"),
	DUE_DATE : new ZCRM.Record.Model.Field("Due_Date"),
	PRIORITY : new ZCRM.Record.Model.Field("Priority"),
	CREATED_TIME : new ZCRM.Record.Model.Field("Created_Time"),
	CLOSED_TIME : new ZCRM.Record.Model.Field("Closed_Time"),
	SUBJECT : new ZCRM.Record.Model.Field("Subject"),
	SEND_NOTIFICATION_EMAIL : new ZCRM.Record.Model.Field("Send_Notification_Email"),
	MODIFIED_BY : new ZCRM.Record.Model.Field("Modified_By"),
	RECURRING_ACTIVITY : new ZCRM.Record.Model.Field("Recurring_Activity"),
	WHAT_ID : new ZCRM.Record.Model.Field("What_Id"),
	ID : new ZCRM.Record.Model.Field("id"),
	CREATED_BY : new ZCRM.Record.Model.Field("Created_By"),
	TAG : new ZCRM.Record.Model.Field("Tag"),
	REMIND_AT : new ZCRM.Record.Model.Field("Remind_At"),
	WHO_ID : new ZCRM.Record.Model.Field("Who_Id"),
}
ZCRM.Record.Model.Consent = class extends ZCRM.Record.Model.Record{
	constructor(){
		super();

	}



	/**
	 * The method to get the owner
	 * @returns {User} An instance of User
	 */
	getOwner(){
		return this.getKeyValue("Owner");

	}

	/**
	 * The method to set the value to owner
	 * @param {User} owner An instance of User
	 */
	setOwner(owner){
		if((owner != null) && (!(owner instanceof ZCRM.User.Model.User))){
			throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: owner EXPECTED TYPE: User", null, null);
		}
		this.addKeyValue("Owner", owner);

	}

	/**
	 * The method to get the contactThroughEmail
	 * @returns {Boolean} A Boolean representing the contactThroughEmail
	 */
	getContactThroughEmail(){
		return this.getKeyValue("Contact_Through_Email");

	}

	/**
	 * The method to set the value to contactThroughEmail
	 * @param {Boolean} contactThroughEmail A Boolean
	 */
	setContactThroughEmail(contactThroughEmail){
		if((contactThroughEmail != null) && (!(Object.prototype.toString.call(contactThroughEmail) == "[object Boolean]"))){
			throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: contactThroughEmail EXPECTED TYPE: Boolean", null, null);
		}
		this.addKeyValue("Contact_Through_Email", contactThroughEmail);

	}

	/**
	 * The method to get the contactThroughSocial
	 * @returns {Boolean} A Boolean representing the contactThroughSocial
	 */
	getContactThroughSocial(){
		return this.getKeyValue("Contact_Through_Social");

	}

	/**
	 * The method to set the value to contactThroughSocial
	 * @param {Boolean} contactThroughSocial A Boolean
	 */
	setContactThroughSocial(contactThroughSocial){
		if((contactThroughSocial != null) && (!(Object.prototype.toString.call(contactThroughSocial) == "[object Boolean]"))){
			throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: contactThroughSocial EXPECTED TYPE: Boolean", null, null);
		}
		this.addKeyValue("Contact_Through_Social", contactThroughSocial);

	}

	/**
	 * The method to get the contactThroughSurvey
	 * @returns {Boolean} A Boolean representing the contactThroughSurvey
	 */
	getContactThroughSurvey(){
		return this.getKeyValue("Contact_Through_Survey");

	}

	/**
	 * The method to set the value to contactThroughSurvey
	 * @param {Boolean} contactThroughSurvey A Boolean
	 */
	setContactThroughSurvey(contactThroughSurvey){
		if((contactThroughSurvey != null) && (!(Object.prototype.toString.call(contactThroughSurvey) == "[object Boolean]"))){
			throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: contactThroughSurvey EXPECTED TYPE: Boolean", null, null);
		}
		this.addKeyValue("Contact_Through_Survey", contactThroughSurvey);

	}

	/**
	 * The method to get the contactThroughPhone
	 * @returns {Boolean} A Boolean representing the contactThroughPhone
	 */
	getContactThroughPhone(){
		return this.getKeyValue("Contact_Through_Phone");

	}

	/**
	 * The method to set the value to contactThroughPhone
	 * @param {Boolean} contactThroughPhone A Boolean
	 */
	setContactThroughPhone(contactThroughPhone){
		if((contactThroughPhone != null) && (!(Object.prototype.toString.call(contactThroughPhone) == "[object Boolean]"))){
			throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: contactThroughPhone EXPECTED TYPE: Boolean", null, null);
		}
		this.addKeyValue("Contact_Through_Phone", contactThroughPhone);

	}

	/**
	 * The method to get the mailSentTime
	 * @returns {OffsetDateTime} An instance of OffsetDateTime
	 */
	getMailSentTime(){
		return this.getKeyValue("Mail_Sent_Time");

	}

	/**
	 * The method to set the value to mailSentTime
	 * @param {OffsetDateTime} mailSentTime An instance of OffsetDateTime
	 */
	setMailSentTime(mailSentTime){
		if((mailSentTime != null) && (!(mailSentTime instanceof Date))){
			throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: mailSentTime EXPECTED TYPE: Date", null, null);
		}
		this.addKeyValue("Mail_Sent_Time", mailSentTime);

	}

	/**
	 * The method to get the consentDate
	 * @returns {LocalDate} An instance of LocalDate
	 */
	getConsentDate(){
		return this.getKeyValue("Consent_Date");

	}

	/**
	 * The method to set the value to consentDate
	 * @param {LocalDate} consentDate An instance of LocalDate
	 */
	setConsentDate(consentDate){
		if((consentDate != null) && (!(consentDate instanceof Date))){
			throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: consentDate EXPECTED TYPE: Date", null, null);
		}
		this.addKeyValue("Consent_Date", consentDate);

	}

	/**
	 * The method to get the consentRemarks
	 * @returns {String} A String representing the consentRemarks
	 */
	getConsentRemarks(){
		return this.getKeyValue("Consent_Remarks");

	}

	/**
	 * The method to set the value to consentRemarks
	 * @param {String} consentRemarks A String
	 */
	setConsentRemarks(consentRemarks){
		if((consentRemarks != null) && (!(Object.prototype.toString.call(consentRemarks) == "[object String]"))){
			throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: consentRemarks EXPECTED TYPE: String", null, null);
		}
		this.addKeyValue("Consent_Remarks", consentRemarks);

	}

	/**
	 * The method to get the consentThrough
	 * @returns {String} A String representing the consentThrough
	 */
	getConsentThrough(){
		return this.getKeyValue("Consent_Through");

	}

	/**
	 * The method to set the value to consentThrough
	 * @param {String} consentThrough A String
	 */
	setConsentThrough(consentThrough){
		if((consentThrough != null) && (!(Object.prototype.toString.call(consentThrough) == "[object String]"))){
			throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: consentThrough EXPECTED TYPE: String", null, null);
		}
		this.addKeyValue("Consent_Through", consentThrough);

	}

	/**
	 * The method to get the dataProcessingBasis
	 * @returns {String} A String representing the dataProcessingBasis
	 */
	getDataProcessingBasis(){
		return this.getKeyValue("Data_Processing_Basis");

	}

	/**
	 * The method to set the value to dataProcessingBasis
	 * @param {String} dataProcessingBasis A String
	 */
	setDataProcessingBasis(dataProcessingBasis){
		if((dataProcessingBasis != null) && (!(Object.prototype.toString.call(dataProcessingBasis) == "[object String]"))){
			throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: dataProcessingBasis EXPECTED TYPE: String", null, null);
		}
		this.addKeyValue("Data_Processing_Basis", dataProcessingBasis);

	}
}

ZCRM.Record.Model.Field.Calls = {
	CALL_DURATION : new ZCRM.Record.Model.Field("Call_Duration"),
	OWNER : new ZCRM.Record.Model.Field("Owner"),
	MODIFIED_TIME : new ZCRM.Record.Model.Field("Modified_Time"),
	DESCRIPTION : new ZCRM.Record.Model.Field("Description"),
	REMINDER : new ZCRM.Record.Model.Field("Reminder"),
	CALLER_ID : new ZCRM.Record.Model.Field("Caller_ID"),
	CTI_ENTRY : new ZCRM.Record.Model.Field("CTI_Entry"),
	CREATED_TIME : new ZCRM.Record.Model.Field("Created_Time"),
	CALL_START_TIME : new ZCRM.Record.Model.Field("Call_Start_Time"),
	SUBJECT : new ZCRM.Record.Model.Field("Subject"),
	CALL_AGENDA : new ZCRM.Record.Model.Field("Call_Agenda"),
	CALL_RESULT : new ZCRM.Record.Model.Field("Call_Result"),
	CALL_TYPE : new ZCRM.Record.Model.Field("Call_Type"),
	MODIFIED_BY : new ZCRM.Record.Model.Field("Modified_By"),
	WHAT_ID : new ZCRM.Record.Model.Field("What_Id"),
	CALL_DURATION_IN_SECONDS : new ZCRM.Record.Model.Field("Call_Duration_in_seconds"),
	CALL_PURPOSE : new ZCRM.Record.Model.Field("Call_Purpose"),
	ID : new ZCRM.Record.Model.Field("id"),
	CREATED_BY : new ZCRM.Record.Model.Field("Created_By"),
	TAG : new ZCRM.Record.Model.Field("Tag"),
	DIALLED_NUMBER : new ZCRM.Record.Model.Field("Dialled_Number"),
	CALL_STATUS : new ZCRM.Record.Model.Field("Call_Status"),
	WHO_ID : new ZCRM.Record.Model.Field("Who_Id"),
}
ZCRM.Record.Model.Field.Attachments = {
	OWNER : new ZCRM.Record.Model.Field("Owner"),
	MODIFIED_BY : new ZCRM.Record.Model.Field("Modified_By"),
	MODIFIED_TIME : new ZCRM.Record.Model.Field("Modified_Time"),
	FILE_NAME : new ZCRM.Record.Model.Field("File_Name"),
	CREATED_TIME : new ZCRM.Record.Model.Field("Created_Time"),
	SIZE : new ZCRM.Record.Model.Field("Size"),
	PARENT_ID : new ZCRM.Record.Model.Field("Parent_Id"),
	ID : new ZCRM.Record.Model.Field("id"),
	CREATED_BY : new ZCRM.Record.Model.Field("Created_By"),
}
ZCRM.Record.Model.Field.Purchase_Orders = {
	OWNER : new ZCRM.Record.Model.Field("Owner"),
	DISCOUNT : new ZCRM.Record.Model.Field("Discount"),
	DESCRIPTION : new ZCRM.Record.Model.Field("Description"),
	VENDOR_NAME : new ZCRM.Record.Model.Field("Vendor_Name"),
	SHIPPING_STATE : new ZCRM.Record.Model.Field("Shipping_State"),
	TAX : new ZCRM.Record.Model.Field("Tax"),
	PO_DATE : new ZCRM.Record.Model.Field("PO_Date"),
	MODIFIED_BY : new ZCRM.Record.Model.Field("Modified_By"),
	BILLING_COUNTRY : new ZCRM.Record.Model.Field("Billing_Country"),
	ID : new ZCRM.Record.Model.Field("id"),
	CARRIER : new ZCRM.Record.Model.Field("Carrier"),
	STATUS : new ZCRM.Record.Model.Field("Status"),
	GRAND_TOTAL : new ZCRM.Record.Model.Field("Grand_Total"),
	SALES_COMMISSION : new ZCRM.Record.Model.Field("Sales_Commission"),
	MODIFIED_TIME : new ZCRM.Record.Model.Field("Modified_Time"),
	PO_NUMBER : new ZCRM.Record.Model.Field("PO_Number"),
	DUE_DATE : new ZCRM.Record.Model.Field("Due_Date"),
	BILLING_STREET : new ZCRM.Record.Model.Field("Billing_Street"),
	ADJUSTMENT : new ZCRM.Record.Model.Field("Adjustment"),
	CREATED_TIME : new ZCRM.Record.Model.Field("Created_Time"),
	TERMS_AND_CONDITIONS : new ZCRM.Record.Model.Field("Terms_and_Conditions"),
	SUB_TOTAL : new ZCRM.Record.Model.Field("Sub_Total"),
	BILLING_CODE : new ZCRM.Record.Model.Field("Billing_Code"),
	PRODUCT_DETAILS : new ZCRM.Record.Model.Field("Product_Details"),
	SUBJECT : new ZCRM.Record.Model.Field("Subject"),
	TRACKING_NUMBER : new ZCRM.Record.Model.Field("Tracking_Number"),
	CONTACT_NAME : new ZCRM.Record.Model.Field("Contact_Name"),
	EXCISE_DUTY : new ZCRM.Record.Model.Field("Excise_Duty"),
	SHIPPING_CITY : new ZCRM.Record.Model.Field("Shipping_City"),
	SHIPPING_COUNTRY : new ZCRM.Record.Model.Field("Shipping_Country"),
	SHIPPING_CODE : new ZCRM.Record.Model.Field("Shipping_Code"),
	BILLING_CITY : new ZCRM.Record.Model.Field("Billing_City"),
	REQUISITION_NO : new ZCRM.Record.Model.Field("Requisition_No"),
	BILLING_STATE : new ZCRM.Record.Model.Field("Billing_State"),
	CREATED_BY : new ZCRM.Record.Model.Field("Created_By"),
	TAG : new ZCRM.Record.Model.Field("Tag"),
	SHIPPING_STREET : new ZCRM.Record.Model.Field("Shipping_Street"),
}
ZCRM.Record.Model.Field.Vendors = {
	OWNER : new ZCRM.Record.Model.Field("Owner"),
	MODIFIED_TIME : new ZCRM.Record.Model.Field("Modified_Time"),
	EMAIL : new ZCRM.Record.Model.Field("Email"),
	CATEGORY : new ZCRM.Record.Model.Field("Category"),
	DESCRIPTION : new ZCRM.Record.Model.Field("Description"),
	VENDOR_NAME : new ZCRM.Record.Model.Field("Vendor_Name"),
	CREATED_TIME : new ZCRM.Record.Model.Field("Created_Time"),
	WEBSITE : new ZCRM.Record.Model.Field("Website"),
	CITY : new ZCRM.Record.Model.Field("City"),
	RECORD_IMAGE : new ZCRM.Record.Model.Field("Record_Image"),
	MODIFIED_BY : new ZCRM.Record.Model.Field("Modified_By"),
	PHONE : new ZCRM.Record.Model.Field("Phone"),
	STATE : new ZCRM.Record.Model.Field("State"),
	GL_ACCOUNT : new ZCRM.Record.Model.Field("GL_Account"),
	STREET : new ZCRM.Record.Model.Field("Street"),
	COUNTRY : new ZCRM.Record.Model.Field("Country"),
	ZIP_CODE : new ZCRM.Record.Model.Field("Zip_Code"),
	ID : new ZCRM.Record.Model.Field("id"),
	CREATED_BY : new ZCRM.Record.Model.Field("Created_By"),
	TAG : new ZCRM.Record.Model.Field("Tag"),
}
ZCRM.Record.Model.Field.Campaigns = {
	STATUS : new ZCRM.Record.Model.Field("Status"),
	OWNER : new ZCRM.Record.Model.Field("Owner"),
	MODIFIED_TIME : new ZCRM.Record.Model.Field("Modified_Time"),
	DESCRIPTION : new ZCRM.Record.Model.Field("Description"),
	CAMPAIGN_NAME : new ZCRM.Record.Model.Field("Campaign_Name"),
	CREATED_TIME : new ZCRM.Record.Model.Field("Created_Time"),
	END_DATE : new ZCRM.Record.Model.Field("End_Date"),
	TYPE : new ZCRM.Record.Model.Field("Type"),
	MODIFIED_BY : new ZCRM.Record.Model.Field("Modified_By"),
	NUM_SENT : new ZCRM.Record.Model.Field("Num_sent"),
	EXPECTED_REVENUE : new ZCRM.Record.Model.Field("Expected_Revenue"),
	ACTUAL_COST : new ZCRM.Record.Model.Field("Actual_Cost"),
	ID : new ZCRM.Record.Model.Field("id"),
	EXPECTED_RESPONSE : new ZCRM.Record.Model.Field("Expected_Response"),
	CREATED_BY : new ZCRM.Record.Model.Field("Created_By"),
	TAG : new ZCRM.Record.Model.Field("Tag"),
	PARENT_CAMPAIGN : new ZCRM.Record.Model.Field("Parent_Campaign"),
	START_DATE : new ZCRM.Record.Model.Field("Start_Date"),
	BUDGETED_COST : new ZCRM.Record.Model.Field("Budgeted_Cost"),
}
ZCRM.Record.Model.Field.Solutions = {
	STATUS : new ZCRM.Record.Model.Field("Status"),
	OWNER : new ZCRM.Record.Model.Field("Owner"),
	MODIFIED_TIME : new ZCRM.Record.Model.Field("Modified_Time"),
	CREATED_TIME : new ZCRM.Record.Model.Field("Created_Time"),
	COMMENTS : new ZCRM.Record.Model.Field("Comments"),
	NO_OF_COMMENTS : new ZCRM.Record.Model.Field("No_of_comments"),
	PRODUCT_NAME : new ZCRM.Record.Model.Field("Product_Name"),
	ADD_COMMENT : new ZCRM.Record.Model.Field("Add_Comment"),
	SOLUTION_NUMBER : new ZCRM.Record.Model.Field("Solution_Number"),
	ANSWER : new ZCRM.Record.Model.Field("Answer"),
	MODIFIED_BY : new ZCRM.Record.Model.Field("Modified_By"),
	SOLUTION_TITLE : new ZCRM.Record.Model.Field("Solution_Title"),
	PUBLISHED : new ZCRM.Record.Model.Field("Published"),
	QUESTION : new ZCRM.Record.Model.Field("Question"),
	ID : new ZCRM.Record.Model.Field("id"),
	CREATED_BY : new ZCRM.Record.Model.Field("Created_By"),
	TAG : new ZCRM.Record.Model.Field("Tag"),
}
ZCRM.Record.Model.Field.Leads = {
	OWNER : new ZCRM.Record.Model.Field("Owner"),
	COMPANY : new ZCRM.Record.Model.Field("Company"),
	EMAIL : new ZCRM.Record.Model.Field("Email"),
	DESCRIPTION : new ZCRM.Record.Model.Field("Description"),
	RATING : new ZCRM.Record.Model.Field("Rating"),
	WEBSITE : new ZCRM.Record.Model.Field("Website"),
	TWITTER : new ZCRM.Record.Model.Field("Twitter"),
	SALUTATION : new ZCRM.Record.Model.Field("Salutation"),
	LAST_ACTIVITY_TIME : new ZCRM.Record.Model.Field("Last_Activity_Time"),
	FIRST_NAME : new ZCRM.Record.Model.Field("First_Name"),
	FULL_NAME : new ZCRM.Record.Model.Field("Full_Name"),
	LEAD_STATUS : new ZCRM.Record.Model.Field("Lead_Status"),
	INDUSTRY : new ZCRM.Record.Model.Field("Industry"),
	RECORD_IMAGE : new ZCRM.Record.Model.Field("Record_Image"),
	MODIFIED_BY : new ZCRM.Record.Model.Field("Modified_By"),
	SKYPE_ID : new ZCRM.Record.Model.Field("Skype_ID"),
	PHONE : new ZCRM.Record.Model.Field("Phone"),
	STREET : new ZCRM.Record.Model.Field("Street"),
	ZIP_CODE : new ZCRM.Record.Model.Field("Zip_Code"),
	ID : new ZCRM.Record.Model.Field("id"),
	EMAIL_OPT_OUT : new ZCRM.Record.Model.Field("Email_Opt_Out"),
	DESIGNATION : new ZCRM.Record.Model.Field("Designation"),
	MODIFIED_TIME : new ZCRM.Record.Model.Field("Modified_Time"),
	CREATED_TIME : new ZCRM.Record.Model.Field("Created_Time"),
	CITY : new ZCRM.Record.Model.Field("City"),
	NO_OF_EMPLOYEES : new ZCRM.Record.Model.Field("No_of_Employees"),
	MOBILE : new ZCRM.Record.Model.Field("Mobile"),
	CONVERTED_DATE_TIME : new ZCRM.Record.Model.Field("Converted_Date_Time"),
	LAST_NAME : new ZCRM.Record.Model.Field("Last_Name"),
	LAYOUT : new ZCRM.Record.Model.Field("Layout"),
	STATE : new ZCRM.Record.Model.Field("State"),
	LEAD_SOURCE : new ZCRM.Record.Model.Field("Lead_Source"),
	IS_RECORD_DUPLICATE : new ZCRM.Record.Model.Field("Is_Record_Duplicate"),
	TAG : new ZCRM.Record.Model.Field("Tag"),
	CREATED_BY : new ZCRM.Record.Model.Field("Created_By"),
	FAX : new ZCRM.Record.Model.Field("Fax"),
	ANNUAL_REVENUE : new ZCRM.Record.Model.Field("Annual_Revenue"),
	SECONDARY_EMAIL : new ZCRM.Record.Model.Field("Secondary_Email"),
}

class InitializeBuilder {
    constructor() {
        this._environment = null;

        this._token = null;

        this._requestProxy = null;

        this._sdkConfig = null;

        this._logger = null;

        this.errorMessage = null;

        this.initializer = null;
    }

    initialize() {
        Utility.assertNotNull(this._environment, this.errorMessage, Constants.ENVIRONMENT_ERROR_MESSAGE);

        if (this._sdkConfig == null) {
            this._sdkConfig = new SDKConfigBuilder().autoRefreshFields(true).pickListValidation(false).build();
        }

        if (this._logger == null) {
            this._logger = Logger.getInstance(Levels.INFO);
        }

        initializeSDK(this._environment, this._sdkConfig, this._token, this._logger, this._requestProxy);
    }

    logger(logger) {
        this._logger = logger;

        return this;
    }

    token(token) {
        Utility.assertNotNull(token, this.errorMessage, Constants.TOKEN_ERROR_MESSAGE);

        if (!(token instanceof Token) && document.getElementById(Constants.ZES_CLIENT_SCOPE) === null) {

            detailsJO.field = Constants.TOKEN;

            detailsJO.expected_type = Token.name;

            throw new SDKException(Constants.INITIALIZATION_ERROR, null, detailsJO, null);
        }

        this._token = token;

        return this;
    }

    SDKConfig(sdkConfig) {
        Utility.assertNotNull(sdkConfig, this.errorMessage, Constants.SDK_CONFIG_ERROR_MESSAGE);

        if (!(sdkConfig instanceof SDKConfig)) {
            detailsJO.field = Constants.SDK_CONFIG;

            detailsJO.expected_type = SDKConfig.name;

            throw new SDKException(Constants.INITIALIZATION_ERROR, Constants.INITIALIZATION_EXCEPTION, error);
        }

        this._sdkConfig = sdkConfig;

        return this;
    }

    requestProxy(requestProxy) {
        if (proxy != null && !(proxy instanceof RequestProxy)) {
            detailsJO.field = Constants.USER_PROXY;

            detailsJO.expected_type = RequestProxy.name;

            throw new SDKException(Constants.INITIALIZATION_ERROR, null, detailsJO, null);
        }

        this._requestProxy = requestProxy;

        return this;
    }

    environment(environment) {
        Utility.assertNotNull(environment, this.errorMessage, Constants.ENVIRONMENT_ERROR_MESSAGE);

        if (!(environment instanceof Environment)) {
            detailsJO.field = Constants.ENVIRONMENT;

            detailsJO.expected_type = Environment.name;

            throw new SDKException(Constants.INITIALIZATION_ERROR, null, detailsJO, null);
        }

        this._environment = environment;

        return this;
    }
}

ZCRM.File = {
	Model : {
		ResponseHandler : class{
			constructor(){

			}


		},

		ActionHandler : class{
			constructor(){

			}


		},

		ActionResponse : class{
			constructor(){

			}


		},

		BodyWrapper : class{
			constructor(){

				this.file=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the file
			 * @returns {List} An Array representing the file
			 */
			getFile()	{
				return this.file;

			}

			/**
			 * The method to set the value to file
			 * @param {List} file An Array
			 */
			setFile(file)	{
				if((file != null) && (!(Object.prototype.toString.call(file) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: file EXPECTED TYPE: Array", null, null);
				}
				this.file = file;
				this.keyModified.set("file", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		SuccessResponse : class{
			constructor(){

				this.status=null;
				this.code=null;
				this.message=null;
				this.details=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		ActionWrapper : class{
			constructor(){

				this.data=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the data
			 * @returns {List} An Array representing the data
			 */
			getData()	{
				return this.data;

			}

			/**
			 * The method to set the value to data
			 * @param {List} data An Array
			 */
			setData(data)	{
				if((data != null) && (!(Object.prototype.toString.call(data) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: data EXPECTED TYPE: Array", null, null);
				}
				this.data = data;
				this.keyModified.set("data", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		APIException : class{
			constructor(){

				this.status=null;
				this.code=null;
				this.message=null;
				this.details=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		FileBodyWrapper : class{
			constructor(){

				this.file=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the file
			 * @returns {StreamWrapper} An instance of StreamWrapper
			 */
			getFile()	{
				return this.file;

			}

			/**
			 * The method to set the value to file
			 * @param {StreamWrapper} file An instance of StreamWrapper
			 */
			setFile(file)	{
				if((file != null) && (!(file instanceof StreamWrapper.Model.StreamWrapper))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: file EXPECTED TYPE: StreamWrapper", null, null);
				}
				this.file = file;
				this.keyModified.set("file", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		GetFileParam : {
			ID : 	new Param("id", "File.Model.GetFileParam"),


		},

		UploadFilesParam : {
			TYPE : 	new Param("type", "File.Model.UploadFilesParam"),


		}
	},
	Operations : class {
		constructor(){

		}

		/**
		 * The method to upload files
		 * @param {BodyWrapper} request An instance of BodyWrapper
		 * @param {ParameterMap} paramInstance An instance of ParameterMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async uploadFiles(request, paramInstance=null){
			if((request != null) && (!(request instanceof ZCRM.File.Model.BodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: BodyWrapper", null, null);
			}
			if((paramInstance != null) && (!(paramInstance instanceof ParameterMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paramInstance EXPECTED TYPE: ParameterMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/files");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_POST);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_CREATE);
			handlerInstance.setContentType("multipart/form-data");
			handlerInstance.setRequest(request);
			handlerInstance.setMandatoryChecker(true);
			handlerInstance.setParam(paramInstance);
			return handlerInstance.apiCall("File.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to get file
		 * @param {ParameterMap} paramInstance An instance of ParameterMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getFile(paramInstance=null){
			if((paramInstance != null) && (!(paramInstance instanceof ParameterMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paramInstance EXPECTED TYPE: ParameterMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/files");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			handlerInstance.setParam(paramInstance);
			return handlerInstance.apiCall("File.Model.ResponseHandler", "application/x-download");

		}
	},

}

ZCRM.RelatedList = {
	Model : {
		ResponseHandler : class{
			constructor(){

			}


		},

		ResponseWrapper : class{
			constructor(){

				this.relatedLists=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the relatedLists
			 * @returns {List} An Array representing the relatedLists
			 */
			getRelatedLists()	{
				return this.relatedLists;

			}

			/**
			 * The method to set the value to relatedLists
			 * @param {List} relatedLists An Array
			 */
			setRelatedLists(relatedLists)	{
				if((relatedLists != null) && (!(Object.prototype.toString.call(relatedLists) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: relatedLists EXPECTED TYPE: Array", null, null);
				}
				this.relatedLists = relatedLists;
				this.keyModified.set("related_lists", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		RelatedList : class{
			constructor(){

				this.id=null;
				this.sequenceNumber=null;
				this.displayLabel=null;
				this.apiName=null;
				this.module=null;
				this.name=null;
				this.action=null;
				this.href=null;
				this.type=null;
				this.connectedmodule=null;
				this.linkingmodule=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the id
			 * @returns {Long} A BigInt representing the id
			 */
			getId()	{
				return this.id;

			}

			/**
			 * The method to set the value to id
			 * @param {Long} id A BigInt
			 */
			setId(id)	{
				if((id != null) && (!(Object.prototype.toString.call(id) == "[object BigInt]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
				}
				this.id = id;
				this.keyModified.set("id", 1);

			}

			/**
			 * The method to get the sequenceNumber
			 * @returns {String} A String representing the sequenceNumber
			 */
			getSequenceNumber()	{
				return this.sequenceNumber;

			}

			/**
			 * The method to set the value to sequenceNumber
			 * @param {String} sequenceNumber A String
			 */
			setSequenceNumber(sequenceNumber)	{
				if((sequenceNumber != null) && (!(Object.prototype.toString.call(sequenceNumber) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: sequenceNumber EXPECTED TYPE: String", null, null);
				}
				this.sequenceNumber = sequenceNumber;
				this.keyModified.set("sequence_number", 1);

			}

			/**
			 * The method to get the displayLabel
			 * @returns {String} A String representing the displayLabel
			 */
			getDisplayLabel()	{
				return this.displayLabel;

			}

			/**
			 * The method to set the value to displayLabel
			 * @param {String} displayLabel A String
			 */
			setDisplayLabel(displayLabel)	{
				if((displayLabel != null) && (!(Object.prototype.toString.call(displayLabel) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: displayLabel EXPECTED TYPE: String", null, null);
				}
				this.displayLabel = displayLabel;
				this.keyModified.set("display_label", 1);

			}

			/**
			 * The method to get the apiName
			 * @returns {String} A String representing the apiName
			 */
			getAPIName()	{
				return this.apiName;

			}

			/**
			 * The method to set the value to apiName
			 * @param {String} apiName A String
			 */
			setAPIName(apiName)	{
				if((apiName != null) && (!(Object.prototype.toString.call(apiName) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: apiName EXPECTED TYPE: String", null, null);
				}
				this.apiName = apiName;
				this.keyModified.set("api_name", 1);

			}

			/**
			 * The method to get the module
			 * @returns {String} A String representing the module
			 */
			getModule()	{
				return this.module;

			}

			/**
			 * The method to set the value to module
			 * @param {String} module A String
			 */
			setModule(module)	{
				if((module != null) && (!(Object.prototype.toString.call(module) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: module EXPECTED TYPE: String", null, null);
				}
				this.module = module;
				this.keyModified.set("module", 1);

			}

			/**
			 * The method to get the name
			 * @returns {String} A String representing the name
			 */
			getName()	{
				return this.name;

			}

			/**
			 * The method to set the value to name
			 * @param {String} name A String
			 */
			setName(name)	{
				if((name != null) && (!(Object.prototype.toString.call(name) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: name EXPECTED TYPE: String", null, null);
				}
				this.name = name;
				this.keyModified.set("name", 1);

			}

			/**
			 * The method to get the action
			 * @returns {String} A String representing the action
			 */
			getAction()	{
				return this.action;

			}

			/**
			 * The method to set the value to action
			 * @param {String} action A String
			 */
			setAction(action)	{
				if((action != null) && (!(Object.prototype.toString.call(action) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: action EXPECTED TYPE: String", null, null);
				}
				this.action = action;
				this.keyModified.set("action", 1);

			}

			/**
			 * The method to get the href
			 * @returns {String} A String representing the href
			 */
			getHref()	{
				return this.href;

			}

			/**
			 * The method to set the value to href
			 * @param {String} href A String
			 */
			setHref(href)	{
				if((href != null) && (!(Object.prototype.toString.call(href) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: href EXPECTED TYPE: String", null, null);
				}
				this.href = href;
				this.keyModified.set("href", 1);

			}

			/**
			 * The method to get the type
			 * @returns {String} A String representing the type
			 */
			getType()	{
				return this.type;

			}

			/**
			 * The method to set the value to type
			 * @param {String} type A String
			 */
			setType(type)	{
				if((type != null) && (!(Object.prototype.toString.call(type) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: type EXPECTED TYPE: String", null, null);
				}
				this.type = type;
				this.keyModified.set("type", 1);

			}

			/**
			 * The method to get the connectedmodule
			 * @returns {String} A String representing the connectedmodule
			 */
			getConnectedmodule()	{
				return this.connectedmodule;

			}

			/**
			 * The method to set the value to connectedmodule
			 * @param {String} connectedmodule A String
			 */
			setConnectedmodule(connectedmodule)	{
				if((connectedmodule != null) && (!(Object.prototype.toString.call(connectedmodule) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: connectedmodule EXPECTED TYPE: String", null, null);
				}
				this.connectedmodule = connectedmodule;
				this.keyModified.set("connectedmodule", 1);

			}

			/**
			 * The method to get the linkingmodule
			 * @returns {String} A String representing the linkingmodule
			 */
			getLinkingmodule()	{
				return this.linkingmodule;

			}

			/**
			 * The method to set the value to linkingmodule
			 * @param {String} linkingmodule A String
			 */
			setLinkingmodule(linkingmodule)	{
				if((linkingmodule != null) && (!(Object.prototype.toString.call(linkingmodule) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: linkingmodule EXPECTED TYPE: String", null, null);
				}
				this.linkingmodule = linkingmodule;
				this.keyModified.set("linkingmodule", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		APIException : class{
			constructor(){

				this.status=null;
				this.code=null;
				this.message=null;
				this.details=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		GetRelatedListsParam : {

		},

		GetRelatedListParam : {

		}
	},
	Operations : class {


		/**
		 * Creates an instance of RelatedListsOperations with the given parameters
		 * @param {String} module A String
		 */
		constructor(module=null){
			if((module != null) && (!(Object.prototype.toString.call(module) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: module EXPECTED TYPE: String", null, null);
			}
						this.module = module;

		}

		/**
		 * The method to get related lists
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getRelatedLists(){
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/settings/related_lists");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			await handlerInstance.addParam(new Param("module", "RelatedList.Model.GetRelatedListsParam"), this.module);
			return handlerInstance.apiCall("RelatedList.Model.ResponseHandler", "application/json");

		}

		/**
		 * The method to get related list
		 * @param {Long} id A BigInt
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getRelatedList(id){
			if((!(Object.prototype.toString.call(id) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/settings/related_lists/");
			apiPath = apiPath.concat(id.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			await handlerInstance.addParam(new Param("module", "RelatedList.Model.GetRelatedListParam"), this.module);
			return handlerInstance.apiCall("RelatedList.Model.ResponseHandler", "application/json");

		}

	},

}

ZCRM.Notification = {
	Model : {
		ActionHandler : class{
			constructor(){

			}


		},

		ActionResponse : class{
			constructor(){

			}


		},

		ResponseHandler : class{
			constructor(){

			}


		},

		SuccessResponse : class{
			constructor(){

				this.status=null;
				this.code=null;
				this.message=null;
				this.details=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		Info : class{
			constructor(){

				this.perPage=null;
				this.count=null;
				this.page=null;
				this.moreRecords=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the perPage
			 * @returns {Integer} An Integer representing the perPage
			 */
			getPerPage()	{
				return this.perPage;

			}

			/**
			 * The method to set the value to perPage
			 * @param {Integer} perPage An Integer
			 */
			setPerPage(perPage)	{
				if((perPage != null) && (!(Object.prototype.toString.call(perPage) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: perPage EXPECTED TYPE: Integer", null, null);
				}
				this.perPage = perPage;
				this.keyModified.set("per_page", 1);

			}

			/**
			 * The method to get the count
			 * @returns {Integer} An Integer representing the count
			 */
			getCount()	{
				return this.count;

			}

			/**
			 * The method to set the value to count
			 * @param {Integer} count An Integer
			 */
			setCount(count)	{
				if((count != null) && (!(Object.prototype.toString.call(count) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: count EXPECTED TYPE: Integer", null, null);
				}
				this.count = count;
				this.keyModified.set("count", 1);

			}

			/**
			 * The method to get the page
			 * @returns {Integer} An Integer representing the page
			 */
			getPage()	{
				return this.page;

			}

			/**
			 * The method to set the value to page
			 * @param {Integer} page An Integer
			 */
			setPage(page)	{
				if((page != null) && (!(Object.prototype.toString.call(page) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: page EXPECTED TYPE: Integer", null, null);
				}
				this.page = page;
				this.keyModified.set("page", 1);

			}

			/**
			 * The method to get the moreRecords
			 * @returns {Boolean} A Boolean representing the moreRecords
			 */
			getMoreRecords()	{
				return this.moreRecords;

			}

			/**
			 * The method to set the value to moreRecords
			 * @param {Boolean} moreRecords A Boolean
			 */
			setMoreRecords(moreRecords)	{
				if((moreRecords != null) && (!(Object.prototype.toString.call(moreRecords) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: moreRecords EXPECTED TYPE: Boolean", null, null);
				}
				this.moreRecords = moreRecords;
				this.keyModified.set("more_records", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		BodyWrapper : class{
			constructor(){

				this.watch=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the watch
			 * @returns {List} An Array representing the watch
			 */
			getWatch()	{
				return this.watch;

			}

			/**
			 * The method to set the value to watch
			 * @param {List} watch An Array
			 */
			setWatch(watch)	{
				if((watch != null) && (!(Object.prototype.toString.call(watch) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: watch EXPECTED TYPE: Array", null, null);
				}
				this.watch = watch;
				this.keyModified.set("watch", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		APIException : class{
			constructor(){

				this.status=null;
				this.code=null;
				this.message=null;
				this.details=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		ActionWrapper : class{
			constructor(){

				this.watch=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the watch
			 * @returns {List} An Array representing the watch
			 */
			getWatch()	{
				return this.watch;

			}

			/**
			 * The method to set the value to watch
			 * @param {List} watch An Array
			 */
			setWatch(watch)	{
				if((watch != null) && (!(Object.prototype.toString.call(watch) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: watch EXPECTED TYPE: Array", null, null);
				}
				this.watch = watch;
				this.keyModified.set("watch", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		ResponseWrapper : class{
			constructor(){

				this.watch=null;
				this.info=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the watch
			 * @returns {List} An Array representing the watch
			 */
			getWatch()	{
				return this.watch;

			}

			/**
			 * The method to set the value to watch
			 * @param {List} watch An Array
			 */
			setWatch(watch)	{
				if((watch != null) && (!(Object.prototype.toString.call(watch) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: watch EXPECTED TYPE: Array", null, null);
				}
				this.watch = watch;
				this.keyModified.set("watch", 1);

			}

			/**
			 * The method to get the info
			 * @returns {Info} An instance of Info
			 */
			getInfo()	{
				return this.info;

			}

			/**
			 * The method to set the value to info
			 * @param {Info} info An instance of Info
			 */
			setInfo(info)	{
				if((info != null) && (!(info instanceof ZCRM.Notification.Model.Info))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: info EXPECTED TYPE: Info", null, null);
				}
				this.info = info;
				this.keyModified.set("info", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		Notification : class{
			constructor(){

				this.channelExpiry=null;
				this.resourceUri=null;
				this.resourceId=null;
				this.notifyUrl=null;
				this.resourceName=null;
				this.channelId=null;
				this.events=null;
				this.token=null;
				this.notifyOnRelatedAction=null;
				this.fields=null;
				this.deleteevents=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the channelExpiry
			 * @returns {OffsetDateTime} An instance of OffsetDateTime
			 */
			getChannelExpiry()	{
				return this.channelExpiry;

			}

			/**
			 * The method to set the value to channelExpiry
			 * @param {OffsetDateTime} channelExpiry An instance of OffsetDateTime
			 */
			setChannelExpiry(channelExpiry)	{
				if((channelExpiry != null) && (!(channelExpiry instanceof Date))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: channelExpiry EXPECTED TYPE: Date", null, null);
				}
				this.channelExpiry = channelExpiry;
				this.keyModified.set("channel_expiry", 1);

			}

			/**
			 * The method to get the resourceUri
			 * @returns {String} A String representing the resourceUri
			 */
			getResourceUri()	{
				return this.resourceUri;

			}

			/**
			 * The method to set the value to resourceUri
			 * @param {String} resourceUri A String
			 */
			setResourceUri(resourceUri)	{
				if((resourceUri != null) && (!(Object.prototype.toString.call(resourceUri) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: resourceUri EXPECTED TYPE: String", null, null);
				}
				this.resourceUri = resourceUri;
				this.keyModified.set("resource_uri", 1);

			}

			/**
			 * The method to get the resourceId
			 * @returns {String} A String representing the resourceId
			 */
			getResourceId()	{
				return this.resourceId;

			}

			/**
			 * The method to set the value to resourceId
			 * @param {String} resourceId A String
			 */
			setResourceId(resourceId)	{
				if((resourceId != null) && (!(Object.prototype.toString.call(resourceId) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: resourceId EXPECTED TYPE: String", null, null);
				}
				this.resourceId = resourceId;
				this.keyModified.set("resource_id", 1);

			}

			/**
			 * The method to get the notifyUrl
			 * @returns {String} A String representing the notifyUrl
			 */
			getNotifyUrl()	{
				return this.notifyUrl;

			}

			/**
			 * The method to set the value to notifyUrl
			 * @param {String} notifyUrl A String
			 */
			setNotifyUrl(notifyUrl)	{
				if((notifyUrl != null) && (!(Object.prototype.toString.call(notifyUrl) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: notifyUrl EXPECTED TYPE: String", null, null);
				}
				this.notifyUrl = notifyUrl;
				this.keyModified.set("notify_url", 1);

			}

			/**
			 * The method to get the resourceName
			 * @returns {String} A String representing the resourceName
			 */
			getResourceName()	{
				return this.resourceName;

			}

			/**
			 * The method to set the value to resourceName
			 * @param {String} resourceName A String
			 */
			setResourceName(resourceName)	{
				if((resourceName != null) && (!(Object.prototype.toString.call(resourceName) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: resourceName EXPECTED TYPE: String", null, null);
				}
				this.resourceName = resourceName;
				this.keyModified.set("resource_name", 1);

			}

			/**
			 * The method to get the channelId
			 * @returns {Long} A BigInt representing the channelId
			 */
			getChannelId()	{
				return this.channelId;

			}

			/**
			 * The method to set the value to channelId
			 * @param {Long} channelId A BigInt
			 */
			setChannelId(channelId)	{
				if((channelId != null) && (!(Object.prototype.toString.call(channelId) == "[object BigInt]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: channelId EXPECTED TYPE: BigInt", null, null);
				}
				this.channelId = channelId;
				this.keyModified.set("channel_id", 1);

			}

			/**
			 * The method to get the events
			 * @returns {List} An Array representing the events
			 */
			getEvents()	{
				return this.events;

			}

			/**
			 * The method to set the value to events
			 * @param {List} events An Array
			 */
			setEvents(events)	{
				if((events != null) && (!(Object.prototype.toString.call(events) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: events EXPECTED TYPE: Array", null, null);
				}
				this.events = events;
				this.keyModified.set("events", 1);

			}

			/**
			 * The method to get the token
			 * @returns {String} A String representing the token
			 */
			getToken()	{
				return this.token;

			}

			/**
			 * The method to set the value to token
			 * @param {String} token A String
			 */
			setToken(token)	{
				if((token != null) && (!(Object.prototype.toString.call(token) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: token EXPECTED TYPE: String", null, null);
				}
				this.token = token;
				this.keyModified.set("token", 1);

			}

			/**
			 * The method to get the notifyOnRelatedAction
			 * @returns {Boolean} A Boolean representing the notifyOnRelatedAction
			 */
			getNotifyOnRelatedAction()	{
				return this.notifyOnRelatedAction;

			}

			/**
			 * The method to set the value to notifyOnRelatedAction
			 * @param {Boolean} notifyOnRelatedAction A Boolean
			 */
			setNotifyOnRelatedAction(notifyOnRelatedAction)	{
				if((notifyOnRelatedAction != null) && (!(Object.prototype.toString.call(notifyOnRelatedAction) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: notifyOnRelatedAction EXPECTED TYPE: Boolean", null, null);
				}
				this.notifyOnRelatedAction = notifyOnRelatedAction;
				this.keyModified.set("notify_on_related_action", 1);

			}

			/**
			 * The method to get the fields
			 * @returns {Map} A Map representing the fields
			 */
			getFields()	{
				return this.fields;

			}

			/**
			 * The method to set the value to fields
			 * @param {Map} fields A Map
			 */
			setFields(fields)	{
				if((fields != null) && (!(Object.prototype.toString.call(fields) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: fields EXPECTED TYPE: Map", null, null);
				}
				this.fields = fields;
				this.keyModified.set("fields", 1);

			}

			/**
			 * The method to get the deleteevents
			 * @returns {Boolean} A Boolean representing the deleteevents
			 */
			getDeleteevents()	{
				return this.deleteevents;

			}

			/**
			 * The method to set the value to deleteevents
			 * @param {Boolean} deleteevents A Boolean
			 */
			setDeleteevents(deleteevents)	{
				if((deleteevents != null) && (!(Object.prototype.toString.call(deleteevents) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: deleteevents EXPECTED TYPE: Boolean", null, null);
				}
				this.deleteevents = deleteevents;
				this.keyModified.set("_delete_events", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		GetNotificationDetailsParam : {
			PAGE : 	new Param("page", "Notification.Model.GetNotificationDetailsParam"),

			PER_PAGE : 	new Param("per_page", "Notification.Model.GetNotificationDetailsParam"),

			CHANNEL_ID : 	new Param("channel_id", "Notification.Model.GetNotificationDetailsParam"),

			MODULE : 	new Param("module", "Notification.Model.GetNotificationDetailsParam"),


		},

		DisableNotificationsParam : {
			CHANNEL_IDS : 	new Param("channel_ids", "Notification.Model.DisableNotificationsParam"),


		}
	},
	Operations : class {
		constructor(){

		}

		/**
		 * The method to enable notifications
		 * @param {BodyWrapper} request An instance of BodyWrapper
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async enableNotifications(request){
			if((request != null) && (!(request instanceof ZCRM.Notification.Model.BodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: BodyWrapper", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/actions/watch");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_POST);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_CREATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			handlerInstance.setMandatoryChecker(true);
			return handlerInstance.apiCall("Notification.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to get notification details
		 * @param {ParameterMap} paramInstance An instance of ParameterMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getNotificationDetails(paramInstance=null){
			if((paramInstance != null) && (!(paramInstance instanceof ParameterMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paramInstance EXPECTED TYPE: ParameterMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/actions/watch");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			handlerInstance.setParam(paramInstance);
			return handlerInstance.apiCall("Notification.Model.ResponseHandler", "application/json");

		}

		/**
		 * The method to update notifications
		 * @param {BodyWrapper} request An instance of BodyWrapper
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async updateNotifications(request){
			if((request != null) && (!(request instanceof ZCRM.Notification.Model.BodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: BodyWrapper", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/actions/watch");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_PUT);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_UPDATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			handlerInstance.setMandatoryChecker(true);
			return handlerInstance.apiCall("Notification.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to update notification
		 * @param {BodyWrapper} request An instance of BodyWrapper
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async updateNotification(request){
			if((request != null) && (!(request instanceof ZCRM.Notification.Model.BodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: BodyWrapper", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/actions/watch");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_PATCH);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_UPDATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			handlerInstance.setMandatoryChecker(true);
			return handlerInstance.apiCall("Notification.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to disable notifications
		 * @param {ParameterMap} paramInstance An instance of ParameterMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async disableNotifications(paramInstance=null){
			if((paramInstance != null) && (!(paramInstance instanceof ParameterMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paramInstance EXPECTED TYPE: ParameterMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/actions/watch");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_DELETE);
			handlerInstance.setCategoryMethod(Constants.REQUEST_METHOD_DELETE);
			handlerInstance.setParam(paramInstance);
			return handlerInstance.apiCall("Notification.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to disable notification
		 * @param {BodyWrapper} request An instance of BodyWrapper
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async disableNotification(request){
			if((request != null) && (!(request instanceof ZCRM.Notification.Model.BodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: BodyWrapper", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/actions/watch");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_PATCH);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_UPDATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			handlerInstance.setMandatoryChecker(true);
			return handlerInstance.apiCall("Notification.Model.ActionHandler", "application/json");

		}
	},

}

ZCRM.Org = {
	Model : {
		ActionResponse : class{
			constructor(){

			}


		},

		ResponseHandler : class{
			constructor(){

			}


		},

		SuccessResponse : class{
			constructor(){

				this.status=null;
				this.code=null;
				this.message=null;
				this.details=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		ResponseWrapper : class{
			constructor(){

				this.org=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the org
			 * @returns {List} An Array representing the org
			 */
			getOrg()	{
				return this.org;

			}

			/**
			 * The method to set the value to org
			 * @param {List} org An Array
			 */
			setOrg(org)	{
				if((org != null) && (!(Object.prototype.toString.call(org) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: org EXPECTED TYPE: Array", null, null);
				}
				this.org = org;
				this.keyModified.set("org", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		Org : class{
			constructor(){

				this.country=null;
				this.photoId=null;
				this.city=null;
				this.description=null;
				this.mcStatus=null;
				this.gappsEnabled=null;
				this.domainName=null;
				this.translationEnabled=null;
				this.street=null;
				this.alias=null;
				this.currency=null;
				this.id=null;
				this.state=null;
				this.fax=null;
				this.employeeCount=null;
				this.zip=null;
				this.website=null;
				this.currencySymbol=null;
				this.mobile=null;
				this.currencyLocale=null;
				this.primaryZuid=null;
				this.ziaPortalId=null;
				this.timeZone=null;
				this.zgid=null;
				this.countryCode=null;
				this.licenseDetails=null;
				this.phone=null;
				this.companyName=null;
				this.privacySettings=null;
				this.primaryEmail=null;
				this.isoCode=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the country
			 * @returns {String} A String representing the country
			 */
			getCountry()	{
				return this.country;

			}

			/**
			 * The method to set the value to country
			 * @param {String} country A String
			 */
			setCountry(country)	{
				if((country != null) && (!(Object.prototype.toString.call(country) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: country EXPECTED TYPE: String", null, null);
				}
				this.country = country;
				this.keyModified.set("country", 1);

			}

			/**
			 * The method to get the photoId
			 * @returns {String} A String representing the photoId
			 */
			getPhotoId()	{
				return this.photoId;

			}

			/**
			 * The method to set the value to photoId
			 * @param {String} photoId A String
			 */
			setPhotoId(photoId)	{
				if((photoId != null) && (!(Object.prototype.toString.call(photoId) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: photoId EXPECTED TYPE: String", null, null);
				}
				this.photoId = photoId;
				this.keyModified.set("photo_id", 1);

			}

			/**
			 * The method to get the city
			 * @returns {String} A String representing the city
			 */
			getCity()	{
				return this.city;

			}

			/**
			 * The method to set the value to city
			 * @param {String} city A String
			 */
			setCity(city)	{
				if((city != null) && (!(Object.prototype.toString.call(city) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: city EXPECTED TYPE: String", null, null);
				}
				this.city = city;
				this.keyModified.set("city", 1);

			}

			/**
			 * The method to get the description
			 * @returns {String} A String representing the description
			 */
			getDescription()	{
				return this.description;

			}

			/**
			 * The method to set the value to description
			 * @param {String} description A String
			 */
			setDescription(description)	{
				if((description != null) && (!(Object.prototype.toString.call(description) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: description EXPECTED TYPE: String", null, null);
				}
				this.description = description;
				this.keyModified.set("description", 1);

			}

			/**
			 * The method to get the mcStatus
			 * @returns {Boolean} A Boolean representing the mcStatus
			 */
			getMcStatus()	{
				return this.mcStatus;

			}

			/**
			 * The method to set the value to mcStatus
			 * @param {Boolean} mcStatus A Boolean
			 */
			setMcStatus(mcStatus)	{
				if((mcStatus != null) && (!(Object.prototype.toString.call(mcStatus) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: mcStatus EXPECTED TYPE: Boolean", null, null);
				}
				this.mcStatus = mcStatus;
				this.keyModified.set("mc_status", 1);

			}

			/**
			 * The method to get the gappsEnabled
			 * @returns {Boolean} A Boolean representing the gappsEnabled
			 */
			getGappsEnabled()	{
				return this.gappsEnabled;

			}

			/**
			 * The method to set the value to gappsEnabled
			 * @param {Boolean} gappsEnabled A Boolean
			 */
			setGappsEnabled(gappsEnabled)	{
				if((gappsEnabled != null) && (!(Object.prototype.toString.call(gappsEnabled) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: gappsEnabled EXPECTED TYPE: Boolean", null, null);
				}
				this.gappsEnabled = gappsEnabled;
				this.keyModified.set("gapps_enabled", 1);

			}

			/**
			 * The method to get the domainName
			 * @returns {String} A String representing the domainName
			 */
			getDomainName()	{
				return this.domainName;

			}

			/**
			 * The method to set the value to domainName
			 * @param {String} domainName A String
			 */
			setDomainName(domainName)	{
				if((domainName != null) && (!(Object.prototype.toString.call(domainName) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: domainName EXPECTED TYPE: String", null, null);
				}
				this.domainName = domainName;
				this.keyModified.set("domain_name", 1);

			}

			/**
			 * The method to get the translationEnabled
			 * @returns {Boolean} A Boolean representing the translationEnabled
			 */
			getTranslationEnabled()	{
				return this.translationEnabled;

			}

			/**
			 * The method to set the value to translationEnabled
			 * @param {Boolean} translationEnabled A Boolean
			 */
			setTranslationEnabled(translationEnabled)	{
				if((translationEnabled != null) && (!(Object.prototype.toString.call(translationEnabled) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: translationEnabled EXPECTED TYPE: Boolean", null, null);
				}
				this.translationEnabled = translationEnabled;
				this.keyModified.set("translation_enabled", 1);

			}

			/**
			 * The method to get the street
			 * @returns {String} A String representing the street
			 */
			getStreet()	{
				return this.street;

			}

			/**
			 * The method to set the value to street
			 * @param {String} street A String
			 */
			setStreet(street)	{
				if((street != null) && (!(Object.prototype.toString.call(street) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: street EXPECTED TYPE: String", null, null);
				}
				this.street = street;
				this.keyModified.set("street", 1);

			}

			/**
			 * The method to get the alias
			 * @returns {String} A String representing the alias
			 */
			getAlias()	{
				return this.alias;

			}

			/**
			 * The method to set the value to alias
			 * @param {String} alias A String
			 */
			setAlias(alias)	{
				if((alias != null) && (!(Object.prototype.toString.call(alias) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: alias EXPECTED TYPE: String", null, null);
				}
				this.alias = alias;
				this.keyModified.set("alias", 1);

			}

			/**
			 * The method to get the currency
			 * @returns {String} A String representing the currency
			 */
			getCurrency()	{
				return this.currency;

			}

			/**
			 * The method to set the value to currency
			 * @param {String} currency A String
			 */
			setCurrency(currency)	{
				if((currency != null) && (!(Object.prototype.toString.call(currency) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: currency EXPECTED TYPE: String", null, null);
				}
				this.currency = currency;
				this.keyModified.set("currency", 1);

			}

			/**
			 * The method to get the id
			 * @returns {Long} A BigInt representing the id
			 */
			getId()	{
				return this.id;

			}

			/**
			 * The method to set the value to id
			 * @param {Long} id A BigInt
			 */
			setId(id)	{
				if((id != null) && (!(Object.prototype.toString.call(id) == "[object BigInt]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
				}
				this.id = id;
				this.keyModified.set("id", 1);

			}

			/**
			 * The method to get the state
			 * @returns {String} A String representing the state
			 */
			getState()	{
				return this.state;

			}

			/**
			 * The method to set the value to state
			 * @param {String} state A String
			 */
			setState(state)	{
				if((state != null) && (!(Object.prototype.toString.call(state) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: state EXPECTED TYPE: String", null, null);
				}
				this.state = state;
				this.keyModified.set("state", 1);

			}

			/**
			 * The method to get the fax
			 * @returns {String} A String representing the fax
			 */
			getFax()	{
				return this.fax;

			}

			/**
			 * The method to set the value to fax
			 * @param {String} fax A String
			 */
			setFax(fax)	{
				if((fax != null) && (!(Object.prototype.toString.call(fax) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: fax EXPECTED TYPE: String", null, null);
				}
				this.fax = fax;
				this.keyModified.set("fax", 1);

			}

			/**
			 * The method to get the employeeCount
			 * @returns {String} A String representing the employeeCount
			 */
			getEmployeeCount()	{
				return this.employeeCount;

			}

			/**
			 * The method to set the value to employeeCount
			 * @param {String} employeeCount A String
			 */
			setEmployeeCount(employeeCount)	{
				if((employeeCount != null) && (!(Object.prototype.toString.call(employeeCount) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: employeeCount EXPECTED TYPE: String", null, null);
				}
				this.employeeCount = employeeCount;
				this.keyModified.set("employee_count", 1);

			}

			/**
			 * The method to get the zip
			 * @returns {String} A String representing the zip
			 */
			getZip()	{
				return this.zip;

			}

			/**
			 * The method to set the value to zip
			 * @param {String} zip A String
			 */
			setZip(zip)	{
				if((zip != null) && (!(Object.prototype.toString.call(zip) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: zip EXPECTED TYPE: String", null, null);
				}
				this.zip = zip;
				this.keyModified.set("zip", 1);

			}

			/**
			 * The method to get the website
			 * @returns {String} A String representing the website
			 */
			getWebsite()	{
				return this.website;

			}

			/**
			 * The method to set the value to website
			 * @param {String} website A String
			 */
			setWebsite(website)	{
				if((website != null) && (!(Object.prototype.toString.call(website) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: website EXPECTED TYPE: String", null, null);
				}
				this.website = website;
				this.keyModified.set("website", 1);

			}

			/**
			 * The method to get the currencySymbol
			 * @returns {String} A String representing the currencySymbol
			 */
			getCurrencySymbol()	{
				return this.currencySymbol;

			}

			/**
			 * The method to set the value to currencySymbol
			 * @param {String} currencySymbol A String
			 */
			setCurrencySymbol(currencySymbol)	{
				if((currencySymbol != null) && (!(Object.prototype.toString.call(currencySymbol) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: currencySymbol EXPECTED TYPE: String", null, null);
				}
				this.currencySymbol = currencySymbol;
				this.keyModified.set("currency_symbol", 1);

			}

			/**
			 * The method to get the mobile
			 * @returns {String} A String representing the mobile
			 */
			getMobile()	{
				return this.mobile;

			}

			/**
			 * The method to set the value to mobile
			 * @param {String} mobile A String
			 */
			setMobile(mobile)	{
				if((mobile != null) && (!(Object.prototype.toString.call(mobile) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: mobile EXPECTED TYPE: String", null, null);
				}
				this.mobile = mobile;
				this.keyModified.set("mobile", 1);

			}

			/**
			 * The method to get the currencyLocale
			 * @returns {String} A String representing the currencyLocale
			 */
			getCurrencyLocale()	{
				return this.currencyLocale;

			}

			/**
			 * The method to set the value to currencyLocale
			 * @param {String} currencyLocale A String
			 */
			setCurrencyLocale(currencyLocale)	{
				if((currencyLocale != null) && (!(Object.prototype.toString.call(currencyLocale) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: currencyLocale EXPECTED TYPE: String", null, null);
				}
				this.currencyLocale = currencyLocale;
				this.keyModified.set("currency_locale", 1);

			}

			/**
			 * The method to get the primaryZuid
			 * @returns {String} A String representing the primaryZuid
			 */
			getPrimaryZuid()	{
				return this.primaryZuid;

			}

			/**
			 * The method to set the value to primaryZuid
			 * @param {String} primaryZuid A String
			 */
			setPrimaryZuid(primaryZuid)	{
				if((primaryZuid != null) && (!(Object.prototype.toString.call(primaryZuid) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: primaryZuid EXPECTED TYPE: String", null, null);
				}
				this.primaryZuid = primaryZuid;
				this.keyModified.set("primary_zuid", 1);

			}

			/**
			 * The method to get the ziaPortalId
			 * @returns {String} A String representing the ziaPortalId
			 */
			getZiaPortalId()	{
				return this.ziaPortalId;

			}

			/**
			 * The method to set the value to ziaPortalId
			 * @param {String} ziaPortalId A String
			 */
			setZiaPortalId(ziaPortalId)	{
				if((ziaPortalId != null) && (!(Object.prototype.toString.call(ziaPortalId) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: ziaPortalId EXPECTED TYPE: String", null, null);
				}
				this.ziaPortalId = ziaPortalId;
				this.keyModified.set("zia_portal_id", 1);

			}

			/**
			 * The method to get the timeZone
			 * @returns {String} A String representing the timeZone
			 */
			getTimeZone()	{
				return this.timeZone;

			}

			/**
			 * The method to set the value to timeZone
			 * @param {String} timeZone A String
			 */
			setTimeZone(timeZone)	{
				if((timeZone != null) && (!(Object.prototype.toString.call(timeZone) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: timeZone EXPECTED TYPE: String", null, null);
				}
				this.timeZone = timeZone;
				this.keyModified.set("time_zone", 1);

			}

			/**
			 * The method to get the zgid
			 * @returns {String} A String representing the zgid
			 */
			getZgid()	{
				return this.zgid;

			}

			/**
			 * The method to set the value to zgid
			 * @param {String} zgid A String
			 */
			setZgid(zgid)	{
				if((zgid != null) && (!(Object.prototype.toString.call(zgid) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: zgid EXPECTED TYPE: String", null, null);
				}
				this.zgid = zgid;
				this.keyModified.set("zgid", 1);

			}

			/**
			 * The method to get the countryCode
			 * @returns {String} A String representing the countryCode
			 */
			getCountryCode()	{
				return this.countryCode;

			}

			/**
			 * The method to set the value to countryCode
			 * @param {String} countryCode A String
			 */
			setCountryCode(countryCode)	{
				if((countryCode != null) && (!(Object.prototype.toString.call(countryCode) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: countryCode EXPECTED TYPE: String", null, null);
				}
				this.countryCode = countryCode;
				this.keyModified.set("country_code", 1);

			}

			/**
			 * The method to get the licenseDetails
			 * @returns {LicenseDetails} An instance of LicenseDetails
			 */
			getLicenseDetails()	{
				return this.licenseDetails;

			}

			/**
			 * The method to set the value to licenseDetails
			 * @param {LicenseDetails} licenseDetails An instance of LicenseDetails
			 */
			setLicenseDetails(licenseDetails)	{
				if((licenseDetails != null) && (!(licenseDetails instanceof ZCRM.Org.Model.LicenseDetails))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: licenseDetails EXPECTED TYPE: LicenseDetails", null, null);
				}
				this.licenseDetails = licenseDetails;
				this.keyModified.set("license_details", 1);

			}

			/**
			 * The method to get the phone
			 * @returns {String} A String representing the phone
			 */
			getPhone()	{
				return this.phone;

			}

			/**
			 * The method to set the value to phone
			 * @param {String} phone A String
			 */
			setPhone(phone)	{
				if((phone != null) && (!(Object.prototype.toString.call(phone) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: phone EXPECTED TYPE: String", null, null);
				}
				this.phone = phone;
				this.keyModified.set("phone", 1);

			}

			/**
			 * The method to get the companyName
			 * @returns {String} A String representing the companyName
			 */
			getCompanyName()	{
				return this.companyName;

			}

			/**
			 * The method to set the value to companyName
			 * @param {String} companyName A String
			 */
			setCompanyName(companyName)	{
				if((companyName != null) && (!(Object.prototype.toString.call(companyName) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: companyName EXPECTED TYPE: String", null, null);
				}
				this.companyName = companyName;
				this.keyModified.set("company_name", 1);

			}

			/**
			 * The method to get the privacySettings
			 * @returns {Boolean} A Boolean representing the privacySettings
			 */
			getPrivacySettings()	{
				return this.privacySettings;

			}

			/**
			 * The method to set the value to privacySettings
			 * @param {Boolean} privacySettings A Boolean
			 */
			setPrivacySettings(privacySettings)	{
				if((privacySettings != null) && (!(Object.prototype.toString.call(privacySettings) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: privacySettings EXPECTED TYPE: Boolean", null, null);
				}
				this.privacySettings = privacySettings;
				this.keyModified.set("privacy_settings", 1);

			}

			/**
			 * The method to get the primaryEmail
			 * @returns {String} A String representing the primaryEmail
			 */
			getPrimaryEmail()	{
				return this.primaryEmail;

			}

			/**
			 * The method to set the value to primaryEmail
			 * @param {String} primaryEmail A String
			 */
			setPrimaryEmail(primaryEmail)	{
				if((primaryEmail != null) && (!(Object.prototype.toString.call(primaryEmail) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: primaryEmail EXPECTED TYPE: String", null, null);
				}
				this.primaryEmail = primaryEmail;
				this.keyModified.set("primary_email", 1);

			}

			/**
			 * The method to get the isoCode
			 * @returns {String} A String representing the isoCode
			 */
			getIsoCode()	{
				return this.isoCode;

			}

			/**
			 * The method to set the value to isoCode
			 * @param {String} isoCode A String
			 */
			setIsoCode(isoCode)	{
				if((isoCode != null) && (!(Object.prototype.toString.call(isoCode) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: isoCode EXPECTED TYPE: String", null, null);
				}
				this.isoCode = isoCode;
				this.keyModified.set("iso_code", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		LicenseDetails : class{
			constructor(){

				this.paidExpiry=null;
				this.usersLicensePurchased=null;
				this.trialType=null;
				this.trialExpiry=null;
				this.paid=null;
				this.paidType=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the paidExpiry
			 * @returns {OffsetDateTime} An instance of OffsetDateTime
			 */
			getPaidExpiry()	{
				return this.paidExpiry;

			}

			/**
			 * The method to set the value to paidExpiry
			 * @param {OffsetDateTime} paidExpiry An instance of OffsetDateTime
			 */
			setPaidExpiry(paidExpiry)	{
				if((paidExpiry != null) && (!(paidExpiry instanceof Date))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paidExpiry EXPECTED TYPE: Date", null, null);
				}
				this.paidExpiry = paidExpiry;
				this.keyModified.set("paid_expiry", 1);

			}

			/**
			 * The method to get the usersLicensePurchased
			 * @returns {Long} A BigInt representing the usersLicensePurchased
			 */
			getUsersLicensePurchased()	{
				return this.usersLicensePurchased;

			}

			/**
			 * The method to set the value to usersLicensePurchased
			 * @param {Long} usersLicensePurchased A BigInt
			 */
			setUsersLicensePurchased(usersLicensePurchased)	{
				if((usersLicensePurchased != null) && (!(Object.prototype.toString.call(usersLicensePurchased) == "[object BigInt]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: usersLicensePurchased EXPECTED TYPE: BigInt", null, null);
				}
				this.usersLicensePurchased = usersLicensePurchased;
				this.keyModified.set("users_license_purchased", 1);

			}

			/**
			 * The method to get the trialType
			 * @returns {String} A String representing the trialType
			 */
			getTrialType()	{
				return this.trialType;

			}

			/**
			 * The method to set the value to trialType
			 * @param {String} trialType A String
			 */
			setTrialType(trialType)	{
				if((trialType != null) && (!(Object.prototype.toString.call(trialType) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: trialType EXPECTED TYPE: String", null, null);
				}
				this.trialType = trialType;
				this.keyModified.set("trial_type", 1);

			}

			/**
			 * The method to get the trialExpiry
			 * @returns {String} A String representing the trialExpiry
			 */
			getTrialExpiry()	{
				return this.trialExpiry;

			}

			/**
			 * The method to set the value to trialExpiry
			 * @param {String} trialExpiry A String
			 */
			setTrialExpiry(trialExpiry)	{
				if((trialExpiry != null) && (!(Object.prototype.toString.call(trialExpiry) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: trialExpiry EXPECTED TYPE: String", null, null);
				}
				this.trialExpiry = trialExpiry;
				this.keyModified.set("trial_expiry", 1);

			}

			/**
			 * The method to get the paid
			 * @returns {Boolean} A Boolean representing the paid
			 */
			getPaid()	{
				return this.paid;

			}

			/**
			 * The method to set the value to paid
			 * @param {Boolean} paid A Boolean
			 */
			setPaid(paid)	{
				if((paid != null) && (!(Object.prototype.toString.call(paid) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paid EXPECTED TYPE: Boolean", null, null);
				}
				this.paid = paid;
				this.keyModified.set("paid", 1);

			}

			/**
			 * The method to get the paidType
			 * @returns {String} A String representing the paidType
			 */
			getPaidType()	{
				return this.paidType;

			}

			/**
			 * The method to set the value to paidType
			 * @param {String} paidType A String
			 */
			setPaidType(paidType)	{
				if((paidType != null) && (!(Object.prototype.toString.call(paidType) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paidType EXPECTED TYPE: String", null, null);
				}
				this.paidType = paidType;
				this.keyModified.set("paid_type", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		APIException : class{
			constructor(){

				this.status=null;
				this.code=null;
				this.message=null;
				this.details=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		FileBodyWrapper : class{
			constructor(){

				this.file=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the file
			 * @returns {StreamWrapper} An instance of StreamWrapper
			 */
			getFile()	{
				return this.file;

			}

			/**
			 * The method to set the value to file
			 * @param {StreamWrapper} file An instance of StreamWrapper
			 */
			setFile(file)	{
				if((file != null) && (!(file instanceof StreamWrapper.Model.StreamWrapper))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: file EXPECTED TYPE: StreamWrapper", null, null);
				}
				this.file = file;
				this.keyModified.set("file", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		}
	},
	Operations : class {
		constructor(){

		}

		/**
		 * The method to get organization
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getOrganization(){
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/org");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			return handlerInstance.apiCall("Org.Model.ResponseHandler", "application/json");

		}

		/**
		 * The method to upload organization photo
		 * @param {FileBodyWrapper} request An instance of FileBodyWrapper
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async uploadOrganizationPhoto(request){
			if((request != null) && (!(request instanceof ZCRM.Org.Model.FileBodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: FileBodyWrapper", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/org/photo");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_POST);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_CREATE);
			handlerInstance.setContentType("multipart/form-data");
			handlerInstance.setRequest(request);
			handlerInstance.setMandatoryChecker(true);
			return handlerInstance.apiCall("Org.Model.ActionResponse", "application/json");

		}
	},

}

ZCRM.BluePrint = {
	Model : {
		ResponseHandler : class{
			constructor(){

			}


		},

		ActionResponse : class{
			constructor(){

			}


		},

		Transition : class{
			constructor(){

				this.nextTransitions=null;
				this.percentPartialSave=null;
				this.data=null;
				this.nextFieldValue=null;
				this.name=null;
				this.criteriaMatched=null;
				this.id=null;
				this.fields=null;
				this.criteriaMessage=null;
				this.type=null;
				this.executionTime=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the nextTransitions
			 * @returns {List} An Array representing the nextTransitions
			 */
			getNextTransitions()	{
				return this.nextTransitions;

			}

			/**
			 * The method to set the value to nextTransitions
			 * @param {List} nextTransitions An Array
			 */
			setNextTransitions(nextTransitions)	{
				if((nextTransitions != null) && (!(Object.prototype.toString.call(nextTransitions) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: nextTransitions EXPECTED TYPE: Array", null, null);
				}
				this.nextTransitions = nextTransitions;
				this.keyModified.set("next_transitions", 1);

			}

			/**
			 * The method to get the percentPartialSave
			 * @returns {Double} A Float representing the percentPartialSave
			 */
			getPercentPartialSave()	{
				return this.percentPartialSave;

			}

			/**
			 * The method to set the value to percentPartialSave
			 * @param {Double} percentPartialSave A Float
			 */
			setPercentPartialSave(percentPartialSave)	{
				if((percentPartialSave != null) && (!(Object.prototype.toString.call(percentPartialSave) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: percentPartialSave EXPECTED TYPE: Float", null, null);
				}
				this.percentPartialSave = percentPartialSave;
				this.keyModified.set("percent_partial_save", 1);

			}

			/**
			 * The method to get the data
			 * @returns {Record} An instance of Record
			 */
			getData()	{
				return this.data;

			}

			/**
			 * The method to set the value to data
			 * @param {Record} data An instance of Record
			 */
			setData(data)	{
				if((data != null) && (!(data instanceof ZCRM.Record.Model.Record))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: data EXPECTED TYPE: Record", null, null);
				}
				this.data = data;
				this.keyModified.set("data", 1);

			}

			/**
			 * The method to get the nextFieldValue
			 * @returns {String} A String representing the nextFieldValue
			 */
			getNextFieldValue()	{
				return this.nextFieldValue;

			}

			/**
			 * The method to set the value to nextFieldValue
			 * @param {String} nextFieldValue A String
			 */
			setNextFieldValue(nextFieldValue)	{
				if((nextFieldValue != null) && (!(Object.prototype.toString.call(nextFieldValue) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: nextFieldValue EXPECTED TYPE: String", null, null);
				}
				this.nextFieldValue = nextFieldValue;
				this.keyModified.set("next_field_value", 1);

			}

			/**
			 * The method to get the name
			 * @returns {String} A String representing the name
			 */
			getName()	{
				return this.name;

			}

			/**
			 * The method to set the value to name
			 * @param {String} name A String
			 */
			setName(name)	{
				if((name != null) && (!(Object.prototype.toString.call(name) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: name EXPECTED TYPE: String", null, null);
				}
				this.name = name;
				this.keyModified.set("name", 1);

			}

			/**
			 * The method to get the criteriaMatched
			 * @returns {Boolean} A Boolean representing the criteriaMatched
			 */
			getCriteriaMatched()	{
				return this.criteriaMatched;

			}

			/**
			 * The method to set the value to criteriaMatched
			 * @param {Boolean} criteriaMatched A Boolean
			 */
			setCriteriaMatched(criteriaMatched)	{
				if((criteriaMatched != null) && (!(Object.prototype.toString.call(criteriaMatched) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: criteriaMatched EXPECTED TYPE: Boolean", null, null);
				}
				this.criteriaMatched = criteriaMatched;
				this.keyModified.set("criteria_matched", 1);

			}

			/**
			 * The method to get the id
			 * @returns {Long} A BigInt representing the id
			 */
			getId()	{
				return this.id;

			}

			/**
			 * The method to set the value to id
			 * @param {Long} id A BigInt
			 */
			setId(id)	{
				if((id != null) && (!(Object.prototype.toString.call(id) == "[object BigInt]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
				}
				this.id = id;
				this.keyModified.set("id", 1);

			}

			/**
			 * The method to get the fields
			 * @returns {List} An Array representing the fields
			 */
			getFields()	{
				return this.fields;

			}

			/**
			 * The method to set the value to fields
			 * @param {List} fields An Array
			 */
			setFields(fields)	{
				if((fields != null) && (!(Object.prototype.toString.call(fields) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: fields EXPECTED TYPE: Array", null, null);
				}
				this.fields = fields;
				this.keyModified.set("fields", 1);

			}

			/**
			 * The method to get the criteriaMessage
			 * @returns {String} A String representing the criteriaMessage
			 */
			getCriteriaMessage()	{
				return this.criteriaMessage;

			}

			/**
			 * The method to set the value to criteriaMessage
			 * @param {String} criteriaMessage A String
			 */
			setCriteriaMessage(criteriaMessage)	{
				if((criteriaMessage != null) && (!(Object.prototype.toString.call(criteriaMessage) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: criteriaMessage EXPECTED TYPE: String", null, null);
				}
				this.criteriaMessage = criteriaMessage;
				this.keyModified.set("criteria_message", 1);

			}

			/**
			 * The method to get the type
			 * @returns {String} A String representing the type
			 */
			getType()	{
				return this.type;

			}

			/**
			 * The method to set the value to type
			 * @param {String} type A String
			 */
			setType(type)	{
				if((type != null) && (!(Object.prototype.toString.call(type) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: type EXPECTED TYPE: String", null, null);
				}
				this.type = type;
				this.keyModified.set("type", 1);

			}

			/**
			 * The method to get the executionTime
			 * @returns {OffsetDateTime} An instance of OffsetDateTime
			 */
			getExecutionTime()	{
				return this.executionTime;

			}

			/**
			 * The method to set the value to executionTime
			 * @param {OffsetDateTime} executionTime An instance of OffsetDateTime
			 */
			setExecutionTime(executionTime)	{
				if((executionTime != null) && (!(executionTime instanceof Date))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: executionTime EXPECTED TYPE: Date", null, null);
				}
				this.executionTime = executionTime;
				this.keyModified.set("execution_time", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		BluePrint : class{
			constructor(){

				this.transitionId=null;
				this.data=null;
				this.processInfo=null;
				this.transitions=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the transitionId
			 * @returns {Long} A BigInt representing the transitionId
			 */
			getTransitionId()	{
				return this.transitionId;

			}

			/**
			 * The method to set the value to transitionId
			 * @param {Long} transitionId A BigInt
			 */
			setTransitionId(transitionId)	{
				if((transitionId != null) && (!(Object.prototype.toString.call(transitionId) == "[object BigInt]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: transitionId EXPECTED TYPE: BigInt", null, null);
				}
				this.transitionId = transitionId;
				this.keyModified.set("transition_id", 1);

			}

			/**
			 * The method to get the data
			 * @returns {Record} An instance of Record
			 */
			getData()	{
				return this.data;

			}

			/**
			 * The method to set the value to data
			 * @param {Record} data An instance of Record
			 */
			setData(data)	{
				if((data != null) && (!(data instanceof ZCRM.Record.Model.Record))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: data EXPECTED TYPE: Record", null, null);
				}
				this.data = data;
				this.keyModified.set("data", 1);

			}

			/**
			 * The method to get the processInfo
			 * @returns {ProcessInfo} An instance of ProcessInfo
			 */
			getProcessInfo()	{
				return this.processInfo;

			}

			/**
			 * The method to set the value to processInfo
			 * @param {ProcessInfo} processInfo An instance of ProcessInfo
			 */
			setProcessInfo(processInfo)	{
				if((processInfo != null) && (!(processInfo instanceof ZCRM.BluePrint.Model.ProcessInfo))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: processInfo EXPECTED TYPE: ProcessInfo", null, null);
				}
				this.processInfo = processInfo;
				this.keyModified.set("process_info", 1);

			}

			/**
			 * The method to get the transitions
			 * @returns {List} An Array representing the transitions
			 */
			getTransitions()	{
				return this.transitions;

			}

			/**
			 * The method to set the value to transitions
			 * @param {List} transitions An Array
			 */
			setTransitions(transitions)	{
				if((transitions != null) && (!(Object.prototype.toString.call(transitions) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: transitions EXPECTED TYPE: Array", null, null);
				}
				this.transitions = transitions;
				this.keyModified.set("transitions", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		SuccessResponse : class{
			constructor(){

				this.status=null;
				this.code=null;
				this.message=null;
				this.details=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		BodyWrapper : class{
			constructor(){

				this.blueprint=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the blueprint
			 * @returns {List} An Array representing the blueprint
			 */
			getBlueprint()	{
				return this.blueprint;

			}

			/**
			 * The method to set the value to blueprint
			 * @param {List} blueprint An Array
			 */
			setBlueprint(blueprint)	{
				if((blueprint != null) && (!(Object.prototype.toString.call(blueprint) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: blueprint EXPECTED TYPE: Array", null, null);
				}
				this.blueprint = blueprint;
				this.keyModified.set("blueprint", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		NextTransition : class{
			constructor(){

				this.id=null;
				this.name=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the id
			 * @returns {Long} A BigInt representing the id
			 */
			getId()	{
				return this.id;

			}

			/**
			 * The method to set the value to id
			 * @param {Long} id A BigInt
			 */
			setId(id)	{
				if((id != null) && (!(Object.prototype.toString.call(id) == "[object BigInt]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
				}
				this.id = id;
				this.keyModified.set("id", 1);

			}

			/**
			 * The method to get the name
			 * @returns {String} A String representing the name
			 */
			getName()	{
				return this.name;

			}

			/**
			 * The method to set the value to name
			 * @param {String} name A String
			 */
			setName(name)	{
				if((name != null) && (!(Object.prototype.toString.call(name) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: name EXPECTED TYPE: String", null, null);
				}
				this.name = name;
				this.keyModified.set("name", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		ProcessInfo : class{
			constructor(){

				this.fieldId=null;
				this.isContinuous=null;
				this.apiName=null;
				this.continuous=null;
				this.fieldLabel=null;
				this.name=null;
				this.columnName=null;
				this.fieldValue=null;
				this.id=null;
				this.fieldName=null;
				this.escalation=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the fieldId
			 * @returns {String} A String representing the fieldId
			 */
			getFieldId()	{
				return this.fieldId;

			}

			/**
			 * The method to set the value to fieldId
			 * @param {String} fieldId A String
			 */
			setFieldId(fieldId)	{
				if((fieldId != null) && (!(Object.prototype.toString.call(fieldId) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: fieldId EXPECTED TYPE: String", null, null);
				}
				this.fieldId = fieldId;
				this.keyModified.set("field_id", 1);

			}

			/**
			 * The method to get the isContinuous
			 * @returns {Boolean} A Boolean representing the isContinuous
			 */
			getIsContinuous()	{
				return this.isContinuous;

			}

			/**
			 * The method to set the value to isContinuous
			 * @param {Boolean} isContinuous A Boolean
			 */
			setIsContinuous(isContinuous)	{
				if((isContinuous != null) && (!(Object.prototype.toString.call(isContinuous) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: isContinuous EXPECTED TYPE: Boolean", null, null);
				}
				this.isContinuous = isContinuous;
				this.keyModified.set("is_continuous", 1);

			}

			/**
			 * The method to get the apiName
			 * @returns {String} A String representing the apiName
			 */
			getAPIName()	{
				return this.apiName;

			}

			/**
			 * The method to set the value to apiName
			 * @param {String} apiName A String
			 */
			setAPIName(apiName)	{
				if((apiName != null) && (!(Object.prototype.toString.call(apiName) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: apiName EXPECTED TYPE: String", null, null);
				}
				this.apiName = apiName;
				this.keyModified.set("api_name", 1);

			}

			/**
			 * The method to get the continuous
			 * @returns {Boolean} A Boolean representing the continuous
			 */
			getContinuous()	{
				return this.continuous;

			}

			/**
			 * The method to set the value to continuous
			 * @param {Boolean} continuous A Boolean
			 */
			setContinuous(continuous)	{
				if((continuous != null) && (!(Object.prototype.toString.call(continuous) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: continuous EXPECTED TYPE: Boolean", null, null);
				}
				this.continuous = continuous;
				this.keyModified.set("continuous", 1);

			}

			/**
			 * The method to get the fieldLabel
			 * @returns {String} A String representing the fieldLabel
			 */
			getFieldLabel()	{
				return this.fieldLabel;

			}

			/**
			 * The method to set the value to fieldLabel
			 * @param {String} fieldLabel A String
			 */
			setFieldLabel(fieldLabel)	{
				if((fieldLabel != null) && (!(Object.prototype.toString.call(fieldLabel) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: fieldLabel EXPECTED TYPE: String", null, null);
				}
				this.fieldLabel = fieldLabel;
				this.keyModified.set("field_label", 1);

			}

			/**
			 * The method to get the name
			 * @returns {String} A String representing the name
			 */
			getName()	{
				return this.name;

			}

			/**
			 * The method to set the value to name
			 * @param {String} name A String
			 */
			setName(name)	{
				if((name != null) && (!(Object.prototype.toString.call(name) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: name EXPECTED TYPE: String", null, null);
				}
				this.name = name;
				this.keyModified.set("name", 1);

			}

			/**
			 * The method to get the columnName
			 * @returns {String} A String representing the columnName
			 */
			getColumnName()	{
				return this.columnName;

			}

			/**
			 * The method to set the value to columnName
			 * @param {String} columnName A String
			 */
			setColumnName(columnName)	{
				if((columnName != null) && (!(Object.prototype.toString.call(columnName) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: columnName EXPECTED TYPE: String", null, null);
				}
				this.columnName = columnName;
				this.keyModified.set("column_name", 1);

			}

			/**
			 * The method to get the fieldValue
			 * @returns {String} A String representing the fieldValue
			 */
			getFieldValue()	{
				return this.fieldValue;

			}

			/**
			 * The method to set the value to fieldValue
			 * @param {String} fieldValue A String
			 */
			setFieldValue(fieldValue)	{
				if((fieldValue != null) && (!(Object.prototype.toString.call(fieldValue) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: fieldValue EXPECTED TYPE: String", null, null);
				}
				this.fieldValue = fieldValue;
				this.keyModified.set("field_value", 1);

			}

			/**
			 * The method to get the id
			 * @returns {Long} A BigInt representing the id
			 */
			getId()	{
				return this.id;

			}

			/**
			 * The method to set the value to id
			 * @param {Long} id A BigInt
			 */
			setId(id)	{
				if((id != null) && (!(Object.prototype.toString.call(id) == "[object BigInt]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
				}
				this.id = id;
				this.keyModified.set("id", 1);

			}

			/**
			 * The method to get the fieldName
			 * @returns {String} A String representing the fieldName
			 */
			getFieldName()	{
				return this.fieldName;

			}

			/**
			 * The method to set the value to fieldName
			 * @param {String} fieldName A String
			 */
			setFieldName(fieldName)	{
				if((fieldName != null) && (!(Object.prototype.toString.call(fieldName) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: fieldName EXPECTED TYPE: String", null, null);
				}
				this.fieldName = fieldName;
				this.keyModified.set("field_name", 1);

			}

			/**
			 * The method to get the escalation
			 * @returns {String} A String representing the escalation
			 */
			getEscalation()	{
				return this.escalation;

			}

			/**
			 * The method to set the value to escalation
			 * @param {String} escalation A String
			 */
			setEscalation(escalation)	{
				if((escalation != null) && (!(Object.prototype.toString.call(escalation) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: escalation EXPECTED TYPE: String", null, null);
				}
				this.escalation = escalation;
				this.keyModified.set("escalation", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		ResponseWrapper : class{
			constructor(){

				this.blueprint=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the blueprint
			 * @returns {BluePrint} An instance of BluePrint
			 */
			getBlueprint()	{
				return this.blueprint;

			}

			/**
			 * The method to set the value to blueprint
			 * @param {BluePrint} blueprint An instance of BluePrint
			 */
			setBlueprint(blueprint)	{
				if((blueprint != null) && (!(blueprint instanceof ZCRM.BluePrint.Model.BluePrint))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: blueprint EXPECTED TYPE: BluePrint", null, null);
				}
				this.blueprint = blueprint;
				this.keyModified.set("blueprint", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		APIException : class{
			constructor(){

				this.status=null;
				this.code=null;
				this.message=null;
				this.details=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		ValidationError : class{
			constructor(){

				this.apiName=null;
				this.message=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the apiName
			 * @returns {String} A String representing the apiName
			 */
			getAPIName()	{
				return this.apiName;

			}

			/**
			 * The method to set the value to apiName
			 * @param {String} apiName A String
			 */
			setAPIName(apiName)	{
				if((apiName != null) && (!(Object.prototype.toString.call(apiName) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: apiName EXPECTED TYPE: String", null, null);
				}
				this.apiName = apiName;
				this.keyModified.set("api_name", 1);

			}

			/**
			 * The method to get the message
			 * @returns {String} A String representing the message
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {String} message A String
			 */
			setMessage(message)	{
				if((message != null) && (!(Object.prototype.toString.call(message) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: String", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		}
	},
	Operations : class {


		/**
		 * Creates an instance of BluePrintOperations with the given parameters
		 * @param {Long} recordId A BigInt
		 * @param {String} moduleAPIName A String
		 */
		constructor(recordId, moduleAPIName){
			if((!(Object.prototype.toString.call(recordId) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: recordId EXPECTED TYPE: BigInt", null, null);
			}
			if((!(Object.prototype.toString.call(moduleAPIName) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: moduleAPIName EXPECTED TYPE: String", null, null);
			}
						this.recordId = recordId;
						this.moduleAPIName = moduleAPIName;

		}

		/**
		 * The method to get blueprint
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getBlueprint(){
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/");
			apiPath = apiPath.concat(this.moduleAPIName.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(this.recordId.toString());
			apiPath = apiPath.concat("/actions/blueprint");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			return handlerInstance.apiCall("BluePrint.Model.ResponseHandler", "application/json");

		}

		/**
		 * The method to update blueprint
		 * @param {BodyWrapper} request An instance of BodyWrapper
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async updateBlueprint(request){
			if((request != null) && (!(request instanceof ZCRM.BluePrint.Model.BodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: BodyWrapper", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/");
			apiPath = apiPath.concat(this.moduleAPIName.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(this.recordId.toString());
			apiPath = apiPath.concat("/actions/blueprint");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_PUT);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_UPDATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			handlerInstance.setMandatoryChecker(true);
			return handlerInstance.apiCall("BluePrint.Model.ActionResponse", "application/json");

		}

	},

}

ZCRM.RelatedRecord = {
	Model : {
		ActionHandler : class{
			constructor(){

			}


		},

		ActionResponse : class{
			constructor(){

			}


		},

		ResponseHandler : class{
			constructor(){

			}


		},

		APIException : class{
			constructor(){

				this.status=null;
				this.code=null;
				this.message=null;
				this.details=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		SuccessResponse : class{
			constructor(){

				this.code=null;
				this.details=null;
				this.message=null;
				this.status=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		BodyWrapper : class{
			constructor(){

				this.data=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the data
			 * @returns {List} An Array representing the data
			 */
			getData()	{
				return this.data;

			}

			/**
			 * The method to set the value to data
			 * @param {List} data An Array
			 */
			setData(data)	{
				if((data != null) && (!(Object.prototype.toString.call(data) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: data EXPECTED TYPE: Array", null, null);
				}
				this.data = data;
				this.keyModified.set("data", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		ActionWrapper : class{
			constructor(){

				this.data=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the data
			 * @returns {List} An Array representing the data
			 */
			getData()	{
				return this.data;

			}

			/**
			 * The method to set the value to data
			 * @param {List} data An Array
			 */
			setData(data)	{
				if((data != null) && (!(Object.prototype.toString.call(data) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: data EXPECTED TYPE: Array", null, null);
				}
				this.data = data;
				this.keyModified.set("data", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		ResponseWrapper : class{
			constructor(){

				this.data=null;
				this.info=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the data
			 * @returns {List} An Array representing the data
			 */
			getData()	{
				return this.data;

			}

			/**
			 * The method to set the value to data
			 * @param {List} data An Array
			 */
			setData(data)	{
				if((data != null) && (!(Object.prototype.toString.call(data) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: data EXPECTED TYPE: Array", null, null);
				}
				this.data = data;
				this.keyModified.set("data", 1);

			}

			/**
			 * The method to get the info
			 * @returns {Info} An instance of Info
			 */
			getInfo()	{
				return this.info;

			}

			/**
			 * The method to set the value to info
			 * @param {Info} info An instance of Info
			 */
			setInfo(info)	{
				if((info != null) && (!(info instanceof ZCRM.Record.Model.Info))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: info EXPECTED TYPE: Info", null, null);
				}
				this.info = info;
				this.keyModified.set("info", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		FileBodyWrapper : class{
			constructor(){

				this.file=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the file
			 * @returns {StreamWrapper} An instance of StreamWrapper
			 */
			getFile()	{
				return this.file;

			}

			/**
			 * The method to set the value to file
			 * @param {StreamWrapper} file An instance of StreamWrapper
			 */
			setFile(file)	{
				if((file != null) && (!(file instanceof StreamWrapper.Model.StreamWrapper))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: file EXPECTED TYPE: StreamWrapper", null, null);
				}
				this.file = file;
				this.keyModified.set("file", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		GetRelatedRecordHeader : {
			IF_MODIFIED_SINCE : 	new Header("If-Modified-Since", "RelatedRecord.Model.GetRelatedRecordHeader"),


		},

		DelinkRecordsHeader : {

		},

		DeleteRelatedRecordUsingExternalIDHeader : {

		},

		GetRelatedRecordsParam : {
			PAGE : 	new Param("page", "RelatedRecord.Model.GetRelatedRecordsParam"),

			PER_PAGE : 	new Param("per_page", "RelatedRecord.Model.GetRelatedRecordsParam"),


		},

		UpdateRelatedRecordUsingExternalIDHeader : {

		},

		GetRelatedRecordsUsingExternalIDParam : {
			PAGE : 	new Param("page", "RelatedRecord.Model.GetRelatedRecordsUsingExternalIDParam"),

			PER_PAGE : 	new Param("per_page", "RelatedRecord.Model.GetRelatedRecordsUsingExternalIDParam"),


		},

		DeleteRelatedRecordsUsingExternalIDHeader : {

		},

		GetRelatedRecordUsingExternalIDHeader : {
			IF_MODIFIED_SINCE : 	new Header("If-Modified-Since", "RelatedRecord.Model.GetRelatedRecordUsingExternalIDHeader"),


		},

		UpdateRelatedRecordsUsingExternalIDHeader : {

		},

		GetRelatedRecordsUsingExternalIDHeader : {
			IF_MODIFIED_SINCE : 	new Header("If-Modified-Since", "RelatedRecord.Model.GetRelatedRecordsUsingExternalIDHeader"),


		},

		DeleteRelatedRecordsUsingExternalIDParam : {
			IDS : 	new Param("ids", "RelatedRecord.Model.DeleteRelatedRecordsUsingExternalIDParam"),


		},

		DelinkRecordHeader : {

		},

		UpdateRelatedRecordHeader : {

		},

		GetRelatedRecordsHeader : {
			IF_MODIFIED_SINCE : 	new Header("If-Modified-Since", "RelatedRecord.Model.GetRelatedRecordsHeader"),


		},

		UpdateRelatedRecordsHeader : {

		},

		DelinkRecordsParam : {
			IDS : 	new Param("ids", "RelatedRecord.Model.DelinkRecordsParam"),


		}
	},
	Operations : class {


		/**
		 * Creates an instance of RelatedRecordsOperations with the given parameters
		 * @param {String} relatedListAPIName A String
		 * @param {String} moduleAPIName A String
		 * @param {String} xExternal A String
		 */
		constructor(relatedListAPIName, moduleAPIName, xExternal=null){
			if((!(Object.prototype.toString.call(relatedListAPIName) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: relatedListAPIName EXPECTED TYPE: String", null, null);
			}
			if((!(Object.prototype.toString.call(moduleAPIName) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: moduleAPIName EXPECTED TYPE: String", null, null);
			}
			if((xExternal != null) && (!(Object.prototype.toString.call(xExternal) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: xExternal EXPECTED TYPE: String", null, null);
			}
						this.relatedListAPIName = relatedListAPIName;
						this.moduleAPIName = moduleAPIName;
						this.xExternal = xExternal;

		}

		/**
		 * The method to get related records
		 * @param {Long} recordId A BigInt
		 * @param {ParameterMap} paramInstance An instance of ParameterMap
		 * @param {HeaderMap} headerInstance An instance of HeaderMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getRelatedRecords(recordId, paramInstance=null, headerInstance=null){
			if((!(Object.prototype.toString.call(recordId) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: recordId EXPECTED TYPE: BigInt", null, null);
			}
			if((paramInstance != null) && (!(paramInstance instanceof ParameterMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paramInstance EXPECTED TYPE: ParameterMap", null, null);
			}
			if((headerInstance != null) && (!(headerInstance instanceof HeaderMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: headerInstance EXPECTED TYPE: HeaderMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/");
			apiPath = apiPath.concat(this.moduleAPIName.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(recordId.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(this.relatedListAPIName.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			await handlerInstance.addHeader(new Header("X-EXTERNAL", "RelatedRecord.Model.GetRelatedRecordsHeader"), this.xExternal);
			handlerInstance.setParam(paramInstance);
			handlerInstance.setHeader(headerInstance);
			await Utility.getRelatedLists(this.relatedListAPIName, this.moduleAPIName, handlerInstance);
			return handlerInstance.apiCall("RelatedRecord.Model.ResponseHandler", "application/json");

		}

		/**
		 * The method to update related records
		 * @param {Long} recordId A BigInt
		 * @param {BodyWrapper} request An instance of BodyWrapper
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async updateRelatedRecords(recordId, request){
			if((!(Object.prototype.toString.call(recordId) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: recordId EXPECTED TYPE: BigInt", null, null);
			}
			if((request != null) && (!(request instanceof ZCRM.RelatedRecord.Model.BodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: BodyWrapper", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/");
			apiPath = apiPath.concat(this.moduleAPIName.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(recordId.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(this.relatedListAPIName.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_PUT);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_UPDATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			await handlerInstance.addHeader(new Header("X-EXTERNAL", "RelatedRecord.Model.UpdateRelatedRecordsHeader"), this.xExternal);
			await Utility.getRelatedLists(this.relatedListAPIName, this.moduleAPIName, handlerInstance);
			return handlerInstance.apiCall("RelatedRecord.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to delink records
		 * @param {Long} recordId A BigInt
		 * @param {ParameterMap} paramInstance An instance of ParameterMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async delinkRecords(recordId, paramInstance=null){
			if((!(Object.prototype.toString.call(recordId) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: recordId EXPECTED TYPE: BigInt", null, null);
			}
			if((paramInstance != null) && (!(paramInstance instanceof ParameterMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paramInstance EXPECTED TYPE: ParameterMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/");
			apiPath = apiPath.concat(this.moduleAPIName.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(recordId.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(this.relatedListAPIName.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_DELETE);
			handlerInstance.setCategoryMethod(Constants.REQUEST_METHOD_DELETE);
			await handlerInstance.addHeader(new Header("X-EXTERNAL", "RelatedRecord.Model.DelinkRecordsHeader"), this.xExternal);
			handlerInstance.setParam(paramInstance);
			await Utility.getFields(this.moduleAPIName, handlerInstance);
			return handlerInstance.apiCall("RelatedRecord.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to get related records using external id
		 * @param {String} externalValue A String
		 * @param {ParameterMap} paramInstance An instance of ParameterMap
		 * @param {HeaderMap} headerInstance An instance of HeaderMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getRelatedRecordsUsingExternalId(externalValue, paramInstance=null, headerInstance=null){
			if((!(Object.prototype.toString.call(externalValue) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: externalValue EXPECTED TYPE: String", null, null);
			}
			if((paramInstance != null) && (!(paramInstance instanceof ParameterMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paramInstance EXPECTED TYPE: ParameterMap", null, null);
			}
			if((headerInstance != null) && (!(headerInstance instanceof HeaderMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: headerInstance EXPECTED TYPE: HeaderMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/");
			apiPath = apiPath.concat(this.moduleAPIName.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(externalValue.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(this.relatedListAPIName.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			await handlerInstance.addHeader(new Header("X-EXTERNAL", "RelatedRecord.Model.GetRelatedRecordsUsingExternalIDHeader"), this.xExternal);
			handlerInstance.setParam(paramInstance);
			handlerInstance.setHeader(headerInstance);
			await Utility.getRelatedLists(this.relatedListAPIName, this.moduleAPIName, handlerInstance);
			return handlerInstance.apiCall("RelatedRecord.Model.ResponseHandler", "application/json");

		}

		/**
		 * The method to update related records using external id
		 * @param {String} externalValue A String
		 * @param {BodyWrapper} request An instance of BodyWrapper
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async updateRelatedRecordsUsingExternalId(externalValue, request){
			if((!(Object.prototype.toString.call(externalValue) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: externalValue EXPECTED TYPE: String", null, null);
			}
			if((request != null) && (!(request instanceof ZCRM.RelatedRecord.Model.BodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: BodyWrapper", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/");
			apiPath = apiPath.concat(this.moduleAPIName.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(externalValue.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(this.relatedListAPIName.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_PUT);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_UPDATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			await handlerInstance.addHeader(new Header("X-EXTERNAL", "RelatedRecord.Model.UpdateRelatedRecordsUsingExternalIDHeader"), this.xExternal);
			await Utility.getRelatedLists(this.relatedListAPIName, this.moduleAPIName, handlerInstance);
			return handlerInstance.apiCall("RelatedRecord.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to delete related records using external id
		 * @param {String} externalValue A String
		 * @param {ParameterMap} paramInstance An instance of ParameterMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async deleteRelatedRecordsUsingExternalId(externalValue, paramInstance=null){
			if((!(Object.prototype.toString.call(externalValue) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: externalValue EXPECTED TYPE: String", null, null);
			}
			if((paramInstance != null) && (!(paramInstance instanceof ParameterMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paramInstance EXPECTED TYPE: ParameterMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/");
			apiPath = apiPath.concat(this.moduleAPIName.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(externalValue.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(this.relatedListAPIName.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_DELETE);
			handlerInstance.setCategoryMethod(Constants.REQUEST_METHOD_DELETE);
			await handlerInstance.addHeader(new Header("X-EXTERNAL", "RelatedRecord.Model.DeleteRelatedRecordsUsingExternalIDHeader"), this.xExternal);
			handlerInstance.setParam(paramInstance);
			await Utility.getRelatedLists(this.relatedListAPIName, this.moduleAPIName, handlerInstance);
			return handlerInstance.apiCall("RelatedRecord.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to get related record
		 * @param {Long} relatedRecordId A BigInt
		 * @param {Long} recordId A BigInt
		 * @param {HeaderMap} headerInstance An instance of HeaderMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getRelatedRecord(relatedRecordId, recordId, headerInstance=null){
			if((!(Object.prototype.toString.call(relatedRecordId) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: relatedRecordId EXPECTED TYPE: BigInt", null, null);
			}
			if((!(Object.prototype.toString.call(recordId) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: recordId EXPECTED TYPE: BigInt", null, null);
			}
			if((headerInstance != null) && (!(headerInstance instanceof HeaderMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: headerInstance EXPECTED TYPE: HeaderMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/");
			apiPath = apiPath.concat(this.moduleAPIName.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(recordId.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(this.relatedListAPIName.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(relatedRecordId.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			await handlerInstance.addHeader(new Header("X-EXTERNAL", "RelatedRecord.Model.GetRelatedRecordHeader"), this.xExternal);
			handlerInstance.setHeader(headerInstance);
			await Utility.getRelatedLists(this.relatedListAPIName, this.moduleAPIName, handlerInstance);
			return handlerInstance.apiCall("RelatedRecord.Model.ResponseHandler", "application/json");

		}

		/**
		 * The method to update related record
		 * @param {Long} relatedRecordId A BigInt
		 * @param {Long} recordId A BigInt
		 * @param {BodyWrapper} request An instance of BodyWrapper
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async updateRelatedRecord(relatedRecordId, recordId, request){
			if((!(Object.prototype.toString.call(relatedRecordId) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: relatedRecordId EXPECTED TYPE: BigInt", null, null);
			}
			if((!(Object.prototype.toString.call(recordId) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: recordId EXPECTED TYPE: BigInt", null, null);
			}
			if((request != null) && (!(request instanceof ZCRM.RelatedRecord.Model.BodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: BodyWrapper", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/");
			apiPath = apiPath.concat(this.moduleAPIName.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(recordId.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(this.relatedListAPIName.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(relatedRecordId.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_PUT);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_UPDATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			await handlerInstance.addHeader(new Header("X-EXTERNAL", "RelatedRecord.Model.UpdateRelatedRecordHeader"), this.xExternal);
			await Utility.getRelatedLists(this.relatedListAPIName, this.moduleAPIName, handlerInstance);
			return handlerInstance.apiCall("RelatedRecord.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to delink record
		 * @param {Long} relatedRecordId A BigInt
		 * @param {Long} recordId A BigInt
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async delinkRecord(relatedRecordId, recordId){
			if((!(Object.prototype.toString.call(relatedRecordId) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: relatedRecordId EXPECTED TYPE: BigInt", null, null);
			}
			if((!(Object.prototype.toString.call(recordId) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: recordId EXPECTED TYPE: BigInt", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/");
			apiPath = apiPath.concat(this.moduleAPIName.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(recordId.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(this.relatedListAPIName.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(relatedRecordId.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_DELETE);
			handlerInstance.setCategoryMethod(Constants.REQUEST_METHOD_DELETE);
			await handlerInstance.addHeader(new Header("X-EXTERNAL", "RelatedRecord.Model.DelinkRecordHeader"), this.xExternal);
			await Utility.getFields(this.moduleAPIName, handlerInstance);
			return handlerInstance.apiCall("RelatedRecord.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to get related record using external id
		 * @param {String} externalFieldValue A String
		 * @param {String} externalValue A String
		 * @param {HeaderMap} headerInstance An instance of HeaderMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getRelatedRecordUsingExternalId(externalFieldValue, externalValue, headerInstance=null){
			if((!(Object.prototype.toString.call(externalFieldValue) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: externalFieldValue EXPECTED TYPE: String", null, null);
			}
			if((!(Object.prototype.toString.call(externalValue) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: externalValue EXPECTED TYPE: String", null, null);
			}
			if((headerInstance != null) && (!(headerInstance instanceof HeaderMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: headerInstance EXPECTED TYPE: HeaderMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/");
			apiPath = apiPath.concat(this.moduleAPIName.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(externalValue.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(this.relatedListAPIName.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(externalFieldValue.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			await handlerInstance.addHeader(new Header("X-EXTERNAL", "RelatedRecord.Model.GetRelatedRecordUsingExternalIDHeader"), this.xExternal);
			handlerInstance.setHeader(headerInstance);
			await Utility.getRelatedLists(this.relatedListAPIName, this.moduleAPIName, handlerInstance);
			return handlerInstance.apiCall("RelatedRecord.Model.ResponseHandler", "application/json");

		}

		/**
		 * The method to update related record using external id
		 * @param {String} externalFieldValue A String
		 * @param {String} externalValue A String
		 * @param {BodyWrapper} request An instance of BodyWrapper
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async updateRelatedRecordUsingExternalId(externalFieldValue, externalValue, request){
			if((!(Object.prototype.toString.call(externalFieldValue) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: externalFieldValue EXPECTED TYPE: String", null, null);
			}
			if((!(Object.prototype.toString.call(externalValue) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: externalValue EXPECTED TYPE: String", null, null);
			}
			if((request != null) && (!(request instanceof ZCRM.RelatedRecord.Model.BodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: BodyWrapper", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/");
			apiPath = apiPath.concat(this.moduleAPIName.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(externalValue.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(this.relatedListAPIName.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(externalFieldValue.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_PUT);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_UPDATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			await handlerInstance.addHeader(new Header("X-EXTERNAL", "RelatedRecord.Model.UpdateRelatedRecordUsingExternalIDHeader"), this.xExternal);
			await Utility.getRelatedLists(this.relatedListAPIName, this.moduleAPIName, handlerInstance);
			return handlerInstance.apiCall("RelatedRecord.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to delete related record using external id
		 * @param {String} externalFieldValue A String
		 * @param {String} externalValue A String
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async deleteRelatedRecordUsingExternalId(externalFieldValue, externalValue){
			if((!(Object.prototype.toString.call(externalFieldValue) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: externalFieldValue EXPECTED TYPE: String", null, null);
			}
			if((!(Object.prototype.toString.call(externalValue) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: externalValue EXPECTED TYPE: String", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/");
			apiPath = apiPath.concat(this.moduleAPIName.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(externalValue.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(this.relatedListAPIName.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(externalFieldValue.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_DELETE);
			handlerInstance.setCategoryMethod(Constants.REQUEST_METHOD_DELETE);
			await handlerInstance.addHeader(new Header("X-EXTERNAL", "RelatedRecord.Model.DeleteRelatedRecordUsingExternalIDHeader"), this.xExternal);
			await Utility.getRelatedLists(this.relatedListAPIName, this.moduleAPIName, handlerInstance);
			return handlerInstance.apiCall("RelatedRecord.Model.ActionHandler", "application/json");

		}

	},

}

class ProxyBuilder {
    constructor() {
        this._host = null;

        this._port = null;
    }

    host(host) {
        Utility.assertNotNull(host, Constants.USER_PROXY_ERROR, Constants.HOST_ERROR_MESSAGE);

        this._host = host;

        return this;
    }

    port(port) {
        Utility.assertNotNull(port, Constants.USER_PROXY_ERROR, Constants.PORT_ERROR_MESSAGE);

        this._port = port;

        return this;
    }

    build() {
        Utility.assertNotNull(this._host, Constants.REQUEST_PROXY_ERROR, Constants.HOST_ERROR_MESSAGE);

        Utility.assertNotNull(this._port, Constants.REQUEST_PROXY_ERROR, Constants.PORT_ERROR_MESSAGE);

        return new RequestProxy(this._host, this._port);
    }
}

ZCRM.Role = {
	Model : {
		ResponseHandler : class{
			constructor(){

			}


		},

		Role : class{
			constructor(){

				this.displayLabel=null;
				this.forecastManager=null;
				this.shareWithPeers=null;
				this.name=null;
				this.description=null;
				this.id=null;
				this.reportingTo=null;
				this.adminUser=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the displayLabel
			 * @returns {String} A String representing the displayLabel
			 */
			getDisplayLabel()	{
				return this.displayLabel;

			}

			/**
			 * The method to set the value to displayLabel
			 * @param {String} displayLabel A String
			 */
			setDisplayLabel(displayLabel)	{
				if((displayLabel != null) && (!(Object.prototype.toString.call(displayLabel) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: displayLabel EXPECTED TYPE: String", null, null);
				}
				this.displayLabel = displayLabel;
				this.keyModified.set("display_label", 1);

			}

			/**
			 * The method to get the forecastManager
			 * @returns {User} An instance of User
			 */
			getForecastManager()	{
				return this.forecastManager;

			}

			/**
			 * The method to set the value to forecastManager
			 * @param {User} forecastManager An instance of User
			 */
			setForecastManager(forecastManager)	{
				if((forecastManager != null) && (!(forecastManager instanceof ZCRM.User.Model.User))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: forecastManager EXPECTED TYPE: User", null, null);
				}
				this.forecastManager = forecastManager;
				this.keyModified.set("forecast_manager", 1);

			}

			/**
			 * The method to get the shareWithPeers
			 * @returns {Boolean} A Boolean representing the shareWithPeers
			 */
			getShareWithPeers()	{
				return this.shareWithPeers;

			}

			/**
			 * The method to set the value to shareWithPeers
			 * @param {Boolean} shareWithPeers A Boolean
			 */
			setShareWithPeers(shareWithPeers)	{
				if((shareWithPeers != null) && (!(Object.prototype.toString.call(shareWithPeers) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: shareWithPeers EXPECTED TYPE: Boolean", null, null);
				}
				this.shareWithPeers = shareWithPeers;
				this.keyModified.set("share_with_peers", 1);

			}

			/**
			 * The method to get the name
			 * @returns {String} A String representing the name
			 */
			getName()	{
				return this.name;

			}

			/**
			 * The method to set the value to name
			 * @param {String} name A String
			 */
			setName(name)	{
				if((name != null) && (!(Object.prototype.toString.call(name) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: name EXPECTED TYPE: String", null, null);
				}
				this.name = name;
				this.keyModified.set("name", 1);

			}

			/**
			 * The method to get the description
			 * @returns {String} A String representing the description
			 */
			getDescription()	{
				return this.description;

			}

			/**
			 * The method to set the value to description
			 * @param {String} description A String
			 */
			setDescription(description)	{
				if((description != null) && (!(Object.prototype.toString.call(description) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: description EXPECTED TYPE: String", null, null);
				}
				this.description = description;
				this.keyModified.set("description", 1);

			}

			/**
			 * The method to get the id
			 * @returns {Long} A BigInt representing the id
			 */
			getId()	{
				return this.id;

			}

			/**
			 * The method to set the value to id
			 * @param {Long} id A BigInt
			 */
			setId(id)	{
				if((id != null) && (!(Object.prototype.toString.call(id) == "[object BigInt]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
				}
				this.id = id;
				this.keyModified.set("id", 1);

			}

			/**
			 * The method to get the reportingTo
			 * @returns {User} An instance of User
			 */
			getReportingTo()	{
				return this.reportingTo;

			}

			/**
			 * The method to set the value to reportingTo
			 * @param {User} reportingTo An instance of User
			 */
			setReportingTo(reportingTo)	{
				if((reportingTo != null) && (!(reportingTo instanceof ZCRM.User.Model.User))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: reportingTo EXPECTED TYPE: User", null, null);
				}
				this.reportingTo = reportingTo;
				this.keyModified.set("reporting_to", 1);

			}

			/**
			 * The method to get the adminUser
			 * @returns {Boolean} A Boolean representing the adminUser
			 */
			getAdminUser()	{
				return this.adminUser;

			}

			/**
			 * The method to set the value to adminUser
			 * @param {Boolean} adminUser A Boolean
			 */
			setAdminUser(adminUser)	{
				if((adminUser != null) && (!(Object.prototype.toString.call(adminUser) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: adminUser EXPECTED TYPE: Boolean", null, null);
				}
				this.adminUser = adminUser;
				this.keyModified.set("admin_user", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		APIException : class{
			constructor(){

				this.status=null;
				this.code=null;
				this.message=null;
				this.details=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		ResponseWrapper : class{
			constructor(){

				this.roles=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the roles
			 * @returns {List} An Array representing the roles
			 */
			getRoles()	{
				return this.roles;

			}

			/**
			 * The method to set the value to roles
			 * @param {List} roles An Array
			 */
			setRoles(roles)	{
				if((roles != null) && (!(Object.prototype.toString.call(roles) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: roles EXPECTED TYPE: Array", null, null);
				}
				this.roles = roles;
				this.keyModified.set("roles", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		}
	},
	Operations : class {
		constructor(){

		}

		/**
		 * The method to get roles
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getRoles(){
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/settings/roles");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			return handlerInstance.apiCall("Role.Model.ResponseHandler", "application/json");

		}

		/**
		 * The method to get role
		 * @param {Long} id A BigInt
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getRole(id){
			if((!(Object.prototype.toString.call(id) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/settings/roles/");
			apiPath = apiPath.concat(id.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			return handlerInstance.apiCall("Role.Model.ResponseHandler", "application/json");

		}
	},

}

ZCRM.Tag = {
	Model : {
		ActionHandler : class{
			constructor(){

			}


		},

		RecordActionResponse : class{
			constructor(){

			}


		},

		CountHandler : class{
			constructor(){

			}


		},

		RecordActionHandler : class{
			constructor(){

			}


		},

		ActionResponse : class{
			constructor(){

			}


		},

		ResponseHandler : class{
			constructor(){

			}


		},

		MergeWrapper : class{
			constructor(){

				this.tags=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the tags
			 * @returns {List} An Array representing the tags
			 */
			getTags()	{
				return this.tags;

			}

			/**
			 * The method to set the value to tags
			 * @param {List} tags An Array
			 */
			setTags(tags)	{
				if((tags != null) && (!(Object.prototype.toString.call(tags) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: tags EXPECTED TYPE: Array", null, null);
				}
				this.tags = tags;
				this.keyModified.set("tags", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		ActionWrapper : class{
			constructor(){

				this.tags=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the tags
			 * @returns {List} An Array representing the tags
			 */
			getTags()	{
				return this.tags;

			}

			/**
			 * The method to set the value to tags
			 * @param {List} tags An Array
			 */
			setTags(tags)	{
				if((tags != null) && (!(Object.prototype.toString.call(tags) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: tags EXPECTED TYPE: Array", null, null);
				}
				this.tags = tags;
				this.keyModified.set("tags", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		BodyWrapper : class{
			constructor(){

				this.tags=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the tags
			 * @returns {List} An Array representing the tags
			 */
			getTags()	{
				return this.tags;

			}

			/**
			 * The method to set the value to tags
			 * @param {List} tags An Array
			 */
			setTags(tags)	{
				if((tags != null) && (!(Object.prototype.toString.call(tags) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: tags EXPECTED TYPE: Array", null, null);
				}
				this.tags = tags;
				this.keyModified.set("tags", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		ResponseWrapper : class{
			constructor(){

				this.tags=null;
				this.info=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the tags
			 * @returns {List} An Array representing the tags
			 */
			getTags()	{
				return this.tags;

			}

			/**
			 * The method to set the value to tags
			 * @param {List} tags An Array
			 */
			setTags(tags)	{
				if((tags != null) && (!(Object.prototype.toString.call(tags) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: tags EXPECTED TYPE: Array", null, null);
				}
				this.tags = tags;
				this.keyModified.set("tags", 1);

			}

			/**
			 * The method to get the info
			 * @returns {Info} An instance of Info
			 */
			getInfo()	{
				return this.info;

			}

			/**
			 * The method to set the value to info
			 * @param {Info} info An instance of Info
			 */
			setInfo(info)	{
				if((info != null) && (!(info instanceof ZCRM.Tag.Model.Info))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: info EXPECTED TYPE: Info", null, null);
				}
				this.info = info;
				this.keyModified.set("info", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		Tag : class{
			constructor(){

				this.createdTime=null;
				this.modifiedTime=null;
				this.name=null;
				this.modifiedBy=null;
				this.id=null;
				this.createdBy=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the createdTime
			 * @returns {OffsetDateTime} An instance of OffsetDateTime
			 */
			getCreatedTime()	{
				return this.createdTime;

			}

			/**
			 * The method to set the value to createdTime
			 * @param {OffsetDateTime} createdTime An instance of OffsetDateTime
			 */
			setCreatedTime(createdTime)	{
				if((createdTime != null) && (!(createdTime instanceof Date))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: createdTime EXPECTED TYPE: Date", null, null);
				}
				this.createdTime = createdTime;
				this.keyModified.set("created_time", 1);

			}

			/**
			 * The method to get the modifiedTime
			 * @returns {OffsetDateTime} An instance of OffsetDateTime
			 */
			getModifiedTime()	{
				return this.modifiedTime;

			}

			/**
			 * The method to set the value to modifiedTime
			 * @param {OffsetDateTime} modifiedTime An instance of OffsetDateTime
			 */
			setModifiedTime(modifiedTime)	{
				if((modifiedTime != null) && (!(modifiedTime instanceof Date))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modifiedTime EXPECTED TYPE: Date", null, null);
				}
				this.modifiedTime = modifiedTime;
				this.keyModified.set("modified_time", 1);

			}

			/**
			 * The method to get the name
			 * @returns {String} A String representing the name
			 */
			getName()	{
				return this.name;

			}

			/**
			 * The method to set the value to name
			 * @param {String} name A String
			 */
			setName(name)	{
				if((name != null) && (!(Object.prototype.toString.call(name) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: name EXPECTED TYPE: String", null, null);
				}
				this.name = name;
				this.keyModified.set("name", 1);

			}

			/**
			 * The method to get the modifiedBy
			 * @returns {User} An instance of User
			 */
			getModifiedBy()	{
				return this.modifiedBy;

			}

			/**
			 * The method to set the value to modifiedBy
			 * @param {User} modifiedBy An instance of User
			 */
			setModifiedBy(modifiedBy)	{
				if((modifiedBy != null) && (!(modifiedBy instanceof ZCRM.User.Model.User))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modifiedBy EXPECTED TYPE: User", null, null);
				}
				this.modifiedBy = modifiedBy;
				this.keyModified.set("modified_by", 1);

			}

			/**
			 * The method to get the id
			 * @returns {Long} A BigInt representing the id
			 */
			getId()	{
				return this.id;

			}

			/**
			 * The method to set the value to id
			 * @param {Long} id A BigInt
			 */
			setId(id)	{
				if((id != null) && (!(Object.prototype.toString.call(id) == "[object BigInt]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
				}
				this.id = id;
				this.keyModified.set("id", 1);

			}

			/**
			 * The method to get the createdBy
			 * @returns {User} An instance of User
			 */
			getCreatedBy()	{
				return this.createdBy;

			}

			/**
			 * The method to set the value to createdBy
			 * @param {User} createdBy An instance of User
			 */
			setCreatedBy(createdBy)	{
				if((createdBy != null) && (!(createdBy instanceof ZCRM.User.Model.User))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: createdBy EXPECTED TYPE: User", null, null);
				}
				this.createdBy = createdBy;
				this.keyModified.set("created_by", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		Info : class{
			constructor(){

				this.count=null;
				this.allowedCount=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the count
			 * @returns {Integer} An Integer representing the count
			 */
			getCount()	{
				return this.count;

			}

			/**
			 * The method to set the value to count
			 * @param {Integer} count An Integer
			 */
			setCount(count)	{
				if((count != null) && (!(Object.prototype.toString.call(count) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: count EXPECTED TYPE: Integer", null, null);
				}
				this.count = count;
				this.keyModified.set("count", 1);

			}

			/**
			 * The method to get the allowedCount
			 * @returns {Integer} An Integer representing the allowedCount
			 */
			getAllowedCount()	{
				return this.allowedCount;

			}

			/**
			 * The method to set the value to allowedCount
			 * @param {Integer} allowedCount An Integer
			 */
			setAllowedCount(allowedCount)	{
				if((allowedCount != null) && (!(Object.prototype.toString.call(allowedCount) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: allowedCount EXPECTED TYPE: Integer", null, null);
				}
				this.allowedCount = allowedCount;
				this.keyModified.set("allowed_count", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		SuccessResponse : class{
			constructor(){

				this.code=null;
				this.status=null;
				this.message=null;
				this.details=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		APIException : class{
			constructor(){

				this.status=null;
				this.code=null;
				this.message=null;
				this.details=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		RecordActionWrapper : class{
			constructor(){

				this.data=null;
				this.wfScheduler=null;
				this.successCount=null;
				this.lockedCount=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the data
			 * @returns {List} An Array representing the data
			 */
			getData()	{
				return this.data;

			}

			/**
			 * The method to set the value to data
			 * @param {List} data An Array
			 */
			setData(data)	{
				if((data != null) && (!(Object.prototype.toString.call(data) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: data EXPECTED TYPE: Array", null, null);
				}
				this.data = data;
				this.keyModified.set("data", 1);

			}

			/**
			 * The method to get the wfScheduler
			 * @returns {Boolean} A Boolean representing the wfScheduler
			 */
			getWfScheduler()	{
				return this.wfScheduler;

			}

			/**
			 * The method to set the value to wfScheduler
			 * @param {Boolean} wfScheduler A Boolean
			 */
			setWfScheduler(wfScheduler)	{
				if((wfScheduler != null) && (!(Object.prototype.toString.call(wfScheduler) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: wfScheduler EXPECTED TYPE: Boolean", null, null);
				}
				this.wfScheduler = wfScheduler;
				this.keyModified.set("wf_scheduler", 1);

			}

			/**
			 * The method to get the successCount
			 * @returns {String} A String representing the successCount
			 */
			getSuccessCount()	{
				return this.successCount;

			}

			/**
			 * The method to set the value to successCount
			 * @param {String} successCount A String
			 */
			setSuccessCount(successCount)	{
				if((successCount != null) && (!(Object.prototype.toString.call(successCount) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: successCount EXPECTED TYPE: String", null, null);
				}
				this.successCount = successCount;
				this.keyModified.set("success_count", 1);

			}

			/**
			 * The method to get the lockedCount
			 * @returns {Integer} An Integer representing the lockedCount
			 */
			getLockedCount()	{
				return this.lockedCount;

			}

			/**
			 * The method to set the value to lockedCount
			 * @param {Integer} lockedCount An Integer
			 */
			setLockedCount(lockedCount)	{
				if((lockedCount != null) && (!(Object.prototype.toString.call(lockedCount) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: lockedCount EXPECTED TYPE: Integer", null, null);
				}
				this.lockedCount = lockedCount;
				this.keyModified.set("locked_count", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		CountWrapper : class{
			constructor(){

				this.count=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the count
			 * @returns {String} A String representing the count
			 */
			getCount()	{
				return this.count;

			}

			/**
			 * The method to set the value to count
			 * @param {String} count A String
			 */
			setCount(count)	{
				if((count != null) && (!(Object.prototype.toString.call(count) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: count EXPECTED TYPE: String", null, null);
				}
				this.count = count;
				this.keyModified.set("count", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		ConflictWrapper : class{
			constructor(){

				this.conflictId=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the conflictId
			 * @returns {String} A String representing the conflictId
			 */
			getConflictId()	{
				return this.conflictId;

			}

			/**
			 * The method to set the value to conflictId
			 * @param {String} conflictId A String
			 */
			setConflictId(conflictId)	{
				if((conflictId != null) && (!(Object.prototype.toString.call(conflictId) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: conflictId EXPECTED TYPE: String", null, null);
				}
				this.conflictId = conflictId;
				this.keyModified.set("conflict_id", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		RemoveTagsFromMultipleRecordsParam : {
			TAG_NAMES : 	new Param("tag_names", "Tag.Model.RemoveTagsFromMultipleRecordsParam"),

			IDS : 	new Param("ids", "Tag.Model.RemoveTagsFromMultipleRecordsParam"),


		},

		AddTagsToRecordParam : {
			TAG_NAMES : 	new Param("tag_names", "Tag.Model.AddTagsToRecordParam"),

			OVER_WRITE : 	new Param("over_write", "Tag.Model.AddTagsToRecordParam"),


		},

		AddTagsToMultipleRecordsParam : {
			TAG_NAMES : 	new Param("tag_names", "Tag.Model.AddTagsToMultipleRecordsParam"),

			IDS : 	new Param("ids", "Tag.Model.AddTagsToMultipleRecordsParam"),

			OVER_WRITE : 	new Param("over_write", "Tag.Model.AddTagsToMultipleRecordsParam"),


		},

		RemoveTagsFromRecordParam : {
			TAG_NAMES : 	new Param("tag_names", "Tag.Model.RemoveTagsFromRecordParam"),


		},

		GetRecordCountForTagParam : {
			MODULE : 	new Param("module", "Tag.Model.GetRecordCountForTagParam"),


		},

		UpdateTagsParam : {
			MODULE : 	new Param("module", "Tag.Model.UpdateTagsParam"),


		},

		UpdateTagParam : {
			MODULE : 	new Param("module", "Tag.Model.UpdateTagParam"),


		},

		GetTagsParam : {
			MODULE : 	new Param("module", "Tag.Model.GetTagsParam"),

			MY_TAGS : 	new Param("my_tags", "Tag.Model.GetTagsParam"),


		},

		CreateTagsParam : {
			MODULE : 	new Param("module", "Tag.Model.CreateTagsParam"),


		}
	},
	Operations : class {
		constructor(){

		}

		/**
		 * The method to get tags
		 * @param {ParameterMap} paramInstance An instance of ParameterMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getTags(paramInstance=null){
			if((paramInstance != null) && (!(paramInstance instanceof ParameterMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paramInstance EXPECTED TYPE: ParameterMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/settings/tags");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			handlerInstance.setParam(paramInstance);
			return handlerInstance.apiCall("Tag.Model.ResponseHandler", "application/json");

		}

		/**
		 * The method to create tags
		 * @param {BodyWrapper} request An instance of BodyWrapper
		 * @param {ParameterMap} paramInstance An instance of ParameterMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async createTags(request, paramInstance=null){
			if((request != null) && (!(request instanceof ZCRM.Tag.Model.BodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: BodyWrapper", null, null);
			}
			if((paramInstance != null) && (!(paramInstance instanceof ParameterMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paramInstance EXPECTED TYPE: ParameterMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/settings/tags");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_POST);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_CREATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			handlerInstance.setMandatoryChecker(true);
			handlerInstance.setParam(paramInstance);
			return handlerInstance.apiCall("Tag.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to update tags
		 * @param {BodyWrapper} request An instance of BodyWrapper
		 * @param {ParameterMap} paramInstance An instance of ParameterMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async updateTags(request, paramInstance=null){
			if((request != null) && (!(request instanceof ZCRM.Tag.Model.BodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: BodyWrapper", null, null);
			}
			if((paramInstance != null) && (!(paramInstance instanceof ParameterMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paramInstance EXPECTED TYPE: ParameterMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/settings/tags");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_PUT);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_UPDATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			handlerInstance.setMandatoryChecker(true);
			handlerInstance.setParam(paramInstance);
			return handlerInstance.apiCall("Tag.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to update tag
		 * @param {Long} id A BigInt
		 * @param {BodyWrapper} request An instance of BodyWrapper
		 * @param {ParameterMap} paramInstance An instance of ParameterMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async updateTag(id, request, paramInstance=null){
			if((!(Object.prototype.toString.call(id) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
			}
			if((request != null) && (!(request instanceof ZCRM.Tag.Model.BodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: BodyWrapper", null, null);
			}
			if((paramInstance != null) && (!(paramInstance instanceof ParameterMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paramInstance EXPECTED TYPE: ParameterMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/settings/tags/");
			apiPath = apiPath.concat(id.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_PUT);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_UPDATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			handlerInstance.setParam(paramInstance);
			return handlerInstance.apiCall("Tag.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to delete tag
		 * @param {Long} id A BigInt
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async deleteTag(id){
			if((!(Object.prototype.toString.call(id) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/settings/tags/");
			apiPath = apiPath.concat(id.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_DELETE);
			handlerInstance.setCategoryMethod(Constants.REQUEST_METHOD_DELETE);
			return handlerInstance.apiCall("Tag.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to merge tags
		 * @param {Long} id A BigInt
		 * @param {MergeWrapper} request An instance of MergeWrapper
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async mergeTags(id, request){
			if((!(Object.prototype.toString.call(id) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
			}
			if((request != null) && (!(request instanceof ZCRM.Tag.Model.MergeWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: MergeWrapper", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/settings/tags/");
			apiPath = apiPath.concat(id.toString());
			apiPath = apiPath.concat("/actions/merge");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_POST);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_CREATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			handlerInstance.setMandatoryChecker(true);
			return handlerInstance.apiCall("Tag.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to add tags to record
		 * @param {Long} recordId A BigInt
		 * @param {String} moduleAPIName A String
		 * @param {ParameterMap} paramInstance An instance of ParameterMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async addTagsToRecord(recordId, moduleAPIName, paramInstance=null){
			if((!(Object.prototype.toString.call(recordId) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: recordId EXPECTED TYPE: BigInt", null, null);
			}
			if((!(Object.prototype.toString.call(moduleAPIName) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: moduleAPIName EXPECTED TYPE: String", null, null);
			}
			if((paramInstance != null) && (!(paramInstance instanceof ParameterMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paramInstance EXPECTED TYPE: ParameterMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/");
			apiPath = apiPath.concat(moduleAPIName.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(recordId.toString());
			apiPath = apiPath.concat("/actions/add_tags");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_POST);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_CREATE);
			handlerInstance.setMandatoryChecker(true);
			handlerInstance.setParam(paramInstance);
			return handlerInstance.apiCall("Tag.Model.RecordActionHandler", "application/json");

		}

		/**
		 * The method to remove tags from record
		 * @param {Long} recordId A BigInt
		 * @param {String} moduleAPIName A String
		 * @param {ParameterMap} paramInstance An instance of ParameterMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async removeTagsFromRecord(recordId, moduleAPIName, paramInstance=null){
			if((!(Object.prototype.toString.call(recordId) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: recordId EXPECTED TYPE: BigInt", null, null);
			}
			if((!(Object.prototype.toString.call(moduleAPIName) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: moduleAPIName EXPECTED TYPE: String", null, null);
			}
			if((paramInstance != null) && (!(paramInstance instanceof ParameterMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paramInstance EXPECTED TYPE: ParameterMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/");
			apiPath = apiPath.concat(moduleAPIName.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(recordId.toString());
			apiPath = apiPath.concat("/actions/remove_tags");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_POST);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_CREATE);
			handlerInstance.setMandatoryChecker(true);
			handlerInstance.setParam(paramInstance);
			return handlerInstance.apiCall("Tag.Model.RecordActionHandler", "application/json");

		}

		/**
		 * The method to add tags to multiple records
		 * @param {String} moduleAPIName A String
		 * @param {ParameterMap} paramInstance An instance of ParameterMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async addTagsToMultipleRecords(moduleAPIName, paramInstance=null){
			if((!(Object.prototype.toString.call(moduleAPIName) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: moduleAPIName EXPECTED TYPE: String", null, null);
			}
			if((paramInstance != null) && (!(paramInstance instanceof ParameterMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paramInstance EXPECTED TYPE: ParameterMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/");
			apiPath = apiPath.concat(moduleAPIName.toString());
			apiPath = apiPath.concat("/actions/add_tags");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_POST);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_CREATE);
			handlerInstance.setMandatoryChecker(true);
			handlerInstance.setParam(paramInstance);
			return handlerInstance.apiCall("Tag.Model.RecordActionHandler", "application/json");

		}

		/**
		 * The method to remove tags from multiple records
		 * @param {String} moduleAPIName A String
		 * @param {ParameterMap} paramInstance An instance of ParameterMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async removeTagsFromMultipleRecords(moduleAPIName, paramInstance=null){
			if((!(Object.prototype.toString.call(moduleAPIName) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: moduleAPIName EXPECTED TYPE: String", null, null);
			}
			if((paramInstance != null) && (!(paramInstance instanceof ParameterMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paramInstance EXPECTED TYPE: ParameterMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/");
			apiPath = apiPath.concat(moduleAPIName.toString());
			apiPath = apiPath.concat("/actions/remove_tags");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_POST);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_CREATE);
			handlerInstance.setMandatoryChecker(true);
			handlerInstance.setParam(paramInstance);
			return handlerInstance.apiCall("Tag.Model.RecordActionHandler", "application/json");

		}

		/**
		 * The method to get record count for tag
		 * @param {Long} id A BigInt
		 * @param {ParameterMap} paramInstance An instance of ParameterMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getRecordCountForTag(id, paramInstance=null){
			if((!(Object.prototype.toString.call(id) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
			}
			if((paramInstance != null) && (!(paramInstance instanceof ParameterMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paramInstance EXPECTED TYPE: ParameterMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/settings/tags/");
			apiPath = apiPath.concat(id.toString());
			apiPath = apiPath.concat("/actions/records_count");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			handlerInstance.setParam(paramInstance);
			return handlerInstance.apiCall("Tag.Model.CountHandler", "application/json");

		}
	},

}

ZCRM.CustomView = {
	Model : {
		ResponseHandler : class{
			constructor(){

			}


		},

		SharedDetails : class{
			constructor(){

				this.id=null;
				this.name=null;
				this.type=null;
				this.subordinates=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the id
			 * @returns {Long} A BigInt representing the id
			 */
			getId()	{
				return this.id;

			}

			/**
			 * The method to set the value to id
			 * @param {Long} id A BigInt
			 */
			setId(id)	{
				if((id != null) && (!(Object.prototype.toString.call(id) == "[object BigInt]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
				}
				this.id = id;
				this.keyModified.set("id", 1);

			}

			/**
			 * The method to get the name
			 * @returns {String} A String representing the name
			 */
			getName()	{
				return this.name;

			}

			/**
			 * The method to set the value to name
			 * @param {String} name A String
			 */
			setName(name)	{
				if((name != null) && (!(Object.prototype.toString.call(name) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: name EXPECTED TYPE: String", null, null);
				}
				this.name = name;
				this.keyModified.set("name", 1);

			}

			/**
			 * The method to get the type
			 * @returns {String} A String representing the type
			 */
			getType()	{
				return this.type;

			}

			/**
			 * The method to set the value to type
			 * @param {String} type A String
			 */
			setType(type)	{
				if((type != null) && (!(Object.prototype.toString.call(type) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: type EXPECTED TYPE: String", null, null);
				}
				this.type = type;
				this.keyModified.set("type", 1);

			}

			/**
			 * The method to get the subordinates
			 * @returns {Boolean} A Boolean representing the subordinates
			 */
			getSubordinates()	{
				return this.subordinates;

			}

			/**
			 * The method to set the value to subordinates
			 * @param {Boolean} subordinates A Boolean
			 */
			setSubordinates(subordinates)	{
				if((subordinates != null) && (!(Object.prototype.toString.call(subordinates) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: subordinates EXPECTED TYPE: Boolean", null, null);
				}
				this.subordinates = subordinates;
				this.keyModified.set("subordinates", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		Translation : class{
			constructor(){

				this.publicViews=null;
				this.otherUsersViews=null;
				this.sharedWithMe=null;
				this.createdByMe=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the publicViews
			 * @returns {String} A String representing the publicViews
			 */
			getPublicViews()	{
				return this.publicViews;

			}

			/**
			 * The method to set the value to publicViews
			 * @param {String} publicViews A String
			 */
			setPublicViews(publicViews)	{
				if((publicViews != null) && (!(Object.prototype.toString.call(publicViews) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: publicViews EXPECTED TYPE: String", null, null);
				}
				this.publicViews = publicViews;
				this.keyModified.set("public_views", 1);

			}

			/**
			 * The method to get the otherUsersViews
			 * @returns {String} A String representing the otherUsersViews
			 */
			getOtherUsersViews()	{
				return this.otherUsersViews;

			}

			/**
			 * The method to set the value to otherUsersViews
			 * @param {String} otherUsersViews A String
			 */
			setOtherUsersViews(otherUsersViews)	{
				if((otherUsersViews != null) && (!(Object.prototype.toString.call(otherUsersViews) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: otherUsersViews EXPECTED TYPE: String", null, null);
				}
				this.otherUsersViews = otherUsersViews;
				this.keyModified.set("other_users_views", 1);

			}

			/**
			 * The method to get the sharedWithMe
			 * @returns {String} A String representing the sharedWithMe
			 */
			getSharedWithMe()	{
				return this.sharedWithMe;

			}

			/**
			 * The method to set the value to sharedWithMe
			 * @param {String} sharedWithMe A String
			 */
			setSharedWithMe(sharedWithMe)	{
				if((sharedWithMe != null) && (!(Object.prototype.toString.call(sharedWithMe) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: sharedWithMe EXPECTED TYPE: String", null, null);
				}
				this.sharedWithMe = sharedWithMe;
				this.keyModified.set("shared_with_me", 1);

			}

			/**
			 * The method to get the createdByMe
			 * @returns {String} A String representing the createdByMe
			 */
			getCreatedByMe()	{
				return this.createdByMe;

			}

			/**
			 * The method to set the value to createdByMe
			 * @param {String} createdByMe A String
			 */
			setCreatedByMe(createdByMe)	{
				if((createdByMe != null) && (!(Object.prototype.toString.call(createdByMe) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: createdByMe EXPECTED TYPE: String", null, null);
				}
				this.createdByMe = createdByMe;
				this.keyModified.set("created_by_me", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		ResponseWrapper : class{
			constructor(){

				this.customViews=null;
				this.info=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the customViews
			 * @returns {List} An Array representing the customViews
			 */
			getCustomViews()	{
				return this.customViews;

			}

			/**
			 * The method to set the value to customViews
			 * @param {List} customViews An Array
			 */
			setCustomViews(customViews)	{
				if((customViews != null) && (!(Object.prototype.toString.call(customViews) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: customViews EXPECTED TYPE: Array", null, null);
				}
				this.customViews = customViews;
				this.keyModified.set("custom_views", 1);

			}

			/**
			 * The method to get the info
			 * @returns {Info} An instance of Info
			 */
			getInfo()	{
				return this.info;

			}

			/**
			 * The method to set the value to info
			 * @param {Info} info An instance of Info
			 */
			setInfo(info)	{
				if((info != null) && (!(info instanceof ZCRM.CustomView.Model.Info))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: info EXPECTED TYPE: Info", null, null);
				}
				this.info = info;
				this.keyModified.set("info", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		Info : class{
			constructor(){

				this.perPage=null;
				this.default1=null;
				this.count=null;
				this.page=null;
				this.moreRecords=null;
				this.translation=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the perPage
			 * @returns {Integer} An Integer representing the perPage
			 */
			getPerPage()	{
				return this.perPage;

			}

			/**
			 * The method to set the value to perPage
			 * @param {Integer} perPage An Integer
			 */
			setPerPage(perPage)	{
				if((perPage != null) && (!(Object.prototype.toString.call(perPage) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: perPage EXPECTED TYPE: Integer", null, null);
				}
				this.perPage = perPage;
				this.keyModified.set("per_page", 1);

			}

			/**
			 * The method to get the default
			 * @returns {String} A String representing the default1
			 */
			getDefault()	{
				return this.default1;

			}

			/**
			 * The method to set the value to default
			 * @param {String} default1 A String
			 */
			setDefault(default1)	{
				if((default1 != null) && (!(Object.prototype.toString.call(default1) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: default1 EXPECTED TYPE: String", null, null);
				}
				this.default1 = default1;
				this.keyModified.set("default", 1);

			}

			/**
			 * The method to get the count
			 * @returns {Integer} An Integer representing the count
			 */
			getCount()	{
				return this.count;

			}

			/**
			 * The method to set the value to count
			 * @param {Integer} count An Integer
			 */
			setCount(count)	{
				if((count != null) && (!(Object.prototype.toString.call(count) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: count EXPECTED TYPE: Integer", null, null);
				}
				this.count = count;
				this.keyModified.set("count", 1);

			}

			/**
			 * The method to get the page
			 * @returns {Integer} An Integer representing the page
			 */
			getPage()	{
				return this.page;

			}

			/**
			 * The method to set the value to page
			 * @param {Integer} page An Integer
			 */
			setPage(page)	{
				if((page != null) && (!(Object.prototype.toString.call(page) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: page EXPECTED TYPE: Integer", null, null);
				}
				this.page = page;
				this.keyModified.set("page", 1);

			}

			/**
			 * The method to get the moreRecords
			 * @returns {Boolean} A Boolean representing the moreRecords
			 */
			getMoreRecords()	{
				return this.moreRecords;

			}

			/**
			 * The method to set the value to moreRecords
			 * @param {Boolean} moreRecords A Boolean
			 */
			setMoreRecords(moreRecords)	{
				if((moreRecords != null) && (!(Object.prototype.toString.call(moreRecords) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: moreRecords EXPECTED TYPE: Boolean", null, null);
				}
				this.moreRecords = moreRecords;
				this.keyModified.set("more_records", 1);

			}

			/**
			 * The method to get the translation
			 * @returns {Translation} An instance of Translation
			 */
			getTranslation()	{
				return this.translation;

			}

			/**
			 * The method to set the value to translation
			 * @param {Translation} translation An instance of Translation
			 */
			setTranslation(translation)	{
				if((translation != null) && (!(translation instanceof ZCRM.CustomView.Model.Translation))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: translation EXPECTED TYPE: Translation", null, null);
				}
				this.translation = translation;
				this.keyModified.set("translation", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		CustomView : class{
			constructor(){

				this.id=null;
				this.name=null;
				this.systemName=null;
				this.displayValue=null;
				this.sharedType=null;
				this.category=null;
				this.sortBy=null;
				this.sortOrder=null;
				this.favorite=null;
				this.offline=null;
				this.default1=null;
				this.systemDefined=null;
				this.criteria=null;
				this.sharedDetails=null;
				this.fields=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the id
			 * @returns {Long} A BigInt representing the id
			 */
			getId()	{
				return this.id;

			}

			/**
			 * The method to set the value to id
			 * @param {Long} id A BigInt
			 */
			setId(id)	{
				if((id != null) && (!(Object.prototype.toString.call(id) == "[object BigInt]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
				}
				this.id = id;
				this.keyModified.set("id", 1);

			}

			/**
			 * The method to get the name
			 * @returns {String} A String representing the name
			 */
			getName()	{
				return this.name;

			}

			/**
			 * The method to set the value to name
			 * @param {String} name A String
			 */
			setName(name)	{
				if((name != null) && (!(Object.prototype.toString.call(name) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: name EXPECTED TYPE: String", null, null);
				}
				this.name = name;
				this.keyModified.set("name", 1);

			}

			/**
			 * The method to get the systemName
			 * @returns {String} A String representing the systemName
			 */
			getSystemName()	{
				return this.systemName;

			}

			/**
			 * The method to set the value to systemName
			 * @param {String} systemName A String
			 */
			setSystemName(systemName)	{
				if((systemName != null) && (!(Object.prototype.toString.call(systemName) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: systemName EXPECTED TYPE: String", null, null);
				}
				this.systemName = systemName;
				this.keyModified.set("system_name", 1);

			}

			/**
			 * The method to get the displayValue
			 * @returns {String} A String representing the displayValue
			 */
			getDisplayValue()	{
				return this.displayValue;

			}

			/**
			 * The method to set the value to displayValue
			 * @param {String} displayValue A String
			 */
			setDisplayValue(displayValue)	{
				if((displayValue != null) && (!(Object.prototype.toString.call(displayValue) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: displayValue EXPECTED TYPE: String", null, null);
				}
				this.displayValue = displayValue;
				this.keyModified.set("display_value", 1);

			}

			/**
			 * The method to get the sharedType
			 * @returns {String} A String representing the sharedType
			 */
			getSharedType()	{
				return this.sharedType;

			}

			/**
			 * The method to set the value to sharedType
			 * @param {String} sharedType A String
			 */
			setSharedType(sharedType)	{
				if((sharedType != null) && (!(Object.prototype.toString.call(sharedType) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: sharedType EXPECTED TYPE: String", null, null);
				}
				this.sharedType = sharedType;
				this.keyModified.set("shared_type", 1);

			}

			/**
			 * The method to get the category
			 * @returns {String} A String representing the category
			 */
			getCategory()	{
				return this.category;

			}

			/**
			 * The method to set the value to category
			 * @param {String} category A String
			 */
			setCategory(category)	{
				if((category != null) && (!(Object.prototype.toString.call(category) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: category EXPECTED TYPE: String", null, null);
				}
				this.category = category;
				this.keyModified.set("category", 1);

			}

			/**
			 * The method to get the sortBy
			 * @returns {String} A String representing the sortBy
			 */
			getSortBy()	{
				return this.sortBy;

			}

			/**
			 * The method to set the value to sortBy
			 * @param {String} sortBy A String
			 */
			setSortBy(sortBy)	{
				if((sortBy != null) && (!(Object.prototype.toString.call(sortBy) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: sortBy EXPECTED TYPE: String", null, null);
				}
				this.sortBy = sortBy;
				this.keyModified.set("sort_by", 1);

			}

			/**
			 * The method to get the sortOrder
			 * @returns {String} A String representing the sortOrder
			 */
			getSortOrder()	{
				return this.sortOrder;

			}

			/**
			 * The method to set the value to sortOrder
			 * @param {String} sortOrder A String
			 */
			setSortOrder(sortOrder)	{
				if((sortOrder != null) && (!(Object.prototype.toString.call(sortOrder) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: sortOrder EXPECTED TYPE: String", null, null);
				}
				this.sortOrder = sortOrder;
				this.keyModified.set("sort_order", 1);

			}

			/**
			 * The method to get the favorite
			 * @returns {Integer} An Integer representing the favorite
			 */
			getFavorite()	{
				return this.favorite;

			}

			/**
			 * The method to set the value to favorite
			 * @param {Integer} favorite An Integer
			 */
			setFavorite(favorite)	{
				if((favorite != null) && (!(Object.prototype.toString.call(favorite) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: favorite EXPECTED TYPE: Integer", null, null);
				}
				this.favorite = favorite;
				this.keyModified.set("favorite", 1);

			}

			/**
			 * The method to get the offline
			 * @returns {Boolean} A Boolean representing the offline
			 */
			getOffline()	{
				return this.offline;

			}

			/**
			 * The method to set the value to offline
			 * @param {Boolean} offline A Boolean
			 */
			setOffline(offline)	{
				if((offline != null) && (!(Object.prototype.toString.call(offline) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: offline EXPECTED TYPE: Boolean", null, null);
				}
				this.offline = offline;
				this.keyModified.set("offline", 1);

			}

			/**
			 * The method to get the default
			 * @returns {Boolean} A Boolean representing the default1
			 */
			getDefault()	{
				return this.default1;

			}

			/**
			 * The method to set the value to default
			 * @param {Boolean} default1 A Boolean
			 */
			setDefault(default1)	{
				if((default1 != null) && (!(Object.prototype.toString.call(default1) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: default1 EXPECTED TYPE: Boolean", null, null);
				}
				this.default1 = default1;
				this.keyModified.set("default", 1);

			}

			/**
			 * The method to get the systemDefined
			 * @returns {Boolean} A Boolean representing the systemDefined
			 */
			getSystemDefined()	{
				return this.systemDefined;

			}

			/**
			 * The method to set the value to systemDefined
			 * @param {Boolean} systemDefined A Boolean
			 */
			setSystemDefined(systemDefined)	{
				if((systemDefined != null) && (!(Object.prototype.toString.call(systemDefined) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: systemDefined EXPECTED TYPE: Boolean", null, null);
				}
				this.systemDefined = systemDefined;
				this.keyModified.set("system_defined", 1);

			}

			/**
			 * The method to get the criteria
			 * @returns {Criteria} An instance of Criteria
			 */
			getCriteria()	{
				return this.criteria;

			}

			/**
			 * The method to set the value to criteria
			 * @param {Criteria} criteria An instance of Criteria
			 */
			setCriteria(criteria)	{
				if((criteria != null) && (!(criteria instanceof ZCRM.CustomView.Model.Criteria))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: criteria EXPECTED TYPE: Criteria", null, null);
				}
				this.criteria = criteria;
				this.keyModified.set("criteria", 1);

			}

			/**
			 * The method to get the sharedDetails
			 * @returns {List} An Array representing the sharedDetails
			 */
			getSharedDetails()	{
				return this.sharedDetails;

			}

			/**
			 * The method to set the value to sharedDetails
			 * @param {List} sharedDetails An Array
			 */
			setSharedDetails(sharedDetails)	{
				if((sharedDetails != null) && (!(Object.prototype.toString.call(sharedDetails) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: sharedDetails EXPECTED TYPE: Array", null, null);
				}
				this.sharedDetails = sharedDetails;
				this.keyModified.set("shared_details", 1);

			}

			/**
			 * The method to get the fields
			 * @returns {List} An Array representing the fields
			 */
			getFields()	{
				return this.fields;

			}

			/**
			 * The method to set the value to fields
			 * @param {List} fields An Array
			 */
			setFields(fields)	{
				if((fields != null) && (!(Object.prototype.toString.call(fields) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: fields EXPECTED TYPE: Array", null, null);
				}
				this.fields = fields;
				this.keyModified.set("fields", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		Criteria : class{
			constructor(){

				this.comparator=null;
				this.field=null;
				this.value=null;
				this.groupOperator=null;
				this.group=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the comparator
			 * @returns {Choice} An instance of Choice
			 */
			getComparator()	{
				return this.comparator;

			}

			/**
			 * The method to set the value to comparator
			 * @param {Choice} comparator An instance of Choice
			 */
			setComparator(comparator)	{
				if((comparator != null) && (!(comparator instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: comparator EXPECTED TYPE: Choice", null, null);
				}
				this.comparator = comparator;
				this.keyModified.set("comparator", 1);

			}

			/**
			 * The method to get the field
			 * @returns {String} A String representing the field
			 */
			getField()	{
				return this.field;

			}

			/**
			 * The method to set the value to field
			 * @param {String} field A String
			 */
			setField(field)	{
				if((field != null) && (!(Object.prototype.toString.call(field) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: field EXPECTED TYPE: String", null, null);
				}
				this.field = field;
				this.keyModified.set("field", 1);

			}

			/**
			 * The method to get the value
			 * @returns {Object} An Object representing the value
			 */
			getValue()	{
				return this.value;

			}

			/**
			 * The method to set the value to value
			 * @param {Object} value An Object
			 */
			setValue(value)	{
				this.value = value;
				this.keyModified.set("value", 1);

			}

			/**
			 * The method to get the groupOperator
			 * @returns {Choice} An instance of Choice
			 */
			getGroupOperator()	{
				return this.groupOperator;

			}

			/**
			 * The method to set the value to groupOperator
			 * @param {Choice} groupOperator An instance of Choice
			 */
			setGroupOperator(groupOperator)	{
				if((groupOperator != null) && (!(groupOperator instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: groupOperator EXPECTED TYPE: Choice", null, null);
				}
				this.groupOperator = groupOperator;
				this.keyModified.set("group_operator", 1);

			}

			/**
			 * The method to get the group
			 * @returns {List} An Array representing the group
			 */
			getGroup()	{
				return this.group;

			}

			/**
			 * The method to set the value to group
			 * @param {List} group An Array
			 */
			setGroup(group)	{
				if((group != null) && (!(Object.prototype.toString.call(group) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: group EXPECTED TYPE: Array", null, null);
				}
				this.group = group;
				this.keyModified.set("group", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		Range : class{
			constructor(){

				this.from=null;
				this.to=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the from
			 * @returns {Integer} An Integer representing the from
			 */
			getFrom()	{
				return this.from;

			}

			/**
			 * The method to set the value to from
			 * @param {Integer} from An Integer
			 */
			setFrom(from)	{
				if((from != null) && (!(Object.prototype.toString.call(from) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: from EXPECTED TYPE: Integer", null, null);
				}
				this.from = from;
				this.keyModified.set("from", 1);

			}

			/**
			 * The method to get the to
			 * @returns {Integer} An Integer representing the to
			 */
			getTo()	{
				return this.to;

			}

			/**
			 * The method to set the value to to
			 * @param {Integer} to An Integer
			 */
			setTo(to)	{
				if((to != null) && (!(Object.prototype.toString.call(to) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: to EXPECTED TYPE: Integer", null, null);
				}
				this.to = to;
				this.keyModified.set("to", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		APIException : class{
			constructor(){

				this.status=null;
				this.code=null;
				this.message=null;
				this.details=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		GetCustomViewsParam : {
			PAGE : 	new Param("page", "CustomView.Model.GetCustomViewsParam"),

			PER_PAGE : 	new Param("per_page", "CustomView.Model.GetCustomViewsParam"),


		},

		GetCustomViewParam : {

		}
	},
	Operations : class {


		/**
		 * Creates an instance of CustomViewsOperations with the given parameters
		 * @param {String} module A String
		 */
		constructor(module=null){
			if((module != null) && (!(Object.prototype.toString.call(module) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: module EXPECTED TYPE: String", null, null);
			}
						this.module = module;

		}

		/**
		 * The method to get custom views
		 * @param {ParameterMap} paramInstance An instance of ParameterMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getCustomViews(paramInstance=null){
			if((paramInstance != null) && (!(paramInstance instanceof ParameterMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paramInstance EXPECTED TYPE: ParameterMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/settings/custom_views");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			await handlerInstance.addParam(new Param("module", "CustomView.Model.GetCustomViewsParam"), this.module);
			handlerInstance.setParam(paramInstance);
			return handlerInstance.apiCall("CustomView.Model.ResponseHandler", "application/json");

		}

		/**
		 * The method to get custom view
		 * @param {Long} id A BigInt
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getCustomView(id){
			if((!(Object.prototype.toString.call(id) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/settings/custom_views/");
			apiPath = apiPath.concat(id.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			await handlerInstance.addParam(new Param("module", "CustomView.Model.GetCustomViewParam"), this.module);
			return handlerInstance.apiCall("CustomView.Model.ResponseHandler", "application/json");

		}

	},

}

ZCRM.BulkRead = {
	Model : {
		ActionHandler : class{
			constructor(){

			}


		},

		ActionResponse : class{
			constructor(){

			}


		},

		ResponseHandler : class{
			constructor(){

			}


		},

		Criteria : class{
			constructor(){

				this.apiName=null;
				this.value=null;
				this.groupOperator=null;
				this.group=null;
				this.comparator=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the apiName
			 * @returns {String} A String representing the apiName
			 */
			getAPIName()	{
				return this.apiName;

			}

			/**
			 * The method to set the value to apiName
			 * @param {String} apiName A String
			 */
			setAPIName(apiName)	{
				if((apiName != null) && (!(Object.prototype.toString.call(apiName) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: apiName EXPECTED TYPE: String", null, null);
				}
				this.apiName = apiName;
				this.keyModified.set("api_name", 1);

			}

			/**
			 * The method to get the value
			 * @returns {Object} An Object representing the value
			 */
			getValue()	{
				return this.value;

			}

			/**
			 * The method to set the value to value
			 * @param {Object} value An Object
			 */
			setValue(value)	{
				this.value = value;
				this.keyModified.set("value", 1);

			}

			/**
			 * The method to get the groupOperator
			 * @returns {Choice} An instance of Choice
			 */
			getGroupOperator()	{
				return this.groupOperator;

			}

			/**
			 * The method to set the value to groupOperator
			 * @param {Choice} groupOperator An instance of Choice
			 */
			setGroupOperator(groupOperator)	{
				if((groupOperator != null) && (!(groupOperator instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: groupOperator EXPECTED TYPE: Choice", null, null);
				}
				this.groupOperator = groupOperator;
				this.keyModified.set("group_operator", 1);

			}

			/**
			 * The method to get the group
			 * @returns {List} An Array representing the group
			 */
			getGroup()	{
				return this.group;

			}

			/**
			 * The method to set the value to group
			 * @param {List} group An Array
			 */
			setGroup(group)	{
				if((group != null) && (!(Object.prototype.toString.call(group) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: group EXPECTED TYPE: Array", null, null);
				}
				this.group = group;
				this.keyModified.set("group", 1);

			}

			/**
			 * The method to get the comparator
			 * @returns {Choice} An instance of Choice
			 */
			getComparator()	{
				return this.comparator;

			}

			/**
			 * The method to set the value to comparator
			 * @param {Choice} comparator An instance of Choice
			 */
			setComparator(comparator)	{
				if((comparator != null) && (!(comparator instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: comparator EXPECTED TYPE: Choice", null, null);
				}
				this.comparator = comparator;
				this.keyModified.set("comparator", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		Query : class{
			constructor(){

				this.module=null;
				this.cvid=null;
				this.fields=null;
				this.page=null;
				this.criteria=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the module
			 * @returns {String} A String representing the module
			 */
			getModule()	{
				return this.module;

			}

			/**
			 * The method to set the value to module
			 * @param {String} module A String
			 */
			setModule(module)	{
				if((module != null) && (!(Object.prototype.toString.call(module) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: module EXPECTED TYPE: String", null, null);
				}
				this.module = module;
				this.keyModified.set("module", 1);

			}

			/**
			 * The method to get the cvid
			 * @returns {String} A String representing the cvid
			 */
			getCvid()	{
				return this.cvid;

			}

			/**
			 * The method to set the value to cvid
			 * @param {String} cvid A String
			 */
			setCvid(cvid)	{
				if((cvid != null) && (!(Object.prototype.toString.call(cvid) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: cvid EXPECTED TYPE: String", null, null);
				}
				this.cvid = cvid;
				this.keyModified.set("cvid", 1);

			}

			/**
			 * The method to get the fields
			 * @returns {List} An Array representing the fields
			 */
			getFields()	{
				return this.fields;

			}

			/**
			 * The method to set the value to fields
			 * @param {List} fields An Array
			 */
			setFields(fields)	{
				if((fields != null) && (!(Object.prototype.toString.call(fields) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: fields EXPECTED TYPE: Array", null, null);
				}
				this.fields = fields;
				this.keyModified.set("fields", 1);

			}

			/**
			 * The method to get the page
			 * @returns {Integer} An Integer representing the page
			 */
			getPage()	{
				return this.page;

			}

			/**
			 * The method to set the value to page
			 * @param {Integer} page An Integer
			 */
			setPage(page)	{
				if((page != null) && (!(Object.prototype.toString.call(page) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: page EXPECTED TYPE: Integer", null, null);
				}
				this.page = page;
				this.keyModified.set("page", 1);

			}

			/**
			 * The method to get the criteria
			 * @returns {Criteria} An instance of Criteria
			 */
			getCriteria()	{
				return this.criteria;

			}

			/**
			 * The method to set the value to criteria
			 * @param {Criteria} criteria An instance of Criteria
			 */
			setCriteria(criteria)	{
				if((criteria != null) && (!(criteria instanceof ZCRM.BulkRead.Model.Criteria))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: criteria EXPECTED TYPE: Criteria", null, null);
				}
				this.criteria = criteria;
				this.keyModified.set("criteria", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		RequestWrapper : class{
			constructor(){

				this.callback=null;
				this.query=null;
				this.fileType=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the callback
			 * @returns {CallBack} An instance of CallBack
			 */
			getCallback()	{
				return this.callback;

			}

			/**
			 * The method to set the value to callback
			 * @param {CallBack} callback An instance of CallBack
			 */
			setCallback(callback)	{
				if((callback != null) && (!(callback instanceof ZCRM.BulkRead.Model.CallBack))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: callback EXPECTED TYPE: CallBack", null, null);
				}
				this.callback = callback;
				this.keyModified.set("callback", 1);

			}

			/**
			 * The method to get the query
			 * @returns {Query} An instance of Query
			 */
			getQuery()	{
				return this.query;

			}

			/**
			 * The method to set the value to query
			 * @param {Query} query An instance of Query
			 */
			setQuery(query)	{
				if((query != null) && (!(query instanceof ZCRM.BulkRead.Model.Query))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: query EXPECTED TYPE: Query", null, null);
				}
				this.query = query;
				this.keyModified.set("query", 1);

			}

			/**
			 * The method to get the fileType
			 * @returns {Choice} An instance of Choice
			 */
			getFileType()	{
				return this.fileType;

			}

			/**
			 * The method to set the value to fileType
			 * @param {Choice} fileType An instance of Choice
			 */
			setFileType(fileType)	{
				if((fileType != null) && (!(fileType instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: fileType EXPECTED TYPE: Choice", null, null);
				}
				this.fileType = fileType;
				this.keyModified.set("file_type", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		SuccessResponse : class{
			constructor(){

				this.status=null;
				this.code=null;
				this.message=null;
				this.details=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		JobDetail : class{
			constructor(){

				this.id=null;
				this.operation=null;
				this.state=null;
				this.query=null;
				this.createdBy=null;
				this.createdTime=null;
				this.result=null;
				this.fileType=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the id
			 * @returns {Long} A BigInt representing the id
			 */
			getId()	{
				return this.id;

			}

			/**
			 * The method to set the value to id
			 * @param {Long} id A BigInt
			 */
			setId(id)	{
				if((id != null) && (!(Object.prototype.toString.call(id) == "[object BigInt]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
				}
				this.id = id;
				this.keyModified.set("id", 1);

			}

			/**
			 * The method to get the operation
			 * @returns {String} A String representing the operation
			 */
			getOperation()	{
				return this.operation;

			}

			/**
			 * The method to set the value to operation
			 * @param {String} operation A String
			 */
			setOperation(operation)	{
				if((operation != null) && (!(Object.prototype.toString.call(operation) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: operation EXPECTED TYPE: String", null, null);
				}
				this.operation = operation;
				this.keyModified.set("operation", 1);

			}

			/**
			 * The method to get the state
			 * @returns {Choice} An instance of Choice
			 */
			getState()	{
				return this.state;

			}

			/**
			 * The method to set the value to state
			 * @param {Choice} state An instance of Choice
			 */
			setState(state)	{
				if((state != null) && (!(state instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: state EXPECTED TYPE: Choice", null, null);
				}
				this.state = state;
				this.keyModified.set("state", 1);

			}

			/**
			 * The method to get the query
			 * @returns {Query} An instance of Query
			 */
			getQuery()	{
				return this.query;

			}

			/**
			 * The method to set the value to query
			 * @param {Query} query An instance of Query
			 */
			setQuery(query)	{
				if((query != null) && (!(query instanceof ZCRM.BulkRead.Model.Query))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: query EXPECTED TYPE: Query", null, null);
				}
				this.query = query;
				this.keyModified.set("query", 1);

			}

			/**
			 * The method to get the createdBy
			 * @returns {User} An instance of User
			 */
			getCreatedBy()	{
				return this.createdBy;

			}

			/**
			 * The method to set the value to createdBy
			 * @param {User} createdBy An instance of User
			 */
			setCreatedBy(createdBy)	{
				if((createdBy != null) && (!(createdBy instanceof ZCRM.User.Model.User))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: createdBy EXPECTED TYPE: User", null, null);
				}
				this.createdBy = createdBy;
				this.keyModified.set("created_by", 1);

			}

			/**
			 * The method to get the createdTime
			 * @returns {OffsetDateTime} An instance of OffsetDateTime
			 */
			getCreatedTime()	{
				return this.createdTime;

			}

			/**
			 * The method to set the value to createdTime
			 * @param {OffsetDateTime} createdTime An instance of OffsetDateTime
			 */
			setCreatedTime(createdTime)	{
				if((createdTime != null) && (!(createdTime instanceof Date))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: createdTime EXPECTED TYPE: Date", null, null);
				}
				this.createdTime = createdTime;
				this.keyModified.set("created_time", 1);

			}

			/**
			 * The method to get the result
			 * @returns {Result} An instance of Result
			 */
			getResult()	{
				return this.result;

			}

			/**
			 * The method to set the value to result
			 * @param {Result} result An instance of Result
			 */
			setResult(result)	{
				if((result != null) && (!(result instanceof ZCRM.BulkRead.Model.Result))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: result EXPECTED TYPE: Result", null, null);
				}
				this.result = result;
				this.keyModified.set("result", 1);

			}

			/**
			 * The method to get the fileType
			 * @returns {String} A String representing the fileType
			 */
			getFileType()	{
				return this.fileType;

			}

			/**
			 * The method to set the value to fileType
			 * @param {String} fileType A String
			 */
			setFileType(fileType)	{
				if((fileType != null) && (!(Object.prototype.toString.call(fileType) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: fileType EXPECTED TYPE: String", null, null);
				}
				this.fileType = fileType;
				this.keyModified.set("file_type", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		Result : class{
			constructor(){

				this.page=null;
				this.count=null;
				this.downloadUrl=null;
				this.perPage=null;
				this.moreRecords=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the page
			 * @returns {Integer} An Integer representing the page
			 */
			getPage()	{
				return this.page;

			}

			/**
			 * The method to set the value to page
			 * @param {Integer} page An Integer
			 */
			setPage(page)	{
				if((page != null) && (!(Object.prototype.toString.call(page) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: page EXPECTED TYPE: Integer", null, null);
				}
				this.page = page;
				this.keyModified.set("page", 1);

			}

			/**
			 * The method to get the count
			 * @returns {Integer} An Integer representing the count
			 */
			getCount()	{
				return this.count;

			}

			/**
			 * The method to set the value to count
			 * @param {Integer} count An Integer
			 */
			setCount(count)	{
				if((count != null) && (!(Object.prototype.toString.call(count) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: count EXPECTED TYPE: Integer", null, null);
				}
				this.count = count;
				this.keyModified.set("count", 1);

			}

			/**
			 * The method to get the downloadUrl
			 * @returns {String} A String representing the downloadUrl
			 */
			getDownloadUrl()	{
				return this.downloadUrl;

			}

			/**
			 * The method to set the value to downloadUrl
			 * @param {String} downloadUrl A String
			 */
			setDownloadUrl(downloadUrl)	{
				if((downloadUrl != null) && (!(Object.prototype.toString.call(downloadUrl) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: downloadUrl EXPECTED TYPE: String", null, null);
				}
				this.downloadUrl = downloadUrl;
				this.keyModified.set("download_url", 1);

			}

			/**
			 * The method to get the perPage
			 * @returns {Integer} An Integer representing the perPage
			 */
			getPerPage()	{
				return this.perPage;

			}

			/**
			 * The method to set the value to perPage
			 * @param {Integer} perPage An Integer
			 */
			setPerPage(perPage)	{
				if((perPage != null) && (!(Object.prototype.toString.call(perPage) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: perPage EXPECTED TYPE: Integer", null, null);
				}
				this.perPage = perPage;
				this.keyModified.set("per_page", 1);

			}

			/**
			 * The method to get the moreRecords
			 * @returns {Boolean} A Boolean representing the moreRecords
			 */
			getMoreRecords()	{
				return this.moreRecords;

			}

			/**
			 * The method to set the value to moreRecords
			 * @param {Boolean} moreRecords A Boolean
			 */
			setMoreRecords(moreRecords)	{
				if((moreRecords != null) && (!(Object.prototype.toString.call(moreRecords) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: moreRecords EXPECTED TYPE: Boolean", null, null);
				}
				this.moreRecords = moreRecords;
				this.keyModified.set("more_records", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		CallBack : class{
			constructor(){

				this.url=null;
				this.method=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the url
			 * @returns {String} A String representing the url
			 */
			getUrl()	{
				return this.url;

			}

			/**
			 * The method to set the value to url
			 * @param {String} url A String
			 */
			setUrl(url)	{
				if((url != null) && (!(Object.prototype.toString.call(url) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: url EXPECTED TYPE: String", null, null);
				}
				this.url = url;
				this.keyModified.set("url", 1);

			}

			/**
			 * The method to get the method
			 * @returns {Choice} An instance of Choice
			 */
			getMethod()	{
				return this.method;

			}

			/**
			 * The method to set the value to method
			 * @param {Choice} method An instance of Choice
			 */
			setMethod(method)	{
				if((method != null) && (!(method instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: method EXPECTED TYPE: Choice", null, null);
				}
				this.method = method;
				this.keyModified.set("method", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		ResponseWrapper : class{
			constructor(){

				this.data=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the data
			 * @returns {List} An Array representing the data
			 */
			getData()	{
				return this.data;

			}

			/**
			 * The method to set the value to data
			 * @param {List} data An Array
			 */
			setData(data)	{
				if((data != null) && (!(Object.prototype.toString.call(data) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: data EXPECTED TYPE: Array", null, null);
				}
				this.data = data;
				this.keyModified.set("data", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		APIException : class{
			constructor(){

				this.status=null;
				this.code=null;
				this.message=null;
				this.details=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		ActionWrapper : class{
			constructor(){

				this.data=null;
				this.info=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the data
			 * @returns {List} An Array representing the data
			 */
			getData()	{
				return this.data;

			}

			/**
			 * The method to set the value to data
			 * @param {List} data An Array
			 */
			setData(data)	{
				if((data != null) && (!(Object.prototype.toString.call(data) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: data EXPECTED TYPE: Array", null, null);
				}
				this.data = data;
				this.keyModified.set("data", 1);

			}

			/**
			 * The method to get the info
			 * @returns {Map} A Map representing the info
			 */
			getInfo()	{
				return this.info;

			}

			/**
			 * The method to set the value to info
			 * @param {Map} info A Map
			 */
			setInfo(info)	{
				if((info != null) && (!(Object.prototype.toString.call(info) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: info EXPECTED TYPE: Map", null, null);
				}
				this.info = info;
				this.keyModified.set("info", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		FileBodyWrapper : class{
			constructor(){

				this.file=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the file
			 * @returns {StreamWrapper} An instance of StreamWrapper
			 */
			getFile()	{
				return this.file;

			}

			/**
			 * The method to set the value to file
			 * @param {StreamWrapper} file An instance of StreamWrapper
			 */
			setFile(file)	{
				if((file != null) && (!(file instanceof StreamWrapper.Model.StreamWrapper))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: file EXPECTED TYPE: StreamWrapper", null, null);
				}
				this.file = file;
				this.keyModified.set("file", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		}
	},
	Operations : class {
		constructor(){

		}

		/**
		 * The method to get bulk read job details
		 * @param {Long} jobId A BigInt
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getBulkReadJobDetails(jobId){
			if((!(Object.prototype.toString.call(jobId) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: jobId EXPECTED TYPE: BigInt", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/bulk/v2/read/");
			apiPath = apiPath.concat(jobId.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			return handlerInstance.apiCall("BulkRead.Model.ResponseHandler", "application/json");

		}

		/**
		 * The method to download result
		 * @param {Long} jobId A BigInt
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async downloadResult(jobId){
			if((!(Object.prototype.toString.call(jobId) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: jobId EXPECTED TYPE: BigInt", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/bulk/v2/read/");
			apiPath = apiPath.concat(jobId.toString());
			apiPath = apiPath.concat("/result");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			return handlerInstance.apiCall("BulkRead.Model.ResponseHandler", "application/x-download");

		}

		/**
		 * The method to create bulk read job
		 * @param {RequestWrapper} request An instance of RequestWrapper
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async createBulkReadJob(request){
			if((request != null) && (!(request instanceof ZCRM.BulkRead.Model.RequestWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: RequestWrapper", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/bulk/v2/read");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_POST);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_CREATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			handlerInstance.setMandatoryChecker(true);
			return handlerInstance.apiCall("BulkRead.Model.ActionHandler", "application/json");

		}
	},

}

/**
 * The Builder class to build SDKConfig
 */
class SDKConfigBuilder {
    constructor() {
        this._autoRefreshFields = false;

        this._pickListValidation = true;

        this._cacheStore = false;

        this._timeout = 0;
    }

    /**
     * This is a setter method to set autoRefreshFields.
     * @param {Boolean} autoRefreshFields
     */
    autoRefreshFields(autoRefreshFields) {
        this._autoRefreshFields = autoRefreshFields;

        return this;
    }

    /**
     * This is a setter method to set pickListValidation.
     * @param {Boolean} pickListValidation
     */
    pickListValidation(pickListValidation) {
        this._pickListValidation = pickListValidation;

        return this;
    }

    /**
     * This is a setter method to set cacheStore.
     * @param {Boolean} cacheStore
     */
    cacheStore(cacheStore) {
        this._cacheStore = cacheStore;

        return this;
    }

    /**
     * This is a setter method to set API timeout.
     * @param {Integer} timeout
     */
    timeout(timeout) {
        this._timeout = timeout > 0 ? timeout : 0;

        return this;
    }

    /**
     * The method to build the SDKConfig instance
     * @returns An instance of SDKConfig
     */
    build() {
        return new SDKConfig(this._autoRefreshFields, this._pickListValidation, this._cacheStore, this._timeout);
    }
}

/**
 * The class to configure the SDK.
 */
class SDKConfig {
    /**
     * Creates an instance of SDKConfig with the given parameters
     * @param {Boolean} autoRefreshFields A boolean representing autoRefreshFields
     * @param {Boolean} pickListValidation A boolean representing pickListValidation
     * @param {Boolean} cacheStore A boolean representing cacheStore
     * @param {Integer} timeout A Integer representing timeout
     */
    constructor(autoRefreshFields, pickListValidation, cacheStore, timeout) {
        this._autoRefreshFields = autoRefreshFields;

        this._pickListValidation = pickListValidation;

        this._cacheStore = cacheStore;

        this._timeout = timeout;
    }

    /**
     * This is a getter method to get autoRefreshFields.
     * @returns A Boolean representing autoRefreshFields
     */
    getAutoRefreshFields() {
        return this._autoRefreshFields;
    }

    /**
     * This is a getter method to get pickListValidation.
     * @returns A Boolean representing pickListValidation
     */
    getPickListValidation() {
        return this._pickListValidation;
    }

    /**
     * This is a getter method to get cacheStore.
     * @returns A Boolean representing cacheStore
     */
    getCacheStore() {
        return this._cacheStore;
    }

    /**
     * This is a getter method to get timeout.
     * @returns A Integer representing API timeout
     */
    getTimeout() {
        return this._timeout;
    }
}

ZCRM.Note = {
	Model : {
		ActionHandler : class{
			constructor(){

			}


		},

		ResponseHandler : class{
			constructor(){

			}


		},

		ActionResponse : class{
			constructor(){

			}


		},

		ActionWrapper : class{
			constructor(){

				this.data=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the data
			 * @returns {List} An Array representing the data
			 */
			getData()	{
				return this.data;

			}

			/**
			 * The method to set the value to data
			 * @param {List} data An Array
			 */
			setData(data)	{
				if((data != null) && (!(Object.prototype.toString.call(data) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: data EXPECTED TYPE: Array", null, null);
				}
				this.data = data;
				this.keyModified.set("data", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		SuccessResponse : class{
			constructor(){

				this.code=null;
				this.status=null;
				this.message=null;
				this.details=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		BodyWrapper : class{
			constructor(){

				this.data=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the data
			 * @returns {List} An Array representing the data
			 */
			getData()	{
				return this.data;

			}

			/**
			 * The method to set the value to data
			 * @param {List} data An Array
			 */
			setData(data)	{
				if((data != null) && (!(Object.prototype.toString.call(data) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: data EXPECTED TYPE: Array", null, null);
				}
				this.data = data;
				this.keyModified.set("data", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		APIException : class{
			constructor(){

				this.status=null;
				this.code=null;
				this.message=null;
				this.details=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		Info : class{
			constructor(){

				this.perPage=null;
				this.count=null;
				this.page=null;
				this.moreRecords=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the perPage
			 * @returns {Integer} An Integer representing the perPage
			 */
			getPerPage()	{
				return this.perPage;

			}

			/**
			 * The method to set the value to perPage
			 * @param {Integer} perPage An Integer
			 */
			setPerPage(perPage)	{
				if((perPage != null) && (!(Object.prototype.toString.call(perPage) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: perPage EXPECTED TYPE: Integer", null, null);
				}
				this.perPage = perPage;
				this.keyModified.set("per_page", 1);

			}

			/**
			 * The method to get the count
			 * @returns {Integer} An Integer representing the count
			 */
			getCount()	{
				return this.count;

			}

			/**
			 * The method to set the value to count
			 * @param {Integer} count An Integer
			 */
			setCount(count)	{
				if((count != null) && (!(Object.prototype.toString.call(count) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: count EXPECTED TYPE: Integer", null, null);
				}
				this.count = count;
				this.keyModified.set("count", 1);

			}

			/**
			 * The method to get the page
			 * @returns {Integer} An Integer representing the page
			 */
			getPage()	{
				return this.page;

			}

			/**
			 * The method to set the value to page
			 * @param {Integer} page An Integer
			 */
			setPage(page)	{
				if((page != null) && (!(Object.prototype.toString.call(page) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: page EXPECTED TYPE: Integer", null, null);
				}
				this.page = page;
				this.keyModified.set("page", 1);

			}

			/**
			 * The method to get the moreRecords
			 * @returns {Boolean} A Boolean representing the moreRecords
			 */
			getMoreRecords()	{
				return this.moreRecords;

			}

			/**
			 * The method to set the value to moreRecords
			 * @param {Boolean} moreRecords A Boolean
			 */
			setMoreRecords(moreRecords)	{
				if((moreRecords != null) && (!(Object.prototype.toString.call(moreRecords) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: moreRecords EXPECTED TYPE: Boolean", null, null);
				}
				this.moreRecords = moreRecords;
				this.keyModified.set("more_records", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		ResponseWrapper : class{
			constructor(){

				this.data=null;
				this.info=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the data
			 * @returns {List} An Array representing the data
			 */
			getData()	{
				return this.data;

			}

			/**
			 * The method to set the value to data
			 * @param {List} data An Array
			 */
			setData(data)	{
				if((data != null) && (!(Object.prototype.toString.call(data) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: data EXPECTED TYPE: Array", null, null);
				}
				this.data = data;
				this.keyModified.set("data", 1);

			}

			/**
			 * The method to get the info
			 * @returns {Info} An instance of Info
			 */
			getInfo()	{
				return this.info;

			}

			/**
			 * The method to set the value to info
			 * @param {Info} info An instance of Info
			 */
			setInfo(info)	{
				if((info != null) && (!(info instanceof ZCRM.Note.Model.Info))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: info EXPECTED TYPE: Info", null, null);
				}
				this.info = info;
				this.keyModified.set("info", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		Note : class{
			constructor(){

				this.owner=null;
				this.modifiedTime=null;
				this.attachments=null;
				this.createdTime=null;
				this.parentId=null;
				this.editable=null;
				this.seModule=null;
				this.isSharedToClient=null;
				this.modifiedBy=null;
				this.size=null;
				this.state=null;
				this.voiceNote=null;
				this.id=null;
				this.createdBy=null;
				this.noteTitle=null;
				this.noteContent=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the owner
			 * @returns {User} An instance of User
			 */
			getOwner()	{
				return this.owner;

			}

			/**
			 * The method to set the value to owner
			 * @param {User} owner An instance of User
			 */
			setOwner(owner)	{
				if((owner != null) && (!(owner instanceof ZCRM.User.Model.User))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: owner EXPECTED TYPE: User", null, null);
				}
				this.owner = owner;
				this.keyModified.set("Owner", 1);

			}

			/**
			 * The method to get the modifiedTime
			 * @returns {OffsetDateTime} An instance of OffsetDateTime
			 */
			getModifiedTime()	{
				return this.modifiedTime;

			}

			/**
			 * The method to set the value to modifiedTime
			 * @param {OffsetDateTime} modifiedTime An instance of OffsetDateTime
			 */
			setModifiedTime(modifiedTime)	{
				if((modifiedTime != null) && (!(modifiedTime instanceof Date))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modifiedTime EXPECTED TYPE: Date", null, null);
				}
				this.modifiedTime = modifiedTime;
				this.keyModified.set("Modified_Time", 1);

			}

			/**
			 * The method to get the attachments
			 * @returns {List} An Array representing the attachments
			 */
			getAttachments()	{
				return this.attachments;

			}

			/**
			 * The method to set the value to attachments
			 * @param {List} attachments An Array
			 */
			setAttachments(attachments)	{
				if((attachments != null) && (!(Object.prototype.toString.call(attachments) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: attachments EXPECTED TYPE: Array", null, null);
				}
				this.attachments = attachments;
				this.keyModified.set("$attachments", 1);

			}

			/**
			 * The method to get the createdTime
			 * @returns {OffsetDateTime} An instance of OffsetDateTime
			 */
			getCreatedTime()	{
				return this.createdTime;

			}

			/**
			 * The method to set the value to createdTime
			 * @param {OffsetDateTime} createdTime An instance of OffsetDateTime
			 */
			setCreatedTime(createdTime)	{
				if((createdTime != null) && (!(createdTime instanceof Date))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: createdTime EXPECTED TYPE: Date", null, null);
				}
				this.createdTime = createdTime;
				this.keyModified.set("Created_Time", 1);

			}

			/**
			 * The method to get the parentId
			 * @returns {Record} An instance of Record
			 */
			getParentId()	{
				return this.parentId;

			}

			/**
			 * The method to set the value to parentId
			 * @param {Record} parentId An instance of Record
			 */
			setParentId(parentId)	{
				if((parentId != null) && (!(parentId instanceof ZCRM.Record.Model.Record))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: parentId EXPECTED TYPE: Record", null, null);
				}
				this.parentId = parentId;
				this.keyModified.set("Parent_Id", 1);

			}

			/**
			 * The method to get the editable
			 * @returns {Boolean} A Boolean representing the editable
			 */
			getEditable()	{
				return this.editable;

			}

			/**
			 * The method to set the value to editable
			 * @param {Boolean} editable A Boolean
			 */
			setEditable(editable)	{
				if((editable != null) && (!(Object.prototype.toString.call(editable) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: editable EXPECTED TYPE: Boolean", null, null);
				}
				this.editable = editable;
				this.keyModified.set("$editable", 1);

			}

			/**
			 * The method to get the seModule
			 * @returns {String} A String representing the seModule
			 */
			getSeModule()	{
				return this.seModule;

			}

			/**
			 * The method to set the value to seModule
			 * @param {String} seModule A String
			 */
			setSeModule(seModule)	{
				if((seModule != null) && (!(Object.prototype.toString.call(seModule) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: seModule EXPECTED TYPE: String", null, null);
				}
				this.seModule = seModule;
				this.keyModified.set("$se_module", 1);

			}

			/**
			 * The method to get the isSharedToClient
			 * @returns {Boolean} A Boolean representing the isSharedToClient
			 */
			getIsSharedToClient()	{
				return this.isSharedToClient;

			}

			/**
			 * The method to set the value to isSharedToClient
			 * @param {Boolean} isSharedToClient A Boolean
			 */
			setIsSharedToClient(isSharedToClient)	{
				if((isSharedToClient != null) && (!(Object.prototype.toString.call(isSharedToClient) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: isSharedToClient EXPECTED TYPE: Boolean", null, null);
				}
				this.isSharedToClient = isSharedToClient;
				this.keyModified.set("$is_shared_to_client", 1);

			}

			/**
			 * The method to get the modifiedBy
			 * @returns {User} An instance of User
			 */
			getModifiedBy()	{
				return this.modifiedBy;

			}

			/**
			 * The method to set the value to modifiedBy
			 * @param {User} modifiedBy An instance of User
			 */
			setModifiedBy(modifiedBy)	{
				if((modifiedBy != null) && (!(modifiedBy instanceof ZCRM.User.Model.User))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modifiedBy EXPECTED TYPE: User", null, null);
				}
				this.modifiedBy = modifiedBy;
				this.keyModified.set("Modified_By", 1);

			}

			/**
			 * The method to get the size
			 * @returns {String} A String representing the size
			 */
			getSize()	{
				return this.size;

			}

			/**
			 * The method to set the value to size
			 * @param {String} size A String
			 */
			setSize(size)	{
				if((size != null) && (!(Object.prototype.toString.call(size) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: size EXPECTED TYPE: String", null, null);
				}
				this.size = size;
				this.keyModified.set("$size", 1);

			}

			/**
			 * The method to get the state
			 * @returns {String} A String representing the state
			 */
			getState()	{
				return this.state;

			}

			/**
			 * The method to set the value to state
			 * @param {String} state A String
			 */
			setState(state)	{
				if((state != null) && (!(Object.prototype.toString.call(state) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: state EXPECTED TYPE: String", null, null);
				}
				this.state = state;
				this.keyModified.set("$state", 1);

			}

			/**
			 * The method to get the voiceNote
			 * @returns {Boolean} A Boolean representing the voiceNote
			 */
			getVoiceNote()	{
				return this.voiceNote;

			}

			/**
			 * The method to set the value to voiceNote
			 * @param {Boolean} voiceNote A Boolean
			 */
			setVoiceNote(voiceNote)	{
				if((voiceNote != null) && (!(Object.prototype.toString.call(voiceNote) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: voiceNote EXPECTED TYPE: Boolean", null, null);
				}
				this.voiceNote = voiceNote;
				this.keyModified.set("$voice_note", 1);

			}

			/**
			 * The method to get the id
			 * @returns {Long} A BigInt representing the id
			 */
			getId()	{
				return this.id;

			}

			/**
			 * The method to set the value to id
			 * @param {Long} id A BigInt
			 */
			setId(id)	{
				if((id != null) && (!(Object.prototype.toString.call(id) == "[object BigInt]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
				}
				this.id = id;
				this.keyModified.set("id", 1);

			}

			/**
			 * The method to get the createdBy
			 * @returns {User} An instance of User
			 */
			getCreatedBy()	{
				return this.createdBy;

			}

			/**
			 * The method to set the value to createdBy
			 * @param {User} createdBy An instance of User
			 */
			setCreatedBy(createdBy)	{
				if((createdBy != null) && (!(createdBy instanceof ZCRM.User.Model.User))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: createdBy EXPECTED TYPE: User", null, null);
				}
				this.createdBy = createdBy;
				this.keyModified.set("Created_By", 1);

			}

			/**
			 * The method to get the noteTitle
			 * @returns {String} A String representing the noteTitle
			 */
			getNoteTitle()	{
				return this.noteTitle;

			}

			/**
			 * The method to set the value to noteTitle
			 * @param {String} noteTitle A String
			 */
			setNoteTitle(noteTitle)	{
				if((noteTitle != null) && (!(Object.prototype.toString.call(noteTitle) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: noteTitle EXPECTED TYPE: String", null, null);
				}
				this.noteTitle = noteTitle;
				this.keyModified.set("Note_Title", 1);

			}

			/**
			 * The method to get the noteContent
			 * @returns {String} A String representing the noteContent
			 */
			getNoteContent()	{
				return this.noteContent;

			}

			/**
			 * The method to set the value to noteContent
			 * @param {String} noteContent A String
			 */
			setNoteContent(noteContent)	{
				if((noteContent != null) && (!(Object.prototype.toString.call(noteContent) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: noteContent EXPECTED TYPE: String", null, null);
				}
				this.noteContent = noteContent;
				this.keyModified.set("Note_Content", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		GetNotesHeader : {
			IF_MODIFIED_SINCE : 	new Header("If-Modified-Since", "Note.Model.GetNotesHeader"),


		},

		GetNoteParam : {
			FIELDS : 	new Param("fields", "Note.Model.GetNoteParam"),


		},

		GetNoteHeader : {
			IF_MODIFIED_SINCE : 	new Header("If-Modified-Since", "Note.Model.GetNoteHeader"),


		},

		GetNotesParam : {
			PAGE : 	new Param("page", "Note.Model.GetNotesParam"),

			PER_PAGE : 	new Param("per_page", "Note.Model.GetNotesParam"),

			FIELDS : 	new Param("fields", "Note.Model.GetNotesParam"),


		},

		DeleteNotesParam : {
			IDS : 	new Param("ids", "Note.Model.DeleteNotesParam"),


		}
	},
	Operations : class {
		constructor(){

		}

		/**
		 * The method to get notes
		 * @param {ParameterMap} paramInstance An instance of ParameterMap
		 * @param {HeaderMap} headerInstance An instance of HeaderMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getNotes(paramInstance=null, headerInstance=null){
			if((paramInstance != null) && (!(paramInstance instanceof ParameterMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paramInstance EXPECTED TYPE: ParameterMap", null, null);
			}
			if((headerInstance != null) && (!(headerInstance instanceof HeaderMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: headerInstance EXPECTED TYPE: HeaderMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/Notes");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			handlerInstance.setParam(paramInstance);
			handlerInstance.setHeader(headerInstance);
			return handlerInstance.apiCall("Note.Model.ResponseHandler", "application/json");

		}

		/**
		 * The method to create notes
		 * @param {BodyWrapper} request An instance of BodyWrapper
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async createNotes(request){
			if((request != null) && (!(request instanceof ZCRM.Note.Model.BodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: BodyWrapper", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/Notes");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_POST);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_CREATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			handlerInstance.setMandatoryChecker(true);
			return handlerInstance.apiCall("Note.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to update notes
		 * @param {BodyWrapper} request An instance of BodyWrapper
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async updateNotes(request){
			if((request != null) && (!(request instanceof ZCRM.Note.Model.BodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: BodyWrapper", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/Notes");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_PUT);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_UPDATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			handlerInstance.setMandatoryChecker(true);
			return handlerInstance.apiCall("Note.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to delete notes
		 * @param {ParameterMap} paramInstance An instance of ParameterMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async deleteNotes(paramInstance=null){
			if((paramInstance != null) && (!(paramInstance instanceof ParameterMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paramInstance EXPECTED TYPE: ParameterMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/Notes");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_DELETE);
			handlerInstance.setCategoryMethod(Constants.REQUEST_METHOD_DELETE);
			handlerInstance.setParam(paramInstance);
			return handlerInstance.apiCall("Note.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to get note
		 * @param {Long} id A BigInt
		 * @param {ParameterMap} paramInstance An instance of ParameterMap
		 * @param {HeaderMap} headerInstance An instance of HeaderMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getNote(id, paramInstance=null, headerInstance=null){
			if((!(Object.prototype.toString.call(id) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
			}
			if((paramInstance != null) && (!(paramInstance instanceof ParameterMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paramInstance EXPECTED TYPE: ParameterMap", null, null);
			}
			if((headerInstance != null) && (!(headerInstance instanceof HeaderMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: headerInstance EXPECTED TYPE: HeaderMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/Notes/");
			apiPath = apiPath.concat(id.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			handlerInstance.setParam(paramInstance);
			handlerInstance.setHeader(headerInstance);
			return handlerInstance.apiCall("Note.Model.ResponseHandler", "application/json");

		}

		/**
		 * The method to update note
		 * @param {Long} id A BigInt
		 * @param {BodyWrapper} request An instance of BodyWrapper
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async updateNote(id, request){
			if((!(Object.prototype.toString.call(id) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
			}
			if((request != null) && (!(request instanceof ZCRM.Note.Model.BodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: BodyWrapper", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/Notes/");
			apiPath = apiPath.concat(id.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_PUT);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_UPDATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			return handlerInstance.apiCall("Note.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to delete note
		 * @param {Long} id A BigInt
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async deleteNote(id){
			if((!(Object.prototype.toString.call(id) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/Notes/");
			apiPath = apiPath.concat(id.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_DELETE);
			handlerInstance.setCategoryMethod(Constants.REQUEST_METHOD_DELETE);
			return handlerInstance.apiCall("Note.Model.ActionHandler", "application/json");

		}
	},

}

ZCRM.VariableGroup = {
	Model : {
		ResponseHandler : class{
			constructor(){

			}


		},

		ResponseWrapper : class{
			constructor(){

				this.variableGroups=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the variableGroups
			 * @returns {List} An Array representing the variableGroups
			 */
			getVariableGroups()	{
				return this.variableGroups;

			}

			/**
			 * The method to set the value to variableGroups
			 * @param {List} variableGroups An Array
			 */
			setVariableGroups(variableGroups)	{
				if((variableGroups != null) && (!(Object.prototype.toString.call(variableGroups) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: variableGroups EXPECTED TYPE: Array", null, null);
				}
				this.variableGroups = variableGroups;
				this.keyModified.set("variable_groups", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		VariableGroup : class{
			constructor(){

				this.displayLabel=null;
				this.apiName=null;
				this.name=null;
				this.description=null;
				this.id=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the displayLabel
			 * @returns {String} A String representing the displayLabel
			 */
			getDisplayLabel()	{
				return this.displayLabel;

			}

			/**
			 * The method to set the value to displayLabel
			 * @param {String} displayLabel A String
			 */
			setDisplayLabel(displayLabel)	{
				if((displayLabel != null) && (!(Object.prototype.toString.call(displayLabel) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: displayLabel EXPECTED TYPE: String", null, null);
				}
				this.displayLabel = displayLabel;
				this.keyModified.set("display_label", 1);

			}

			/**
			 * The method to get the apiName
			 * @returns {String} A String representing the apiName
			 */
			getAPIName()	{
				return this.apiName;

			}

			/**
			 * The method to set the value to apiName
			 * @param {String} apiName A String
			 */
			setAPIName(apiName)	{
				if((apiName != null) && (!(Object.prototype.toString.call(apiName) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: apiName EXPECTED TYPE: String", null, null);
				}
				this.apiName = apiName;
				this.keyModified.set("api_name", 1);

			}

			/**
			 * The method to get the name
			 * @returns {String} A String representing the name
			 */
			getName()	{
				return this.name;

			}

			/**
			 * The method to set the value to name
			 * @param {String} name A String
			 */
			setName(name)	{
				if((name != null) && (!(Object.prototype.toString.call(name) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: name EXPECTED TYPE: String", null, null);
				}
				this.name = name;
				this.keyModified.set("name", 1);

			}

			/**
			 * The method to get the description
			 * @returns {String} A String representing the description
			 */
			getDescription()	{
				return this.description;

			}

			/**
			 * The method to set the value to description
			 * @param {String} description A String
			 */
			setDescription(description)	{
				if((description != null) && (!(Object.prototype.toString.call(description) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: description EXPECTED TYPE: String", null, null);
				}
				this.description = description;
				this.keyModified.set("description", 1);

			}

			/**
			 * The method to get the id
			 * @returns {Long} A BigInt representing the id
			 */
			getId()	{
				return this.id;

			}

			/**
			 * The method to set the value to id
			 * @param {Long} id A BigInt
			 */
			setId(id)	{
				if((id != null) && (!(Object.prototype.toString.call(id) == "[object BigInt]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
				}
				this.id = id;
				this.keyModified.set("id", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		APIException : class{
			constructor(){

				this.code=null;
				this.status=null;
				this.message=null;
				this.details=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		}
	},
	Operations : class {
		constructor(){

		}

		/**
		 * The method to get variable groups
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getVariableGroups(){
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/settings/variable_groups");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			return handlerInstance.apiCall("VariableGroup.Model.ResponseHandler", "application/json");

		}

		/**
		 * The method to get variable group by id
		 * @param {Long} id A BigInt
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getVariableGroupById(id){
			if((!(Object.prototype.toString.call(id) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/settings/variable_groups/");
			apiPath = apiPath.concat(id.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			return handlerInstance.apiCall("VariableGroup.Model.ResponseHandler", "application/json");

		}

		/**
		 * The method to get variable group by api name
		 * @param {String} apiName A String
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getVariableGroupByAPIName(apiName){
			if((!(Object.prototype.toString.call(apiName) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: apiName EXPECTED TYPE: String", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/settings/variable_groups/");
			apiPath = apiPath.concat(apiName.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			return handlerInstance.apiCall("VariableGroup.Model.ResponseHandler", "application/json");

		}
	},

}

ZCRM.ContactRole = {
	Model : {
		ResponseHandler : class{
			constructor(){

			}


		},

		RecordResponseHandler : class{
			constructor(){

			}


		},

		ActionResponse : class{
			constructor(){

			}


		},

		ActionHandler : class{
			constructor(){

			}


		},

		RecordActionHandler : class{
			constructor(){

			}


		},

		ResponseWrapper : class{
			constructor(){

				this.contactRoles=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the contactRoles
			 * @returns {List} An Array representing the contactRoles
			 */
			getContactRoles()	{
				return this.contactRoles;

			}

			/**
			 * The method to set the value to contactRoles
			 * @param {List} contactRoles An Array
			 */
			setContactRoles(contactRoles)	{
				if((contactRoles != null) && (!(Object.prototype.toString.call(contactRoles) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: contactRoles EXPECTED TYPE: Array", null, null);
				}
				this.contactRoles = contactRoles;
				this.keyModified.set("contact_roles", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		SuccessResponse : class{
			constructor(){

				this.status=null;
				this.code=null;
				this.message=null;
				this.details=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		RecordBodyWrapper : class{
			constructor(){

				this.data=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the data
			 * @returns {List} An Array representing the data
			 */
			getData()	{
				return this.data;

			}

			/**
			 * The method to set the value to data
			 * @param {List} data An Array
			 */
			setData(data)	{
				if((data != null) && (!(Object.prototype.toString.call(data) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: data EXPECTED TYPE: Array", null, null);
				}
				this.data = data;
				this.keyModified.set("data", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		BodyWrapper : class{
			constructor(){

				this.contactRoles=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the contactRoles
			 * @returns {List} An Array representing the contactRoles
			 */
			getContactRoles()	{
				return this.contactRoles;

			}

			/**
			 * The method to set the value to contactRoles
			 * @param {List} contactRoles An Array
			 */
			setContactRoles(contactRoles)	{
				if((contactRoles != null) && (!(Object.prototype.toString.call(contactRoles) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: contactRoles EXPECTED TYPE: Array", null, null);
				}
				this.contactRoles = contactRoles;
				this.keyModified.set("contact_roles", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		RecordActionWrapper : class{
			constructor(){

				this.data=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the data
			 * @returns {List} An Array representing the data
			 */
			getData()	{
				return this.data;

			}

			/**
			 * The method to set the value to data
			 * @param {List} data An Array
			 */
			setData(data)	{
				if((data != null) && (!(Object.prototype.toString.call(data) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: data EXPECTED TYPE: Array", null, null);
				}
				this.data = data;
				this.keyModified.set("data", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		ContactRoleWrapper : class{
			constructor(){

				this.contactRole=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the contactRole
			 * @returns {String} A String representing the contactRole
			 */
			getContactRole()	{
				return this.contactRole;

			}

			/**
			 * The method to set the value to contactRole
			 * @param {String} contactRole A String
			 */
			setContactRole(contactRole)	{
				if((contactRole != null) && (!(Object.prototype.toString.call(contactRole) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: contactRole EXPECTED TYPE: String", null, null);
				}
				this.contactRole = contactRole;
				this.keyModified.set("Contact_Role", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		RecordResponseWrapper : class{
			constructor(){

				this.data=null;
				this.info=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the data
			 * @returns {List} An Array representing the data
			 */
			getData()	{
				return this.data;

			}

			/**
			 * The method to set the value to data
			 * @param {List} data An Array
			 */
			setData(data)	{
				if((data != null) && (!(Object.prototype.toString.call(data) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: data EXPECTED TYPE: Array", null, null);
				}
				this.data = data;
				this.keyModified.set("data", 1);

			}

			/**
			 * The method to get the info
			 * @returns {Info} An instance of Info
			 */
			getInfo()	{
				return this.info;

			}

			/**
			 * The method to set the value to info
			 * @param {Info} info An instance of Info
			 */
			setInfo(info)	{
				if((info != null) && (!(info instanceof ZCRM.Record.Model.Info))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: info EXPECTED TYPE: Info", null, null);
				}
				this.info = info;
				this.keyModified.set("info", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		APIException : class{
			constructor(){

				this.status=null;
				this.code=null;
				this.message=null;
				this.details=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		ActionWrapper : class{
			constructor(){

				this.contactRoles=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the contactRoles
			 * @returns {List} An Array representing the contactRoles
			 */
			getContactRoles()	{
				return this.contactRoles;

			}

			/**
			 * The method to set the value to contactRoles
			 * @param {List} contactRoles An Array
			 */
			setContactRoles(contactRoles)	{
				if((contactRoles != null) && (!(Object.prototype.toString.call(contactRoles) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: contactRoles EXPECTED TYPE: Array", null, null);
				}
				this.contactRoles = contactRoles;
				this.keyModified.set("contact_roles", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		ContactRole : class{
			constructor(){

				this.id=null;
				this.name=null;
				this.sequenceNumber=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the id
			 * @returns {Long} A BigInt representing the id
			 */
			getId()	{
				return this.id;

			}

			/**
			 * The method to set the value to id
			 * @param {Long} id A BigInt
			 */
			setId(id)	{
				if((id != null) && (!(Object.prototype.toString.call(id) == "[object BigInt]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
				}
				this.id = id;
				this.keyModified.set("id", 1);

			}

			/**
			 * The method to get the name
			 * @returns {String} A String representing the name
			 */
			getName()	{
				return this.name;

			}

			/**
			 * The method to set the value to name
			 * @param {String} name A String
			 */
			setName(name)	{
				if((name != null) && (!(Object.prototype.toString.call(name) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: name EXPECTED TYPE: String", null, null);
				}
				this.name = name;
				this.keyModified.set("name", 1);

			}

			/**
			 * The method to get the sequenceNumber
			 * @returns {Integer} An Integer representing the sequenceNumber
			 */
			getSequenceNumber()	{
				return this.sequenceNumber;

			}

			/**
			 * The method to set the value to sequenceNumber
			 * @param {Integer} sequenceNumber An Integer
			 */
			setSequenceNumber(sequenceNumber)	{
				if((sequenceNumber != null) && (!(Object.prototype.toString.call(sequenceNumber) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: sequenceNumber EXPECTED TYPE: Integer", null, null);
				}
				this.sequenceNumber = sequenceNumber;
				this.keyModified.set("sequence_number", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		DeleteContactRolesParam : {
			IDS : 	new Param("ids", "ContactRole.Model.DeleteContactRolesParam"),


		},

		GetAllContactRolesOfDealParam : {
			IDS : 	new Param("ids", "ContactRole.Model.GetAllContactRolesOfDealParam"),


		}
	},
	Operations : class {
		constructor(){

		}

		/**
		 * The method to get contact roles
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getContactRoles(){
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/Contacts/roles");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			return handlerInstance.apiCall("ContactRole.Model.ResponseHandler", "application/json");

		}

		/**
		 * The method to create contact roles
		 * @param {BodyWrapper} request An instance of BodyWrapper
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async createContactRoles(request){
			if((request != null) && (!(request instanceof ZCRM.ContactRole.Model.BodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: BodyWrapper", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/Contacts/roles");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_POST);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_CREATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			handlerInstance.setMandatoryChecker(true);
			return handlerInstance.apiCall("ContactRole.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to update contact roles
		 * @param {BodyWrapper} request An instance of BodyWrapper
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async updateContactRoles(request){
			if((request != null) && (!(request instanceof ZCRM.ContactRole.Model.BodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: BodyWrapper", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/Contacts/roles");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_PUT);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_UPDATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			handlerInstance.setMandatoryChecker(true);
			return handlerInstance.apiCall("ContactRole.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to delete contact roles
		 * @param {ParameterMap} paramInstance An instance of ParameterMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async deleteContactRoles(paramInstance=null){
			if((paramInstance != null) && (!(paramInstance instanceof ParameterMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paramInstance EXPECTED TYPE: ParameterMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/Contacts/roles");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_DELETE);
			handlerInstance.setCategoryMethod(Constants.REQUEST_METHOD_DELETE);
			handlerInstance.setParam(paramInstance);
			return handlerInstance.apiCall("ContactRole.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to get contact role
		 * @param {Long} id A BigInt
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getContactRole(id){
			if((!(Object.prototype.toString.call(id) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/Contacts/roles/");
			apiPath = apiPath.concat(id.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			return handlerInstance.apiCall("ContactRole.Model.ResponseHandler", "application/json");

		}

		/**
		 * The method to update contact role
		 * @param {Long} id A BigInt
		 * @param {BodyWrapper} request An instance of BodyWrapper
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async updateContactRole(id, request){
			if((!(Object.prototype.toString.call(id) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
			}
			if((request != null) && (!(request instanceof ZCRM.ContactRole.Model.BodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: BodyWrapper", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/Contacts/roles/");
			apiPath = apiPath.concat(id.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_PUT);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_UPDATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			return handlerInstance.apiCall("ContactRole.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to delete contact role
		 * @param {Long} id A BigInt
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async deleteContactRole(id){
			if((!(Object.prototype.toString.call(id) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/Contacts/roles/");
			apiPath = apiPath.concat(id.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_DELETE);
			handlerInstance.setCategoryMethod(Constants.REQUEST_METHOD_DELETE);
			return handlerInstance.apiCall("ContactRole.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to get all contact roles of deal
		 * @param {Long} dealId A BigInt
		 * @param {ParameterMap} paramInstance An instance of ParameterMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getAllContactRolesOfDeal(dealId, paramInstance=null){
			if((!(Object.prototype.toString.call(dealId) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: dealId EXPECTED TYPE: BigInt", null, null);
			}
			if((paramInstance != null) && (!(paramInstance instanceof ParameterMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paramInstance EXPECTED TYPE: ParameterMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/Deals/");
			apiPath = apiPath.concat(dealId.toString());
			apiPath = apiPath.concat("/Contact_Roles");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			handlerInstance.setParam(paramInstance);
			handlerInstance.setModuleAPIName("Contacts");
			await Utility.getFields("Contacts", handlerInstance);
			return handlerInstance.apiCall("ContactRole.Model.RecordResponseHandler", "application/json");

		}

		/**
		 * The method to get contact role of deal
		 * @param {Long} contactId A BigInt
		 * @param {Long} dealId A BigInt
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getContactRoleOfDeal(contactId, dealId){
			if((!(Object.prototype.toString.call(contactId) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: contactId EXPECTED TYPE: BigInt", null, null);
			}
			if((!(Object.prototype.toString.call(dealId) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: dealId EXPECTED TYPE: BigInt", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/Deals/");
			apiPath = apiPath.concat(dealId.toString());
			apiPath = apiPath.concat("/Contact_Roles/");
			apiPath = apiPath.concat(contactId.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			handlerInstance.setModuleAPIName("Contacts");
			await Utility.getFields("Contacts", handlerInstance);
			return handlerInstance.apiCall("ContactRole.Model.RecordResponseHandler", "application/json");

		}

		/**
		 * The method to add contact role to deal
		 * @param {Long} contactId A BigInt
		 * @param {Long} dealId A BigInt
		 * @param {RecordBodyWrapper} request An instance of RecordBodyWrapper
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async addContactRoleToDeal(contactId, dealId, request){
			if((!(Object.prototype.toString.call(contactId) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: contactId EXPECTED TYPE: BigInt", null, null);
			}
			if((!(Object.prototype.toString.call(dealId) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: dealId EXPECTED TYPE: BigInt", null, null);
			}
			if((request != null) && (!(request instanceof ZCRM.ContactRole.Model.RecordBodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: RecordBodyWrapper", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/Deals/");
			apiPath = apiPath.concat(dealId.toString());
			apiPath = apiPath.concat("/Contact_Roles/");
			apiPath = apiPath.concat(contactId.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_PUT);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_UPDATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			return handlerInstance.apiCall("ContactRole.Model.RecordActionHandler", "application/json");

		}

		/**
		 * The method to remove contact role from deal
		 * @param {Long} contactId A BigInt
		 * @param {Long} dealId A BigInt
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async removeContactRoleFromDeal(contactId, dealId){
			if((!(Object.prototype.toString.call(contactId) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: contactId EXPECTED TYPE: BigInt", null, null);
			}
			if((!(Object.prototype.toString.call(dealId) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: dealId EXPECTED TYPE: BigInt", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/Deals/");
			apiPath = apiPath.concat(dealId.toString());
			apiPath = apiPath.concat("/Contact_Roles/");
			apiPath = apiPath.concat(contactId.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_DELETE);
			handlerInstance.setCategoryMethod(Constants.REQUEST_METHOD_DELETE);
			return handlerInstance.apiCall("ContactRole.Model.RecordActionHandler", "application/json");

		}
	},

}

ZCRM.Layout = {
	Model : {
		ResponseHandler : class{
			constructor(){

			}


		},

		ResponseWrapper : class{
			constructor(){

				this.layouts=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the layouts
			 * @returns {List} An Array representing the layouts
			 */
			getLayouts()	{
				return this.layouts;

			}

			/**
			 * The method to set the value to layouts
			 * @param {List} layouts An Array
			 */
			setLayouts(layouts)	{
				if((layouts != null) && (!(Object.prototype.toString.call(layouts) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: layouts EXPECTED TYPE: Array", null, null);
				}
				this.layouts = layouts;
				this.keyModified.set("layouts", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		Section : class{
			constructor(){

				this.displayLabel=null;
				this.sequenceNumber=null;
				this.issubformsection=null;
				this.tabTraversal=null;
				this.apiName=null;
				this.columnCount=null;
				this.name=null;
				this.generatedType=null;
				this.fields=null;
				this.properties=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the displayLabel
			 * @returns {String} A String representing the displayLabel
			 */
			getDisplayLabel()	{
				return this.displayLabel;

			}

			/**
			 * The method to set the value to displayLabel
			 * @param {String} displayLabel A String
			 */
			setDisplayLabel(displayLabel)	{
				if((displayLabel != null) && (!(Object.prototype.toString.call(displayLabel) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: displayLabel EXPECTED TYPE: String", null, null);
				}
				this.displayLabel = displayLabel;
				this.keyModified.set("display_label", 1);

			}

			/**
			 * The method to get the sequenceNumber
			 * @returns {Integer} An Integer representing the sequenceNumber
			 */
			getSequenceNumber()	{
				return this.sequenceNumber;

			}

			/**
			 * The method to set the value to sequenceNumber
			 * @param {Integer} sequenceNumber An Integer
			 */
			setSequenceNumber(sequenceNumber)	{
				if((sequenceNumber != null) && (!(Object.prototype.toString.call(sequenceNumber) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: sequenceNumber EXPECTED TYPE: Integer", null, null);
				}
				this.sequenceNumber = sequenceNumber;
				this.keyModified.set("sequence_number", 1);

			}

			/**
			 * The method to get the issubformsection
			 * @returns {Boolean} A Boolean representing the issubformsection
			 */
			getIssubformsection()	{
				return this.issubformsection;

			}

			/**
			 * The method to set the value to issubformsection
			 * @param {Boolean} issubformsection A Boolean
			 */
			setIssubformsection(issubformsection)	{
				if((issubformsection != null) && (!(Object.prototype.toString.call(issubformsection) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: issubformsection EXPECTED TYPE: Boolean", null, null);
				}
				this.issubformsection = issubformsection;
				this.keyModified.set("isSubformSection", 1);

			}

			/**
			 * The method to get the tabTraversal
			 * @returns {Integer} An Integer representing the tabTraversal
			 */
			getTabTraversal()	{
				return this.tabTraversal;

			}

			/**
			 * The method to set the value to tabTraversal
			 * @param {Integer} tabTraversal An Integer
			 */
			setTabTraversal(tabTraversal)	{
				if((tabTraversal != null) && (!(Object.prototype.toString.call(tabTraversal) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: tabTraversal EXPECTED TYPE: Integer", null, null);
				}
				this.tabTraversal = tabTraversal;
				this.keyModified.set("tab_traversal", 1);

			}

			/**
			 * The method to get the apiName
			 * @returns {String} A String representing the apiName
			 */
			getAPIName()	{
				return this.apiName;

			}

			/**
			 * The method to set the value to apiName
			 * @param {String} apiName A String
			 */
			setAPIName(apiName)	{
				if((apiName != null) && (!(Object.prototype.toString.call(apiName) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: apiName EXPECTED TYPE: String", null, null);
				}
				this.apiName = apiName;
				this.keyModified.set("api_name", 1);

			}

			/**
			 * The method to get the columnCount
			 * @returns {Integer} An Integer representing the columnCount
			 */
			getColumnCount()	{
				return this.columnCount;

			}

			/**
			 * The method to set the value to columnCount
			 * @param {Integer} columnCount An Integer
			 */
			setColumnCount(columnCount)	{
				if((columnCount != null) && (!(Object.prototype.toString.call(columnCount) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: columnCount EXPECTED TYPE: Integer", null, null);
				}
				this.columnCount = columnCount;
				this.keyModified.set("column_count", 1);

			}

			/**
			 * The method to get the name
			 * @returns {String} A String representing the name
			 */
			getName()	{
				return this.name;

			}

			/**
			 * The method to set the value to name
			 * @param {String} name A String
			 */
			setName(name)	{
				if((name != null) && (!(Object.prototype.toString.call(name) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: name EXPECTED TYPE: String", null, null);
				}
				this.name = name;
				this.keyModified.set("name", 1);

			}

			/**
			 * The method to get the generatedType
			 * @returns {String} A String representing the generatedType
			 */
			getGeneratedType()	{
				return this.generatedType;

			}

			/**
			 * The method to set the value to generatedType
			 * @param {String} generatedType A String
			 */
			setGeneratedType(generatedType)	{
				if((generatedType != null) && (!(Object.prototype.toString.call(generatedType) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: generatedType EXPECTED TYPE: String", null, null);
				}
				this.generatedType = generatedType;
				this.keyModified.set("generated_type", 1);

			}

			/**
			 * The method to get the fields
			 * @returns {List} An Array representing the fields
			 */
			getFields()	{
				return this.fields;

			}

			/**
			 * The method to set the value to fields
			 * @param {List} fields An Array
			 */
			setFields(fields)	{
				if((fields != null) && (!(Object.prototype.toString.call(fields) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: fields EXPECTED TYPE: Array", null, null);
				}
				this.fields = fields;
				this.keyModified.set("fields", 1);

			}

			/**
			 * The method to get the properties
			 * @returns {Properties} An instance of Properties
			 */
			getProperties()	{
				return this.properties;

			}

			/**
			 * The method to set the value to properties
			 * @param {Properties} properties An instance of Properties
			 */
			setProperties(properties)	{
				if((properties != null) && (!(properties instanceof ZCRM.Layout.Model.Properties))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: properties EXPECTED TYPE: Properties", null, null);
				}
				this.properties = properties;
				this.keyModified.set("properties", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		APIException : class{
			constructor(){

				this.status=null;
				this.code=null;
				this.message=null;
				this.details=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		Properties : class{
			constructor(){

				this.reorderRows=null;
				this.tooltip=null;
				this.maximumRows=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the reorderRows
			 * @returns {Boolean} A Boolean representing the reorderRows
			 */
			getReorderRows()	{
				return this.reorderRows;

			}

			/**
			 * The method to set the value to reorderRows
			 * @param {Boolean} reorderRows A Boolean
			 */
			setReorderRows(reorderRows)	{
				if((reorderRows != null) && (!(Object.prototype.toString.call(reorderRows) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: reorderRows EXPECTED TYPE: Boolean", null, null);
				}
				this.reorderRows = reorderRows;
				this.keyModified.set("reorder_rows", 1);

			}

			/**
			 * The method to get the tooltip
			 * @returns {ToolTip} An instance of ToolTip
			 */
			getTooltip()	{
				return this.tooltip;

			}

			/**
			 * The method to set the value to tooltip
			 * @param {ToolTip} tooltip An instance of ToolTip
			 */
			setTooltip(tooltip)	{
				if((tooltip != null) && (!(tooltip instanceof ZCRM.Field.Model.ToolTip))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: tooltip EXPECTED TYPE: ToolTip", null, null);
				}
				this.tooltip = tooltip;
				this.keyModified.set("tooltip", 1);

			}

			/**
			 * The method to get the maximumRows
			 * @returns {Integer} An Integer representing the maximumRows
			 */
			getMaximumRows()	{
				return this.maximumRows;

			}

			/**
			 * The method to set the value to maximumRows
			 * @param {Integer} maximumRows An Integer
			 */
			setMaximumRows(maximumRows)	{
				if((maximumRows != null) && (!(Object.prototype.toString.call(maximumRows) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: maximumRows EXPECTED TYPE: Integer", null, null);
				}
				this.maximumRows = maximumRows;
				this.keyModified.set("maximum_rows", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		Layout : class{
			constructor(){

				this.createdTime=null;
				this.convertMapping=null;
				this.modifiedTime=null;
				this.visible=null;
				this.createdFor=null;
				this.name=null;
				this.modifiedBy=null;
				this.profiles=null;
				this.id=null;
				this.createdBy=null;
				this.sections=null;
				this.status=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the createdTime
			 * @returns {OffsetDateTime} An instance of OffsetDateTime
			 */
			getCreatedTime()	{
				return this.createdTime;

			}

			/**
			 * The method to set the value to createdTime
			 * @param {OffsetDateTime} createdTime An instance of OffsetDateTime
			 */
			setCreatedTime(createdTime)	{
				if((createdTime != null) && (!(createdTime instanceof Date))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: createdTime EXPECTED TYPE: Date", null, null);
				}
				this.createdTime = createdTime;
				this.keyModified.set("created_time", 1);

			}

			/**
			 * The method to get the convertMapping
			 * @returns {Map} A Map representing the convertMapping
			 */
			getConvertMapping()	{
				return this.convertMapping;

			}

			/**
			 * The method to set the value to convertMapping
			 * @param {Map} convertMapping A Map
			 */
			setConvertMapping(convertMapping)	{
				if((convertMapping != null) && (!(Object.prototype.toString.call(convertMapping) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: convertMapping EXPECTED TYPE: Map", null, null);
				}
				this.convertMapping = convertMapping;
				this.keyModified.set("convert_mapping", 1);

			}

			/**
			 * The method to get the modifiedTime
			 * @returns {OffsetDateTime} An instance of OffsetDateTime
			 */
			getModifiedTime()	{
				return this.modifiedTime;

			}

			/**
			 * The method to set the value to modifiedTime
			 * @param {OffsetDateTime} modifiedTime An instance of OffsetDateTime
			 */
			setModifiedTime(modifiedTime)	{
				if((modifiedTime != null) && (!(modifiedTime instanceof Date))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modifiedTime EXPECTED TYPE: Date", null, null);
				}
				this.modifiedTime = modifiedTime;
				this.keyModified.set("modified_time", 1);

			}

			/**
			 * The method to get the visible
			 * @returns {Boolean} A Boolean representing the visible
			 */
			getVisible()	{
				return this.visible;

			}

			/**
			 * The method to set the value to visible
			 * @param {Boolean} visible A Boolean
			 */
			setVisible(visible)	{
				if((visible != null) && (!(Object.prototype.toString.call(visible) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: visible EXPECTED TYPE: Boolean", null, null);
				}
				this.visible = visible;
				this.keyModified.set("visible", 1);

			}

			/**
			 * The method to get the createdFor
			 * @returns {User} An instance of User
			 */
			getCreatedFor()	{
				return this.createdFor;

			}

			/**
			 * The method to set the value to createdFor
			 * @param {User} createdFor An instance of User
			 */
			setCreatedFor(createdFor)	{
				if((createdFor != null) && (!(createdFor instanceof ZCRM.User.Model.User))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: createdFor EXPECTED TYPE: User", null, null);
				}
				this.createdFor = createdFor;
				this.keyModified.set("created_for", 1);

			}

			/**
			 * The method to get the name
			 * @returns {String} A String representing the name
			 */
			getName()	{
				return this.name;

			}

			/**
			 * The method to set the value to name
			 * @param {String} name A String
			 */
			setName(name)	{
				if((name != null) && (!(Object.prototype.toString.call(name) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: name EXPECTED TYPE: String", null, null);
				}
				this.name = name;
				this.keyModified.set("name", 1);

			}

			/**
			 * The method to get the modifiedBy
			 * @returns {User} An instance of User
			 */
			getModifiedBy()	{
				return this.modifiedBy;

			}

			/**
			 * The method to set the value to modifiedBy
			 * @param {User} modifiedBy An instance of User
			 */
			setModifiedBy(modifiedBy)	{
				if((modifiedBy != null) && (!(modifiedBy instanceof ZCRM.User.Model.User))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modifiedBy EXPECTED TYPE: User", null, null);
				}
				this.modifiedBy = modifiedBy;
				this.keyModified.set("modified_by", 1);

			}

			/**
			 * The method to get the profiles
			 * @returns {List} An Array representing the profiles
			 */
			getProfiles()	{
				return this.profiles;

			}

			/**
			 * The method to set the value to profiles
			 * @param {List} profiles An Array
			 */
			setProfiles(profiles)	{
				if((profiles != null) && (!(Object.prototype.toString.call(profiles) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: profiles EXPECTED TYPE: Array", null, null);
				}
				this.profiles = profiles;
				this.keyModified.set("profiles", 1);

			}

			/**
			 * The method to get the id
			 * @returns {Long} A BigInt representing the id
			 */
			getId()	{
				return this.id;

			}

			/**
			 * The method to set the value to id
			 * @param {Long} id A BigInt
			 */
			setId(id)	{
				if((id != null) && (!(Object.prototype.toString.call(id) == "[object BigInt]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
				}
				this.id = id;
				this.keyModified.set("id", 1);

			}

			/**
			 * The method to get the createdBy
			 * @returns {User} An instance of User
			 */
			getCreatedBy()	{
				return this.createdBy;

			}

			/**
			 * The method to set the value to createdBy
			 * @param {User} createdBy An instance of User
			 */
			setCreatedBy(createdBy)	{
				if((createdBy != null) && (!(createdBy instanceof ZCRM.User.Model.User))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: createdBy EXPECTED TYPE: User", null, null);
				}
				this.createdBy = createdBy;
				this.keyModified.set("created_by", 1);

			}

			/**
			 * The method to get the sections
			 * @returns {List} An Array representing the sections
			 */
			getSections()	{
				return this.sections;

			}

			/**
			 * The method to set the value to sections
			 * @param {List} sections An Array
			 */
			setSections(sections)	{
				if((sections != null) && (!(Object.prototype.toString.call(sections) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: sections EXPECTED TYPE: Array", null, null);
				}
				this.sections = sections;
				this.keyModified.set("sections", 1);

			}

			/**
			 * The method to get the status
			 * @returns {Integer} An Integer representing the status
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Integer} status An Integer
			 */
			setStatus(status)	{
				if((status != null) && (!(Object.prototype.toString.call(status) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Integer", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		GetLayoutsParam : {

		},

		GetLayoutParam : {

		}
	},
	Operations : class {


		/**
		 * Creates an instance of LayoutsOperations with the given parameters
		 * @param {String} module A String
		 */
		constructor(module=null){
			if((module != null) && (!(Object.prototype.toString.call(module) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: module EXPECTED TYPE: String", null, null);
			}
						this.module = module;

		}

		/**
		 * The method to get layouts
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getLayouts(){
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/settings/layouts");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			await handlerInstance.addParam(new Param("module", "Layout.Model.GetLayoutsParam"), this.module);
			return handlerInstance.apiCall("Layout.Model.ResponseHandler", "application/json");

		}

		/**
		 * The method to get layout
		 * @param {Long} id A BigInt
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getLayout(id){
			if((!(Object.prototype.toString.call(id) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/settings/layouts/");
			apiPath = apiPath.concat(id.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			await handlerInstance.addParam(new Param("module", "Layout.Model.GetLayoutParam"), this.module);
			return handlerInstance.apiCall("Layout.Model.ResponseHandler", "application/json");

		}

	},

}

ZCRM.Variable = {
	Model : {
		ActionHandler : class{
			constructor(){

			}


		},

		ActionResponse : class{
			constructor(){

			}


		},

		ResponseHandler : class{
			constructor(){

			}


		},

		ResponseWrapper : class{
			constructor(){

				this.variables=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the variables
			 * @returns {List} An Array representing the variables
			 */
			getVariables()	{
				return this.variables;

			}

			/**
			 * The method to set the value to variables
			 * @param {List} variables An Array
			 */
			setVariables(variables)	{
				if((variables != null) && (!(Object.prototype.toString.call(variables) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: variables EXPECTED TYPE: Array", null, null);
				}
				this.variables = variables;
				this.keyModified.set("variables", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		BodyWrapper : class{
			constructor(){

				this.variables=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the variables
			 * @returns {List} An Array representing the variables
			 */
			getVariables()	{
				return this.variables;

			}

			/**
			 * The method to set the value to variables
			 * @param {List} variables An Array
			 */
			setVariables(variables)	{
				if((variables != null) && (!(Object.prototype.toString.call(variables) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: variables EXPECTED TYPE: Array", null, null);
				}
				this.variables = variables;
				this.keyModified.set("variables", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		APIException : class{
			constructor(){

				this.status=null;
				this.code=null;
				this.message=null;
				this.details=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		Variable : class{
			constructor(){

				this.apiName=null;
				this.name=null;
				this.description=null;
				this.id=null;
				this.type=null;
				this.variableGroup=null;
				this.value=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the apiName
			 * @returns {String} A String representing the apiName
			 */
			getAPIName()	{
				return this.apiName;

			}

			/**
			 * The method to set the value to apiName
			 * @param {String} apiName A String
			 */
			setAPIName(apiName)	{
				if((apiName != null) && (!(Object.prototype.toString.call(apiName) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: apiName EXPECTED TYPE: String", null, null);
				}
				this.apiName = apiName;
				this.keyModified.set("api_name", 1);

			}

			/**
			 * The method to get the name
			 * @returns {String} A String representing the name
			 */
			getName()	{
				return this.name;

			}

			/**
			 * The method to set the value to name
			 * @param {String} name A String
			 */
			setName(name)	{
				if((name != null) && (!(Object.prototype.toString.call(name) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: name EXPECTED TYPE: String", null, null);
				}
				this.name = name;
				this.keyModified.set("name", 1);

			}

			/**
			 * The method to get the description
			 * @returns {String} A String representing the description
			 */
			getDescription()	{
				return this.description;

			}

			/**
			 * The method to set the value to description
			 * @param {String} description A String
			 */
			setDescription(description)	{
				if((description != null) && (!(Object.prototype.toString.call(description) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: description EXPECTED TYPE: String", null, null);
				}
				this.description = description;
				this.keyModified.set("description", 1);

			}

			/**
			 * The method to get the id
			 * @returns {Long} A BigInt representing the id
			 */
			getId()	{
				return this.id;

			}

			/**
			 * The method to set the value to id
			 * @param {Long} id A BigInt
			 */
			setId(id)	{
				if((id != null) && (!(Object.prototype.toString.call(id) == "[object BigInt]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
				}
				this.id = id;
				this.keyModified.set("id", 1);

			}

			/**
			 * The method to get the type
			 * @returns {String} A String representing the type
			 */
			getType()	{
				return this.type;

			}

			/**
			 * The method to set the value to type
			 * @param {String} type A String
			 */
			setType(type)	{
				if((type != null) && (!(Object.prototype.toString.call(type) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: type EXPECTED TYPE: String", null, null);
				}
				this.type = type;
				this.keyModified.set("type", 1);

			}

			/**
			 * The method to get the variableGroup
			 * @returns {VariableGroup} An instance of VariableGroup
			 */
			getVariableGroup()	{
				return this.variableGroup;

			}

			/**
			 * The method to set the value to variableGroup
			 * @param {VariableGroup} variableGroup An instance of VariableGroup
			 */
			setVariableGroup(variableGroup)	{
				if((variableGroup != null) && (!(variableGroup instanceof ZCRM.VariableGroup.Model.VariableGroup))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: variableGroup EXPECTED TYPE: VariableGroup", null, null);
				}
				this.variableGroup = variableGroup;
				this.keyModified.set("variable_group", 1);

			}

			/**
			 * The method to get the value
			 * @returns {Object} An Object representing the value
			 */
			getValue()	{
				return this.value;

			}

			/**
			 * The method to set the value to value
			 * @param {Object} value An Object
			 */
			setValue(value)	{
				this.value = value;
				this.keyModified.set("value", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		SuccessResponse : class{
			constructor(){

				this.status=null;
				this.code=null;
				this.message=null;
				this.details=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		ActionWrapper : class{
			constructor(){

				this.variables=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the variables
			 * @returns {List} An Array representing the variables
			 */
			getVariables()	{
				return this.variables;

			}

			/**
			 * The method to set the value to variables
			 * @param {List} variables An Array
			 */
			setVariables(variables)	{
				if((variables != null) && (!(Object.prototype.toString.call(variables) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: variables EXPECTED TYPE: Array", null, null);
				}
				this.variables = variables;
				this.keyModified.set("variables", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		GetVariableByIDParam : {
			GROUP : 	new Param("group", "Variable.Model.GetVariableByIDParam"),


		},

		DeleteVariablesParam : {
			IDS : 	new Param("ids", "Variable.Model.DeleteVariablesParam"),


		},

		GetVariableForAPINameParam : {
			GROUP : 	new Param("group", "Variable.Model.GetVariableForAPINameParam"),


		},

		GetVariablesParam : {
			GROUP : 	new Param("group", "Variable.Model.GetVariablesParam"),


		}
	},
	Operations : class {
		constructor(){

		}

		/**
		 * The method to get variables
		 * @param {ParameterMap} paramInstance An instance of ParameterMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getVariables(paramInstance=null){
			if((paramInstance != null) && (!(paramInstance instanceof ParameterMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paramInstance EXPECTED TYPE: ParameterMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/settings/variables");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			handlerInstance.setParam(paramInstance);
			return handlerInstance.apiCall("Variable.Model.ResponseHandler", "application/json");

		}

		/**
		 * The method to create variables
		 * @param {BodyWrapper} request An instance of BodyWrapper
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async createVariables(request){
			if((request != null) && (!(request instanceof ZCRM.Variable.Model.BodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: BodyWrapper", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/settings/variables");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_POST);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_CREATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			handlerInstance.setMandatoryChecker(true);
			return handlerInstance.apiCall("Variable.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to update variables
		 * @param {BodyWrapper} request An instance of BodyWrapper
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async updateVariables(request){
			if((request != null) && (!(request instanceof ZCRM.Variable.Model.BodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: BodyWrapper", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/settings/variables");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_PUT);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_UPDATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			handlerInstance.setMandatoryChecker(true);
			return handlerInstance.apiCall("Variable.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to delete variables
		 * @param {ParameterMap} paramInstance An instance of ParameterMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async deleteVariables(paramInstance=null){
			if((paramInstance != null) && (!(paramInstance instanceof ParameterMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paramInstance EXPECTED TYPE: ParameterMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/settings/variables");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_DELETE);
			handlerInstance.setCategoryMethod(Constants.REQUEST_METHOD_DELETE);
			handlerInstance.setParam(paramInstance);
			return handlerInstance.apiCall("Variable.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to get variable by id
		 * @param {Long} id A BigInt
		 * @param {ParameterMap} paramInstance An instance of ParameterMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getVariableById(id, paramInstance=null){
			if((!(Object.prototype.toString.call(id) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
			}
			if((paramInstance != null) && (!(paramInstance instanceof ParameterMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paramInstance EXPECTED TYPE: ParameterMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/settings/variables/");
			apiPath = apiPath.concat(id.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			handlerInstance.setParam(paramInstance);
			return handlerInstance.apiCall("Variable.Model.ResponseHandler", "application/json");

		}

		/**
		 * The method to update variable by id
		 * @param {Long} id A BigInt
		 * @param {BodyWrapper} request An instance of BodyWrapper
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async updateVariableById(id, request){
			if((!(Object.prototype.toString.call(id) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
			}
			if((request != null) && (!(request instanceof ZCRM.Variable.Model.BodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: BodyWrapper", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/settings/variables/");
			apiPath = apiPath.concat(id.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_PUT);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_UPDATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			return handlerInstance.apiCall("Variable.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to delete variable
		 * @param {Long} id A BigInt
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async deleteVariable(id){
			if((!(Object.prototype.toString.call(id) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/settings/variables/");
			apiPath = apiPath.concat(id.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_DELETE);
			handlerInstance.setCategoryMethod(Constants.REQUEST_METHOD_DELETE);
			return handlerInstance.apiCall("Variable.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to get variable for api name
		 * @param {String} apiName A String
		 * @param {ParameterMap} paramInstance An instance of ParameterMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getVariableForAPIName(apiName, paramInstance=null){
			if((!(Object.prototype.toString.call(apiName) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: apiName EXPECTED TYPE: String", null, null);
			}
			if((paramInstance != null) && (!(paramInstance instanceof ParameterMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paramInstance EXPECTED TYPE: ParameterMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/settings/variables/");
			apiPath = apiPath.concat(apiName.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			handlerInstance.setParam(paramInstance);
			return handlerInstance.apiCall("Variable.Model.ResponseHandler", "application/json");

		}

		/**
		 * The method to update variable by api name
		 * @param {String} apiName A String
		 * @param {BodyWrapper} request An instance of BodyWrapper
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async updateVariableByAPIName(apiName, request){
			if((!(Object.prototype.toString.call(apiName) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: apiName EXPECTED TYPE: String", null, null);
			}
			if((request != null) && (!(request instanceof ZCRM.Variable.Model.BodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: BodyWrapper", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/settings/variables/");
			apiPath = apiPath.concat(apiName.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_PUT);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_UPDATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			return handlerInstance.apiCall("Variable.Model.ActionHandler", "application/json");

		}
	},

}

ZCRM.Tax = {
	Model : {
		ActionResponse : class{
			constructor(){

			}


		},

		ResponseHandler : class{
			constructor(){

			}


		},

		ActionHandler : class{
			constructor(){

			}


		},

		Preference : class{
			constructor(){

				this.autoPopulateTax=null;
				this.modifyTaxRates=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the autoPopulateTax
			 * @returns {Boolean} A Boolean representing the autoPopulateTax
			 */
			getAutoPopulateTax()	{
				return this.autoPopulateTax;

			}

			/**
			 * The method to set the value to autoPopulateTax
			 * @param {Boolean} autoPopulateTax A Boolean
			 */
			setAutoPopulateTax(autoPopulateTax)	{
				if((autoPopulateTax != null) && (!(Object.prototype.toString.call(autoPopulateTax) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: autoPopulateTax EXPECTED TYPE: Boolean", null, null);
				}
				this.autoPopulateTax = autoPopulateTax;
				this.keyModified.set("auto_populate_tax", 1);

			}

			/**
			 * The method to get the modifyTaxRates
			 * @returns {Boolean} A Boolean representing the modifyTaxRates
			 */
			getModifyTaxRates()	{
				return this.modifyTaxRates;

			}

			/**
			 * The method to set the value to modifyTaxRates
			 * @param {Boolean} modifyTaxRates A Boolean
			 */
			setModifyTaxRates(modifyTaxRates)	{
				if((modifyTaxRates != null) && (!(Object.prototype.toString.call(modifyTaxRates) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modifyTaxRates EXPECTED TYPE: Boolean", null, null);
				}
				this.modifyTaxRates = modifyTaxRates;
				this.keyModified.set("modify_tax_rates", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		ActionWrapper : class{
			constructor(){

				this.taxes=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the taxes
			 * @returns {List} An Array representing the taxes
			 */
			getTaxes()	{
				return this.taxes;

			}

			/**
			 * The method to set the value to taxes
			 * @param {List} taxes An Array
			 */
			setTaxes(taxes)	{
				if((taxes != null) && (!(Object.prototype.toString.call(taxes) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: taxes EXPECTED TYPE: Array", null, null);
				}
				this.taxes = taxes;
				this.keyModified.set("taxes", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		SuccessResponse : class{
			constructor(){

				this.status=null;
				this.code=null;
				this.message=null;
				this.details=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		APIException : class{
			constructor(){

				this.status=null;
				this.code=null;
				this.message=null;
				this.details=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		ResponseWrapper : class{
			constructor(){

				this.taxes=null;
				this.preference=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the taxes
			 * @returns {List} An Array representing the taxes
			 */
			getTaxes()	{
				return this.taxes;

			}

			/**
			 * The method to set the value to taxes
			 * @param {List} taxes An Array
			 */
			setTaxes(taxes)	{
				if((taxes != null) && (!(Object.prototype.toString.call(taxes) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: taxes EXPECTED TYPE: Array", null, null);
				}
				this.taxes = taxes;
				this.keyModified.set("taxes", 1);

			}

			/**
			 * The method to get the preference
			 * @returns {Preference} An instance of Preference
			 */
			getPreference()	{
				return this.preference;

			}

			/**
			 * The method to set the value to preference
			 * @param {Preference} preference An instance of Preference
			 */
			setPreference(preference)	{
				if((preference != null) && (!(preference instanceof ZCRM.Tax.Model.Preference))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: preference EXPECTED TYPE: Preference", null, null);
				}
				this.preference = preference;
				this.keyModified.set("preference", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		BodyWrapper : class{
			constructor(){

				this.taxes=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the taxes
			 * @returns {List} An Array representing the taxes
			 */
			getTaxes()	{
				return this.taxes;

			}

			/**
			 * The method to set the value to taxes
			 * @param {List} taxes An Array
			 */
			setTaxes(taxes)	{
				if((taxes != null) && (!(Object.prototype.toString.call(taxes) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: taxes EXPECTED TYPE: Array", null, null);
				}
				this.taxes = taxes;
				this.keyModified.set("taxes", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		Tax : class{
			constructor(){

				this.displayLabel=null;
				this.name=null;
				this.id=null;
				this.value=null;
				this.sequenceNumber=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the displayLabel
			 * @returns {String} A String representing the displayLabel
			 */
			getDisplayLabel()	{
				return this.displayLabel;

			}

			/**
			 * The method to set the value to displayLabel
			 * @param {String} displayLabel A String
			 */
			setDisplayLabel(displayLabel)	{
				if((displayLabel != null) && (!(Object.prototype.toString.call(displayLabel) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: displayLabel EXPECTED TYPE: String", null, null);
				}
				this.displayLabel = displayLabel;
				this.keyModified.set("display_label", 1);

			}

			/**
			 * The method to get the name
			 * @returns {String} A String representing the name
			 */
			getName()	{
				return this.name;

			}

			/**
			 * The method to set the value to name
			 * @param {String} name A String
			 */
			setName(name)	{
				if((name != null) && (!(Object.prototype.toString.call(name) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: name EXPECTED TYPE: String", null, null);
				}
				this.name = name;
				this.keyModified.set("name", 1);

			}

			/**
			 * The method to get the id
			 * @returns {Long} A BigInt representing the id
			 */
			getId()	{
				return this.id;

			}

			/**
			 * The method to set the value to id
			 * @param {Long} id A BigInt
			 */
			setId(id)	{
				if((id != null) && (!(Object.prototype.toString.call(id) == "[object BigInt]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
				}
				this.id = id;
				this.keyModified.set("id", 1);

			}

			/**
			 * The method to get the value
			 * @returns {Double} A Float representing the value
			 */
			getValue()	{
				return this.value;

			}

			/**
			 * The method to set the value to value
			 * @param {Double} value A Float
			 */
			setValue(value)	{
				if((value != null) && (!(Object.prototype.toString.call(value) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: value EXPECTED TYPE: Float", null, null);
				}
				this.value = value;
				this.keyModified.set("value", 1);

			}

			/**
			 * The method to get the sequenceNumber
			 * @returns {Integer} An Integer representing the sequenceNumber
			 */
			getSequenceNumber()	{
				return this.sequenceNumber;

			}

			/**
			 * The method to set the value to sequenceNumber
			 * @param {Integer} sequenceNumber An Integer
			 */
			setSequenceNumber(sequenceNumber)	{
				if((sequenceNumber != null) && (!(Object.prototype.toString.call(sequenceNumber) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: sequenceNumber EXPECTED TYPE: Integer", null, null);
				}
				this.sequenceNumber = sequenceNumber;
				this.keyModified.set("sequence_number", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		DeleteTaxesParam : {
			IDS : 	new Param("ids", "Tax.Model.DeleteTaxesParam"),


		}
	},
	Operations : class {
		constructor(){

		}

		/**
		 * The method to get taxes
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getTaxes(){
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/org/taxes");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			return handlerInstance.apiCall("Tax.Model.ResponseHandler", "application/json");

		}

		/**
		 * The method to create taxes
		 * @param {BodyWrapper} request An instance of BodyWrapper
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async createTaxes(request){
			if((request != null) && (!(request instanceof ZCRM.Tax.Model.BodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: BodyWrapper", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/org/taxes");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_POST);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_CREATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			handlerInstance.setMandatoryChecker(true);
			return handlerInstance.apiCall("Tax.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to update taxes
		 * @param {BodyWrapper} request An instance of BodyWrapper
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async updateTaxes(request){
			if((request != null) && (!(request instanceof ZCRM.Tax.Model.BodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: BodyWrapper", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/org/taxes");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_PUT);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_UPDATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			handlerInstance.setMandatoryChecker(true);
			return handlerInstance.apiCall("Tax.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to delete taxes
		 * @param {ParameterMap} paramInstance An instance of ParameterMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async deleteTaxes(paramInstance=null){
			if((paramInstance != null) && (!(paramInstance instanceof ParameterMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paramInstance EXPECTED TYPE: ParameterMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/org/taxes");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_DELETE);
			handlerInstance.setCategoryMethod(Constants.REQUEST_METHOD_DELETE);
			handlerInstance.setParam(paramInstance);
			return handlerInstance.apiCall("Tax.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to get tax
		 * @param {Long} id A BigInt
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getTax(id){
			if((!(Object.prototype.toString.call(id) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/org/taxes/");
			apiPath = apiPath.concat(id.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			return handlerInstance.apiCall("Tax.Model.ResponseHandler", "application/json");

		}

		/**
		 * The method to delete tax
		 * @param {Long} id A BigInt
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async deleteTax(id){
			if((!(Object.prototype.toString.call(id) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/org/taxes/");
			apiPath = apiPath.concat(id.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_DELETE);
			handlerInstance.setCategoryMethod(Constants.REQUEST_METHOD_DELETE);
			return handlerInstance.apiCall("Tax.Model.ActionHandler", "application/json");

		}
	},

}

ZCRM.User = {
	Model : {
		ActionResponse : class{
			constructor(){

			}


		},

		ResponseHandler : class{
			constructor(){

			}


		},

		ActionHandler : class{
			constructor(){

			}


		},

		ActionWrapper : class{
			constructor(){

				this.users=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the users
			 * @returns {List} An Array representing the users
			 */
			getUsers()	{
				return this.users;

			}

			/**
			 * The method to set the value to users
			 * @param {List} users An Array
			 */
			setUsers(users)	{
				if((users != null) && (!(Object.prototype.toString.call(users) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: users EXPECTED TYPE: Array", null, null);
				}
				this.users = users;
				this.keyModified.set("users", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		SuccessResponse : class{
			constructor(){

				this.status=null;
				this.code=null;
				this.message=null;
				this.details=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		ResponseWrapper : class{
			constructor(){

				this.users=null;
				this.info=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the users
			 * @returns {List} An Array representing the users
			 */
			getUsers()	{
				return this.users;

			}

			/**
			 * The method to set the value to users
			 * @param {List} users An Array
			 */
			setUsers(users)	{
				if((users != null) && (!(Object.prototype.toString.call(users) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: users EXPECTED TYPE: Array", null, null);
				}
				this.users = users;
				this.keyModified.set("users", 1);

			}

			/**
			 * The method to get the info
			 * @returns {Info} An instance of Info
			 */
			getInfo()	{
				return this.info;

			}

			/**
			 * The method to set the value to info
			 * @param {Info} info An instance of Info
			 */
			setInfo(info)	{
				if((info != null) && (!(info instanceof ZCRM.User.Model.Info))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: info EXPECTED TYPE: Info", null, null);
				}
				this.info = info;
				this.keyModified.set("info", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		Territory : class{
			constructor(){

				this.manager=null;
				this.name=null;
				this.id=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the manager
			 * @returns {Boolean} A Boolean representing the manager
			 */
			getManager()	{
				return this.manager;

			}

			/**
			 * The method to set the value to manager
			 * @param {Boolean} manager A Boolean
			 */
			setManager(manager)	{
				if((manager != null) && (!(Object.prototype.toString.call(manager) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: manager EXPECTED TYPE: Boolean", null, null);
				}
				this.manager = manager;
				this.keyModified.set("manager", 1);

			}

			/**
			 * The method to get the name
			 * @returns {String} A String representing the name
			 */
			getName()	{
				return this.name;

			}

			/**
			 * The method to set the value to name
			 * @param {String} name A String
			 */
			setName(name)	{
				if((name != null) && (!(Object.prototype.toString.call(name) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: name EXPECTED TYPE: String", null, null);
				}
				this.name = name;
				this.keyModified.set("name", 1);

			}

			/**
			 * The method to get the id
			 * @returns {Long} A BigInt representing the id
			 */
			getId()	{
				return this.id;

			}

			/**
			 * The method to set the value to id
			 * @param {Long} id A BigInt
			 */
			setId(id)	{
				if((id != null) && (!(Object.prototype.toString.call(id) == "[object BigInt]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
				}
				this.id = id;
				this.keyModified.set("id", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		CustomizeInfo : class{
			constructor(){

				this.notesDesc=null;
				this.showRightPanel=null;
				this.bcView=null;
				this.showHome=null;
				this.showDetailView=null;
				this.unpinRecentItem=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the notesDesc
			 * @returns {Boolean} A Boolean representing the notesDesc
			 */
			getNotesDesc()	{
				return this.notesDesc;

			}

			/**
			 * The method to set the value to notesDesc
			 * @param {Boolean} notesDesc A Boolean
			 */
			setNotesDesc(notesDesc)	{
				if((notesDesc != null) && (!(Object.prototype.toString.call(notesDesc) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: notesDesc EXPECTED TYPE: Boolean", null, null);
				}
				this.notesDesc = notesDesc;
				this.keyModified.set("notes_desc", 1);

			}

			/**
			 * The method to get the showRightPanel
			 * @returns {String} A String representing the showRightPanel
			 */
			getShowRightPanel()	{
				return this.showRightPanel;

			}

			/**
			 * The method to set the value to showRightPanel
			 * @param {String} showRightPanel A String
			 */
			setShowRightPanel(showRightPanel)	{
				if((showRightPanel != null) && (!(Object.prototype.toString.call(showRightPanel) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: showRightPanel EXPECTED TYPE: String", null, null);
				}
				this.showRightPanel = showRightPanel;
				this.keyModified.set("show_right_panel", 1);

			}

			/**
			 * The method to get the bcView
			 * @returns {String} A String representing the bcView
			 */
			getBcView()	{
				return this.bcView;

			}

			/**
			 * The method to set the value to bcView
			 * @param {String} bcView A String
			 */
			setBcView(bcView)	{
				if((bcView != null) && (!(Object.prototype.toString.call(bcView) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: bcView EXPECTED TYPE: String", null, null);
				}
				this.bcView = bcView;
				this.keyModified.set("bc_view", 1);

			}

			/**
			 * The method to get the showHome
			 * @returns {Boolean} A Boolean representing the showHome
			 */
			getShowHome()	{
				return this.showHome;

			}

			/**
			 * The method to set the value to showHome
			 * @param {Boolean} showHome A Boolean
			 */
			setShowHome(showHome)	{
				if((showHome != null) && (!(Object.prototype.toString.call(showHome) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: showHome EXPECTED TYPE: Boolean", null, null);
				}
				this.showHome = showHome;
				this.keyModified.set("show_home", 1);

			}

			/**
			 * The method to get the showDetailView
			 * @returns {Boolean} A Boolean representing the showDetailView
			 */
			getShowDetailView()	{
				return this.showDetailView;

			}

			/**
			 * The method to set the value to showDetailView
			 * @param {Boolean} showDetailView A Boolean
			 */
			setShowDetailView(showDetailView)	{
				if((showDetailView != null) && (!(Object.prototype.toString.call(showDetailView) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: showDetailView EXPECTED TYPE: Boolean", null, null);
				}
				this.showDetailView = showDetailView;
				this.keyModified.set("show_detail_view", 1);

			}

			/**
			 * The method to get the unpinRecentItem
			 * @returns {String} A String representing the unpinRecentItem
			 */
			getUnpinRecentItem()	{
				return this.unpinRecentItem;

			}

			/**
			 * The method to set the value to unpinRecentItem
			 * @param {String} unpinRecentItem A String
			 */
			setUnpinRecentItem(unpinRecentItem)	{
				if((unpinRecentItem != null) && (!(Object.prototype.toString.call(unpinRecentItem) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: unpinRecentItem EXPECTED TYPE: String", null, null);
				}
				this.unpinRecentItem = unpinRecentItem;
				this.keyModified.set("unpin_recent_item", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		Theme : class{
			constructor(){

				this.normalTab=null;
				this.selectedTab=null;
				this.newBackground=null;
				this.background=null;
				this.screen=null;
				this.type=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the normalTab
			 * @returns {TabTheme} An instance of TabTheme
			 */
			getNormalTab()	{
				return this.normalTab;

			}

			/**
			 * The method to set the value to normalTab
			 * @param {TabTheme} normalTab An instance of TabTheme
			 */
			setNormalTab(normalTab)	{
				if((normalTab != null) && (!(normalTab instanceof ZCRM.User.Model.TabTheme))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: normalTab EXPECTED TYPE: TabTheme", null, null);
				}
				this.normalTab = normalTab;
				this.keyModified.set("normal_tab", 1);

			}

			/**
			 * The method to get the selectedTab
			 * @returns {TabTheme} An instance of TabTheme
			 */
			getSelectedTab()	{
				return this.selectedTab;

			}

			/**
			 * The method to set the value to selectedTab
			 * @param {TabTheme} selectedTab An instance of TabTheme
			 */
			setSelectedTab(selectedTab)	{
				if((selectedTab != null) && (!(selectedTab instanceof ZCRM.User.Model.TabTheme))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: selectedTab EXPECTED TYPE: TabTheme", null, null);
				}
				this.selectedTab = selectedTab;
				this.keyModified.set("selected_tab", 1);

			}

			/**
			 * The method to get the newBackground
			 * @returns {String} A String representing the newBackground
			 */
			getNewBackground()	{
				return this.newBackground;

			}

			/**
			 * The method to set the value to newBackground
			 * @param {String} newBackground A String
			 */
			setNewBackground(newBackground)	{
				if((newBackground != null) && (!(Object.prototype.toString.call(newBackground) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: newBackground EXPECTED TYPE: String", null, null);
				}
				this.newBackground = newBackground;
				this.keyModified.set("new_background", 1);

			}

			/**
			 * The method to get the background
			 * @returns {String} A String representing the background
			 */
			getBackground()	{
				return this.background;

			}

			/**
			 * The method to set the value to background
			 * @param {String} background A String
			 */
			setBackground(background)	{
				if((background != null) && (!(Object.prototype.toString.call(background) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: background EXPECTED TYPE: String", null, null);
				}
				this.background = background;
				this.keyModified.set("background", 1);

			}

			/**
			 * The method to get the screen
			 * @returns {String} A String representing the screen
			 */
			getScreen()	{
				return this.screen;

			}

			/**
			 * The method to set the value to screen
			 * @param {String} screen A String
			 */
			setScreen(screen)	{
				if((screen != null) && (!(Object.prototype.toString.call(screen) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: screen EXPECTED TYPE: String", null, null);
				}
				this.screen = screen;
				this.keyModified.set("screen", 1);

			}

			/**
			 * The method to get the type
			 * @returns {String} A String representing the type
			 */
			getType()	{
				return this.type;

			}

			/**
			 * The method to set the value to type
			 * @param {String} type A String
			 */
			setType(type)	{
				if((type != null) && (!(Object.prototype.toString.call(type) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: type EXPECTED TYPE: String", null, null);
				}
				this.type = type;
				this.keyModified.set("type", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		BodyWrapper : class{
			constructor(){

				this.users=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the users
			 * @returns {List} An Array representing the users
			 */
			getUsers()	{
				return this.users;

			}

			/**
			 * The method to set the value to users
			 * @param {List} users An Array
			 */
			setUsers(users)	{
				if((users != null) && (!(Object.prototype.toString.call(users) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: users EXPECTED TYPE: Array", null, null);
				}
				this.users = users;
				this.keyModified.set("users", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		Info : class{
			constructor(){

				this.perPage=null;
				this.count=null;
				this.page=null;
				this.moreRecords=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the perPage
			 * @returns {Integer} An Integer representing the perPage
			 */
			getPerPage()	{
				return this.perPage;

			}

			/**
			 * The method to set the value to perPage
			 * @param {Integer} perPage An Integer
			 */
			setPerPage(perPage)	{
				if((perPage != null) && (!(Object.prototype.toString.call(perPage) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: perPage EXPECTED TYPE: Integer", null, null);
				}
				this.perPage = perPage;
				this.keyModified.set("per_page", 1);

			}

			/**
			 * The method to get the count
			 * @returns {Integer} An Integer representing the count
			 */
			getCount()	{
				return this.count;

			}

			/**
			 * The method to set the value to count
			 * @param {Integer} count An Integer
			 */
			setCount(count)	{
				if((count != null) && (!(Object.prototype.toString.call(count) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: count EXPECTED TYPE: Integer", null, null);
				}
				this.count = count;
				this.keyModified.set("count", 1);

			}

			/**
			 * The method to get the page
			 * @returns {Integer} An Integer representing the page
			 */
			getPage()	{
				return this.page;

			}

			/**
			 * The method to set the value to page
			 * @param {Integer} page An Integer
			 */
			setPage(page)	{
				if((page != null) && (!(Object.prototype.toString.call(page) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: page EXPECTED TYPE: Integer", null, null);
				}
				this.page = page;
				this.keyModified.set("page", 1);

			}

			/**
			 * The method to get the moreRecords
			 * @returns {Boolean} A Boolean representing the moreRecords
			 */
			getMoreRecords()	{
				return this.moreRecords;

			}

			/**
			 * The method to set the value to moreRecords
			 * @param {Boolean} moreRecords A Boolean
			 */
			setMoreRecords(moreRecords)	{
				if((moreRecords != null) && (!(Object.prototype.toString.call(moreRecords) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: moreRecords EXPECTED TYPE: Boolean", null, null);
				}
				this.moreRecords = moreRecords;
				this.keyModified.set("more_records", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		Shift : class{
			constructor(){

				this.id=null;
				this.name=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the id
			 * @returns {Long} A BigInt representing the id
			 */
			getId()	{
				return this.id;

			}

			/**
			 * The method to set the value to id
			 * @param {Long} id A BigInt
			 */
			setId(id)	{
				if((id != null) && (!(Object.prototype.toString.call(id) == "[object BigInt]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
				}
				this.id = id;
				this.keyModified.set("id", 1);

			}

			/**
			 * The method to get the name
			 * @returns {String} A String representing the name
			 */
			getName()	{
				return this.name;

			}

			/**
			 * The method to set the value to name
			 * @param {String} name A String
			 */
			setName(name)	{
				if((name != null) && (!(Object.prototype.toString.call(name) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: name EXPECTED TYPE: String", null, null);
				}
				this.name = name;
				this.keyModified.set("name", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		RequestWrapper : class{
			constructor(){

				this.users=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the users
			 * @returns {List} An Array representing the users
			 */
			getUsers()	{
				return this.users;

			}

			/**
			 * The method to set the value to users
			 * @param {List} users An Array
			 */
			setUsers(users)	{
				if((users != null) && (!(Object.prototype.toString.call(users) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: users EXPECTED TYPE: Array", null, null);
				}
				this.users = users;
				this.keyModified.set("users", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		User : class extends ZCRM.Record.Model.Record{
			constructor(){
				super();

			}



			/**
			 * The method to get the country
			 * @returns {String} A String representing the country
			 */
			getCountry()	{
				return this.getKeyValue("country");

			}

			/**
			 * The method to set the value to country
			 * @param {String} country A String
			 */
			setCountry(country)	{
				if((country != null) && (!(Object.prototype.toString.call(country) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: country EXPECTED TYPE: String", null, null);
				}
				this.addKeyValue("country", country);

			}

			/**
			 * The method to get the customizeInfo
			 * @returns {CustomizeInfo} An instance of CustomizeInfo
			 */
			getCustomizeInfo()	{
				return this.getKeyValue("customize_info");

			}

			/**
			 * The method to set the value to customizeInfo
			 * @param {CustomizeInfo} customizeInfo An instance of CustomizeInfo
			 */
			setCustomizeInfo(customizeInfo)	{
				if((customizeInfo != null) && (!(customizeInfo instanceof ZCRM.User.Model.CustomizeInfo))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: customizeInfo EXPECTED TYPE: CustomizeInfo", null, null);
				}
				this.addKeyValue("customize_info", customizeInfo);

			}

			/**
			 * The method to get the role
			 * @returns {Role} An instance of Role
			 */
			getRole()	{
				return this.getKeyValue("role");

			}

			/**
			 * The method to set the value to role
			 * @param {Role} role An instance of Role
			 */
			setRole(role)	{
				if((role != null) && (!(role instanceof ZCRM.Role.Model.Role))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: role EXPECTED TYPE: Role", null, null);
				}
				this.addKeyValue("role", role);

			}

			/**
			 * The method to get the signature
			 * @returns {String} A String representing the signature
			 */
			getSignature()	{
				return this.getKeyValue("signature");

			}

			/**
			 * The method to set the value to signature
			 * @param {String} signature A String
			 */
			setSignature(signature)	{
				if((signature != null) && (!(Object.prototype.toString.call(signature) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: signature EXPECTED TYPE: String", null, null);
				}
				this.addKeyValue("signature", signature);

			}

			/**
			 * The method to get the city
			 * @returns {String} A String representing the city
			 */
			getCity()	{
				return this.getKeyValue("city");

			}

			/**
			 * The method to set the value to city
			 * @param {String} city A String
			 */
			setCity(city)	{
				if((city != null) && (!(Object.prototype.toString.call(city) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: city EXPECTED TYPE: String", null, null);
				}
				this.addKeyValue("city", city);

			}

			/**
			 * The method to get the nameFormat
			 * @returns {String} A String representing the nameFormat
			 */
			getNameFormat()	{
				return this.getKeyValue("name_format");

			}

			/**
			 * The method to set the value to nameFormat
			 * @param {String} nameFormat A String
			 */
			setNameFormat(nameFormat)	{
				if((nameFormat != null) && (!(Object.prototype.toString.call(nameFormat) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: nameFormat EXPECTED TYPE: String", null, null);
				}
				this.addKeyValue("name_format", nameFormat);

			}

			/**
			 * The method to get the personalAccount
			 * @returns {Boolean} A Boolean representing the personalAccount
			 */
			getPersonalAccount()	{
				return this.getKeyValue("personal_account");

			}

			/**
			 * The method to set the value to personalAccount
			 * @param {Boolean} personalAccount A Boolean
			 */
			setPersonalAccount(personalAccount)	{
				if((personalAccount != null) && (!(Object.prototype.toString.call(personalAccount) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: personalAccount EXPECTED TYPE: Boolean", null, null);
				}
				this.addKeyValue("personal_account", personalAccount);

			}

			/**
			 * The method to get the defaultTabGroup
			 * @returns {String} A String representing the defaultTabGroup
			 */
			getDefaultTabGroup()	{
				return this.getKeyValue("default_tab_group");

			}

			/**
			 * The method to set the value to defaultTabGroup
			 * @param {String} defaultTabGroup A String
			 */
			setDefaultTabGroup(defaultTabGroup)	{
				if((defaultTabGroup != null) && (!(Object.prototype.toString.call(defaultTabGroup) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: defaultTabGroup EXPECTED TYPE: String", null, null);
				}
				this.addKeyValue("default_tab_group", defaultTabGroup);

			}

			/**
			 * The method to get the language
			 * @returns {String} A String representing the language
			 */
			getLanguage()	{
				return this.getKeyValue("language");

			}

			/**
			 * The method to set the value to language
			 * @param {String} language A String
			 */
			setLanguage(language)	{
				if((language != null) && (!(Object.prototype.toString.call(language) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: language EXPECTED TYPE: String", null, null);
				}
				this.addKeyValue("language", language);

			}

			/**
			 * The method to get the locale
			 * @returns {String} A String representing the locale
			 */
			getLocale()	{
				return this.getKeyValue("locale");

			}

			/**
			 * The method to set the value to locale
			 * @param {String} locale A String
			 */
			setLocale(locale)	{
				if((locale != null) && (!(Object.prototype.toString.call(locale) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: locale EXPECTED TYPE: String", null, null);
				}
				this.addKeyValue("locale", locale);

			}

			/**
			 * The method to get the microsoft
			 * @returns {Boolean} A Boolean representing the microsoft
			 */
			getMicrosoft()	{
				return this.getKeyValue("microsoft");

			}

			/**
			 * The method to set the value to microsoft
			 * @param {Boolean} microsoft A Boolean
			 */
			setMicrosoft(microsoft)	{
				if((microsoft != null) && (!(Object.prototype.toString.call(microsoft) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: microsoft EXPECTED TYPE: Boolean", null, null);
				}
				this.addKeyValue("microsoft", microsoft);

			}

			/**
			 * The method to get the isonline
			 * @returns {Boolean} A Boolean representing the isonline
			 */
			getIsonline()	{
				return this.getKeyValue("Isonline");

			}

			/**
			 * The method to set the value to isonline
			 * @param {Boolean} isonline A Boolean
			 */
			setIsonline(isonline)	{
				if((isonline != null) && (!(Object.prototype.toString.call(isonline) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: isonline EXPECTED TYPE: Boolean", null, null);
				}
				this.addKeyValue("Isonline", isonline);

			}

			/**
			 * The method to get the street
			 * @returns {String} A String representing the street
			 */
			getStreet()	{
				return this.getKeyValue("street");

			}

			/**
			 * The method to set the value to street
			 * @param {String} street A String
			 */
			setStreet(street)	{
				if((street != null) && (!(Object.prototype.toString.call(street) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: street EXPECTED TYPE: String", null, null);
				}
				this.addKeyValue("street", street);

			}

			/**
			 * The method to get the currency
			 * @returns {String} A String representing the currency
			 */
			getCurrency()	{
				return this.getKeyValue("Currency");

			}

			/**
			 * The method to set the value to currency
			 * @param {String} currency A String
			 */
			setCurrency(currency)	{
				if((currency != null) && (!(Object.prototype.toString.call(currency) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: currency EXPECTED TYPE: String", null, null);
				}
				this.addKeyValue("Currency", currency);

			}

			/**
			 * The method to get the alias
			 * @returns {String} A String representing the alias
			 */
			getAlias()	{
				return this.getKeyValue("alias");

			}

			/**
			 * The method to set the value to alias
			 * @param {String} alias A String
			 */
			setAlias(alias)	{
				if((alias != null) && (!(Object.prototype.toString.call(alias) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: alias EXPECTED TYPE: String", null, null);
				}
				this.addKeyValue("alias", alias);

			}

			/**
			 * The method to get the theme
			 * @returns {Theme} An instance of Theme
			 */
			getTheme()	{
				return this.getKeyValue("theme");

			}

			/**
			 * The method to set the value to theme
			 * @param {Theme} theme An instance of Theme
			 */
			setTheme(theme)	{
				if((theme != null) && (!(theme instanceof ZCRM.User.Model.Theme))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: theme EXPECTED TYPE: Theme", null, null);
				}
				this.addKeyValue("theme", theme);

			}

			/**
			 * The method to get the state
			 * @returns {String} A String representing the state
			 */
			getState()	{
				return this.getKeyValue("state");

			}

			/**
			 * The method to set the value to state
			 * @param {String} state A String
			 */
			setState(state)	{
				if((state != null) && (!(Object.prototype.toString.call(state) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: state EXPECTED TYPE: String", null, null);
				}
				this.addKeyValue("state", state);

			}

			/**
			 * The method to get the fax
			 * @returns {String} A String representing the fax
			 */
			getFax()	{
				return this.getKeyValue("fax");

			}

			/**
			 * The method to set the value to fax
			 * @param {String} fax A String
			 */
			setFax(fax)	{
				if((fax != null) && (!(Object.prototype.toString.call(fax) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: fax EXPECTED TYPE: String", null, null);
				}
				this.addKeyValue("fax", fax);

			}

			/**
			 * The method to get the countryLocale
			 * @returns {String} A String representing the countryLocale
			 */
			getCountryLocale()	{
				return this.getKeyValue("country_locale");

			}

			/**
			 * The method to set the value to countryLocale
			 * @param {String} countryLocale A String
			 */
			setCountryLocale(countryLocale)	{
				if((countryLocale != null) && (!(Object.prototype.toString.call(countryLocale) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: countryLocale EXPECTED TYPE: String", null, null);
				}
				this.addKeyValue("country_locale", countryLocale);

			}

			/**
			 * The method to get the firstName
			 * @returns {String} A String representing the firstName
			 */
			getFirstName()	{
				return this.getKeyValue("first_name");

			}

			/**
			 * The method to set the value to firstName
			 * @param {String} firstName A String
			 */
			setFirstName(firstName)	{
				if((firstName != null) && (!(Object.prototype.toString.call(firstName) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: firstName EXPECTED TYPE: String", null, null);
				}
				this.addKeyValue("first_name", firstName);

			}

			/**
			 * The method to get the email
			 * @returns {String} A String representing the email
			 */
			getEmail()	{
				return this.getKeyValue("email");

			}

			/**
			 * The method to set the value to email
			 * @param {String} email A String
			 */
			setEmail(email)	{
				if((email != null) && (!(Object.prototype.toString.call(email) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: email EXPECTED TYPE: String", null, null);
				}
				this.addKeyValue("email", email);

			}

			/**
			 * The method to get the reportingTo
			 * @returns {User} An instance of User
			 */
			getReportingTo()	{
				return this.getKeyValue("Reporting_To");

			}

			/**
			 * The method to set the value to reportingTo
			 * @param {User} reportingTo An instance of User
			 */
			setReportingTo(reportingTo)	{
				if((reportingTo != null) && (!(reportingTo instanceof ZCRM.User.Model.User))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: reportingTo EXPECTED TYPE: User", null, null);
				}
				this.addKeyValue("Reporting_To", reportingTo);

			}

			/**
			 * The method to get the decimalSeparator
			 * @returns {String} A String representing the decimalSeparator
			 */
			getDecimalSeparator()	{
				return this.getKeyValue("decimal_separator");

			}

			/**
			 * The method to set the value to decimalSeparator
			 * @param {String} decimalSeparator A String
			 */
			setDecimalSeparator(decimalSeparator)	{
				if((decimalSeparator != null) && (!(Object.prototype.toString.call(decimalSeparator) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: decimalSeparator EXPECTED TYPE: String", null, null);
				}
				this.addKeyValue("decimal_separator", decimalSeparator);

			}

			/**
			 * The method to get the zip
			 * @returns {String} A String representing the zip
			 */
			getZip()	{
				return this.getKeyValue("zip");

			}

			/**
			 * The method to set the value to zip
			 * @param {String} zip A String
			 */
			setZip(zip)	{
				if((zip != null) && (!(Object.prototype.toString.call(zip) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: zip EXPECTED TYPE: String", null, null);
				}
				this.addKeyValue("zip", zip);

			}

			/**
			 * The method to get the website
			 * @returns {String} A String representing the website
			 */
			getWebsite()	{
				return this.getKeyValue("website");

			}

			/**
			 * The method to set the value to website
			 * @param {String} website A String
			 */
			setWebsite(website)	{
				if((website != null) && (!(Object.prototype.toString.call(website) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: website EXPECTED TYPE: String", null, null);
				}
				this.addKeyValue("website", website);

			}

			/**
			 * The method to get the timeFormat
			 * @returns {String} A String representing the timeFormat
			 */
			getTimeFormat()	{
				return this.getKeyValue("time_format");

			}

			/**
			 * The method to set the value to timeFormat
			 * @param {String} timeFormat A String
			 */
			setTimeFormat(timeFormat)	{
				if((timeFormat != null) && (!(Object.prototype.toString.call(timeFormat) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: timeFormat EXPECTED TYPE: String", null, null);
				}
				this.addKeyValue("time_format", timeFormat);

			}

			/**
			 * The method to get the offset
			 * @returns {Long} A BigInt representing the offset
			 */
			getOffset()	{
				return this.getKeyValue("offset");

			}

			/**
			 * The method to set the value to offset
			 * @param {Long} offset A BigInt
			 */
			setOffset(offset)	{
				if((offset != null) && (!(Object.prototype.toString.call(offset) == "[object BigInt]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: offset EXPECTED TYPE: BigInt", null, null);
				}
				this.addKeyValue("offset", offset);

			}

			/**
			 * The method to get the profile
			 * @returns {Profile} An instance of Profile
			 */
			getProfile()	{
				return this.getKeyValue("profile");

			}

			/**
			 * The method to set the value to profile
			 * @param {Profile} profile An instance of Profile
			 */
			setProfile(profile)	{
				if((profile != null) && (!(profile instanceof ZCRM.Profile.Model.Profile))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: profile EXPECTED TYPE: Profile", null, null);
				}
				this.addKeyValue("profile", profile);

			}

			/**
			 * The method to get the mobile
			 * @returns {String} A String representing the mobile
			 */
			getMobile()	{
				return this.getKeyValue("mobile");

			}

			/**
			 * The method to set the value to mobile
			 * @param {String} mobile A String
			 */
			setMobile(mobile)	{
				if((mobile != null) && (!(Object.prototype.toString.call(mobile) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: mobile EXPECTED TYPE: String", null, null);
				}
				this.addKeyValue("mobile", mobile);

			}

			/**
			 * The method to get the lastName
			 * @returns {String} A String representing the lastName
			 */
			getLastName()	{
				return this.getKeyValue("last_name");

			}

			/**
			 * The method to set the value to lastName
			 * @param {String} lastName A String
			 */
			setLastName(lastName)	{
				if((lastName != null) && (!(Object.prototype.toString.call(lastName) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: lastName EXPECTED TYPE: String", null, null);
				}
				this.addKeyValue("last_name", lastName);

			}

			/**
			 * The method to get the timeZone
			 * @returns {String} A String representing the timeZone
			 */
			getTimeZone()	{
				return this.getKeyValue("time_zone");

			}

			/**
			 * The method to set the value to timeZone
			 * @param {String} timeZone A String
			 */
			setTimeZone(timeZone)	{
				if((timeZone != null) && (!(Object.prototype.toString.call(timeZone) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: timeZone EXPECTED TYPE: String", null, null);
				}
				this.addKeyValue("time_zone", timeZone);

			}

			/**
			 * The method to get the zuid
			 * @returns {String} A String representing the zuid
			 */
			getZuid()	{
				return this.getKeyValue("zuid");

			}

			/**
			 * The method to set the value to zuid
			 * @param {String} zuid A String
			 */
			setZuid(zuid)	{
				if((zuid != null) && (!(Object.prototype.toString.call(zuid) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: zuid EXPECTED TYPE: String", null, null);
				}
				this.addKeyValue("zuid", zuid);

			}

			/**
			 * The method to get the confirm
			 * @returns {Boolean} A Boolean representing the confirm
			 */
			getConfirm()	{
				return this.getKeyValue("confirm");

			}

			/**
			 * The method to set the value to confirm
			 * @param {Boolean} confirm A Boolean
			 */
			setConfirm(confirm)	{
				if((confirm != null) && (!(Object.prototype.toString.call(confirm) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: confirm EXPECTED TYPE: Boolean", null, null);
				}
				this.addKeyValue("confirm", confirm);

			}

			/**
			 * The method to get the fullName
			 * @returns {String} A String representing the fullName
			 */
			getFullName()	{
				return this.getKeyValue("full_name");

			}

			/**
			 * The method to set the value to fullName
			 * @param {String} fullName A String
			 */
			setFullName(fullName)	{
				if((fullName != null) && (!(Object.prototype.toString.call(fullName) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: fullName EXPECTED TYPE: String", null, null);
				}
				this.addKeyValue("full_name", fullName);

			}

			/**
			 * The method to get the territories
			 * @returns {List} An Array representing the territories
			 */
			getTerritories()	{
				return this.getKeyValue("territories");

			}

			/**
			 * The method to set the value to territories
			 * @param {List} territories An Array
			 */
			setTerritories(territories)	{
				if((territories != null) && (!(Object.prototype.toString.call(territories) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: territories EXPECTED TYPE: Array", null, null);
				}
				this.addKeyValue("territories", territories);

			}

			/**
			 * The method to get the phone
			 * @returns {String} A String representing the phone
			 */
			getPhone()	{
				return this.getKeyValue("phone");

			}

			/**
			 * The method to set the value to phone
			 * @param {String} phone A String
			 */
			setPhone(phone)	{
				if((phone != null) && (!(Object.prototype.toString.call(phone) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: phone EXPECTED TYPE: String", null, null);
				}
				this.addKeyValue("phone", phone);

			}

			/**
			 * The method to get the dob
			 * @returns {String} A String representing the dob
			 */
			getDob()	{
				return this.getKeyValue("dob");

			}

			/**
			 * The method to set the value to dob
			 * @param {String} dob A String
			 */
			setDob(dob)	{
				if((dob != null) && (!(Object.prototype.toString.call(dob) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: dob EXPECTED TYPE: String", null, null);
				}
				this.addKeyValue("dob", dob);

			}

			/**
			 * The method to get the dateFormat
			 * @returns {String} A String representing the dateFormat
			 */
			getDateFormat()	{
				return this.getKeyValue("date_format");

			}

			/**
			 * The method to set the value to dateFormat
			 * @param {String} dateFormat A String
			 */
			setDateFormat(dateFormat)	{
				if((dateFormat != null) && (!(Object.prototype.toString.call(dateFormat) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: dateFormat EXPECTED TYPE: String", null, null);
				}
				this.addKeyValue("date_format", dateFormat);

			}

			/**
			 * The method to get the status
			 * @returns {String} A String representing the status
			 */
			getStatus()	{
				return this.getKeyValue("status");

			}

			/**
			 * The method to set the value to status
			 * @param {String} status A String
			 */
			setStatus(status)	{
				if((status != null) && (!(Object.prototype.toString.call(status) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: String", null, null);
				}
				this.addKeyValue("status", status);

			}

			/**
			 * The method to get the name
			 * @returns {String} A String representing the name
			 */
			getName()	{
				return this.getKeyValue("name");

			}

			/**
			 * The method to set the value to name
			 * @param {String} name A String
			 */
			setName(name)	{
				if((name != null) && (!(Object.prototype.toString.call(name) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: name EXPECTED TYPE: String", null, null);
				}
				this.addKeyValue("name", name);

			}
		},

		APIException : class{
			constructor(){

				this.status=null;
				this.code=null;
				this.message=null;
				this.details=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		TabTheme : class{
			constructor(){

				this.fontColor=null;
				this.background=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the fontColor
			 * @returns {String} A String representing the fontColor
			 */
			getFontColor()	{
				return this.fontColor;

			}

			/**
			 * The method to set the value to fontColor
			 * @param {String} fontColor A String
			 */
			setFontColor(fontColor)	{
				if((fontColor != null) && (!(Object.prototype.toString.call(fontColor) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: fontColor EXPECTED TYPE: String", null, null);
				}
				this.fontColor = fontColor;
				this.keyModified.set("font_color", 1);

			}

			/**
			 * The method to get the background
			 * @returns {String} A String representing the background
			 */
			getBackground()	{
				return this.background;

			}

			/**
			 * The method to set the value to background
			 * @param {String} background A String
			 */
			setBackground(background)	{
				if((background != null) && (!(Object.prototype.toString.call(background) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: background EXPECTED TYPE: String", null, null);
				}
				this.background = background;
				this.keyModified.set("background", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		GetUsersHeader : {
			IF_MODIFIED_SINCE : 	new Header("If-Modified-Since", "User.Model.GetUsersHeader"),


		},

		GetUsersParam : {
			TYPE : 	new Param("type", "User.Model.GetUsersParam"),

			PAGE : 	new Param("page", "User.Model.GetUsersParam"),

			PER_PAGE : 	new Param("per_page", "User.Model.GetUsersParam"),


		},

		GetUserHeader : {
			IF_MODIFIED_SINCE : 	new Header("If-Modified-Since", "User.Model.GetUserHeader"),


		}
	},
	Operations : class {
		constructor(){

		}

		/**
		 * The method to get users
		 * @param {ParameterMap} paramInstance An instance of ParameterMap
		 * @param {HeaderMap} headerInstance An instance of HeaderMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getUsers(paramInstance=null, headerInstance=null){
			if((paramInstance != null) && (!(paramInstance instanceof ParameterMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paramInstance EXPECTED TYPE: ParameterMap", null, null);
			}
			if((headerInstance != null) && (!(headerInstance instanceof HeaderMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: headerInstance EXPECTED TYPE: HeaderMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/users");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			handlerInstance.setParam(paramInstance);
			handlerInstance.setHeader(headerInstance);
			return handlerInstance.apiCall("User.Model.ResponseHandler", "application/json");

		}

		/**
		 * The method to create user
		 * @param {RequestWrapper} request An instance of RequestWrapper
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async createUser(request){
			if((request != null) && (!(request instanceof ZCRM.User.Model.RequestWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: RequestWrapper", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/users");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_POST);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_CREATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			handlerInstance.setMandatoryChecker(true);
			return handlerInstance.apiCall("User.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to update users
		 * @param {BodyWrapper} request An instance of BodyWrapper
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async updateUsers(request){
			if((request != null) && (!(request instanceof ZCRM.User.Model.BodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: BodyWrapper", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/users");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_PUT);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_UPDATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			handlerInstance.setMandatoryChecker(true);
			return handlerInstance.apiCall("User.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to get user
		 * @param {Long} id A BigInt
		 * @param {HeaderMap} headerInstance An instance of HeaderMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getUser(id, headerInstance=null){
			if((!(Object.prototype.toString.call(id) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
			}
			if((headerInstance != null) && (!(headerInstance instanceof HeaderMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: headerInstance EXPECTED TYPE: HeaderMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/users/");
			apiPath = apiPath.concat(id.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			handlerInstance.setHeader(headerInstance);
			return handlerInstance.apiCall("User.Model.ResponseHandler", "application/json");

		}

		/**
		 * The method to update user
		 * @param {Long} id A BigInt
		 * @param {BodyWrapper} request An instance of BodyWrapper
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async updateUser(id, request){
			if((!(Object.prototype.toString.call(id) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
			}
			if((request != null) && (!(request instanceof ZCRM.User.Model.BodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: BodyWrapper", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/users/");
			apiPath = apiPath.concat(id.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_PUT);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_UPDATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			return handlerInstance.apiCall("User.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to delete user
		 * @param {Long} id A BigInt
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async deleteUser(id){
			if((!(Object.prototype.toString.call(id) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/users/");
			apiPath = apiPath.concat(id.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_DELETE);
			handlerInstance.setCategoryMethod(Constants.REQUEST_METHOD_DELETE);
			return handlerInstance.apiCall("User.Model.ActionHandler", "application/json");

		}
	},

}

ZCRM.BulkWrite = {
	Model : {
		ActionResponse : class{
			constructor(){

			}


		},

		ResponseHandler : class{
			constructor(){

			}


		},

		ResponseWrapper : class{
			constructor(){

			}


		},

		CallBack : class{
			constructor(){

				this.url=null;
				this.method=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the url
			 * @returns {String} A String representing the url
			 */
			getUrl()	{
				return this.url;

			}

			/**
			 * The method to set the value to url
			 * @param {String} url A String
			 */
			setUrl(url)	{
				if((url != null) && (!(Object.prototype.toString.call(url) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: url EXPECTED TYPE: String", null, null);
				}
				this.url = url;
				this.keyModified.set("url", 1);

			}

			/**
			 * The method to get the method
			 * @returns {Choice} An instance of Choice
			 */
			getMethod()	{
				return this.method;

			}

			/**
			 * The method to set the value to method
			 * @param {Choice} method An instance of Choice
			 */
			setMethod(method)	{
				if((method != null) && (!(method instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: method EXPECTED TYPE: Choice", null, null);
				}
				this.method = method;
				this.keyModified.set("method", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		SuccessResponse : class{
			constructor(){

				this.status=null;
				this.code=null;
				this.message=null;
				this.details=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		RequestWrapper : class{
			constructor(){

				this.characterEncoding=null;
				this.operation=null;
				this.callback=null;
				this.resource=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the characterEncoding
			 * @returns {String} A String representing the characterEncoding
			 */
			getCharacterEncoding()	{
				return this.characterEncoding;

			}

			/**
			 * The method to set the value to characterEncoding
			 * @param {String} characterEncoding A String
			 */
			setCharacterEncoding(characterEncoding)	{
				if((characterEncoding != null) && (!(Object.prototype.toString.call(characterEncoding) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: characterEncoding EXPECTED TYPE: String", null, null);
				}
				this.characterEncoding = characterEncoding;
				this.keyModified.set("character_encoding", 1);

			}

			/**
			 * The method to get the operation
			 * @returns {Choice} An instance of Choice
			 */
			getOperation()	{
				return this.operation;

			}

			/**
			 * The method to set the value to operation
			 * @param {Choice} operation An instance of Choice
			 */
			setOperation(operation)	{
				if((operation != null) && (!(operation instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: operation EXPECTED TYPE: Choice", null, null);
				}
				this.operation = operation;
				this.keyModified.set("operation", 1);

			}

			/**
			 * The method to get the callback
			 * @returns {CallBack} An instance of CallBack
			 */
			getCallback()	{
				return this.callback;

			}

			/**
			 * The method to set the value to callback
			 * @param {CallBack} callback An instance of CallBack
			 */
			setCallback(callback)	{
				if((callback != null) && (!(callback instanceof ZCRM.BulkWrite.Model.CallBack))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: callback EXPECTED TYPE: CallBack", null, null);
				}
				this.callback = callback;
				this.keyModified.set("callback", 1);

			}

			/**
			 * The method to get the resource
			 * @returns {List} An Array representing the resource
			 */
			getResource()	{
				return this.resource;

			}

			/**
			 * The method to set the value to resource
			 * @param {List} resource An Array
			 */
			setResource(resource)	{
				if((resource != null) && (!(Object.prototype.toString.call(resource) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: resource EXPECTED TYPE: Array", null, null);
				}
				this.resource = resource;
				this.keyModified.set("resource", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		APIException : class{
			constructor(){

				this.code=null;
				this.message=null;
				this.status=null;
				this.details=null;
				this.errorMessage=null;
				this.errorCode=null;
				this.xError=null;
				this.info=null;
				this.xInfo=null;
				this.httpStatus=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to get the errorMessage
			 * @returns {Choice} An instance of Choice
			 */
			getErrorMessage()	{
				return this.errorMessage;

			}

			/**
			 * The method to set the value to errorMessage
			 * @param {Choice} errorMessage An instance of Choice
			 */
			setErrorMessage(errorMessage)	{
				if((errorMessage != null) && (!(errorMessage instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: errorMessage EXPECTED TYPE: Choice", null, null);
				}
				this.errorMessage = errorMessage;
				this.keyModified.set("ERROR_MESSAGE", 1);

			}

			/**
			 * The method to get the errorCode
			 * @returns {Integer} An Integer representing the errorCode
			 */
			getErrorCode()	{
				return this.errorCode;

			}

			/**
			 * The method to set the value to errorCode
			 * @param {Integer} errorCode An Integer
			 */
			setErrorCode(errorCode)	{
				if((errorCode != null) && (!(Object.prototype.toString.call(errorCode) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: errorCode EXPECTED TYPE: Integer", null, null);
				}
				this.errorCode = errorCode;
				this.keyModified.set("ERROR_CODE", 1);

			}

			/**
			 * The method to get the xError
			 * @returns {Choice} An instance of Choice
			 */
			getXError()	{
				return this.xError;

			}

			/**
			 * The method to set the value to xError
			 * @param {Choice} xError An instance of Choice
			 */
			setXError(xError)	{
				if((xError != null) && (!(xError instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: xError EXPECTED TYPE: Choice", null, null);
				}
				this.xError = xError;
				this.keyModified.set("x-error", 1);

			}

			/**
			 * The method to get the info
			 * @returns {Choice} An instance of Choice
			 */
			getInfo()	{
				return this.info;

			}

			/**
			 * The method to set the value to info
			 * @param {Choice} info An instance of Choice
			 */
			setInfo(info)	{
				if((info != null) && (!(info instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: info EXPECTED TYPE: Choice", null, null);
				}
				this.info = info;
				this.keyModified.set("info", 1);

			}

			/**
			 * The method to get the xInfo
			 * @returns {Choice} An instance of Choice
			 */
			getXInfo()	{
				return this.xInfo;

			}

			/**
			 * The method to set the value to xInfo
			 * @param {Choice} xInfo An instance of Choice
			 */
			setXInfo(xInfo)	{
				if((xInfo != null) && (!(xInfo instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: xInfo EXPECTED TYPE: Choice", null, null);
				}
				this.xInfo = xInfo;
				this.keyModified.set("x-info", 1);

			}

			/**
			 * The method to get the httpStatus
			 * @returns {String} A String representing the httpStatus
			 */
			getHttpStatus()	{
				return this.httpStatus;

			}

			/**
			 * The method to set the value to httpStatus
			 * @param {String} httpStatus A String
			 */
			setHttpStatus(httpStatus)	{
				if((httpStatus != null) && (!(Object.prototype.toString.call(httpStatus) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: httpStatus EXPECTED TYPE: String", null, null);
				}
				this.httpStatus = httpStatus;
				this.keyModified.set("http_status", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		BulkWriteResponse : class{
			constructor(){

				this.status=null;
				this.characterEncoding=null;
				this.resource=null;
				this.id=null;
				this.callback=null;
				this.result=null;
				this.createdBy=null;
				this.operation=null;
				this.createdTime=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the status
			 * @returns {String} A String representing the status
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {String} status A String
			 */
			setStatus(status)	{
				if((status != null) && (!(Object.prototype.toString.call(status) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: String", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the characterEncoding
			 * @returns {String} A String representing the characterEncoding
			 */
			getCharacterEncoding()	{
				return this.characterEncoding;

			}

			/**
			 * The method to set the value to characterEncoding
			 * @param {String} characterEncoding A String
			 */
			setCharacterEncoding(characterEncoding)	{
				if((characterEncoding != null) && (!(Object.prototype.toString.call(characterEncoding) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: characterEncoding EXPECTED TYPE: String", null, null);
				}
				this.characterEncoding = characterEncoding;
				this.keyModified.set("character_encoding", 1);

			}

			/**
			 * The method to get the resource
			 * @returns {List} An Array representing the resource
			 */
			getResource()	{
				return this.resource;

			}

			/**
			 * The method to set the value to resource
			 * @param {List} resource An Array
			 */
			setResource(resource)	{
				if((resource != null) && (!(Object.prototype.toString.call(resource) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: resource EXPECTED TYPE: Array", null, null);
				}
				this.resource = resource;
				this.keyModified.set("resource", 1);

			}

			/**
			 * The method to get the id
			 * @returns {Long} A BigInt representing the id
			 */
			getId()	{
				return this.id;

			}

			/**
			 * The method to set the value to id
			 * @param {Long} id A BigInt
			 */
			setId(id)	{
				if((id != null) && (!(Object.prototype.toString.call(id) == "[object BigInt]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
				}
				this.id = id;
				this.keyModified.set("id", 1);

			}

			/**
			 * The method to get the callback
			 * @returns {CallBack} An instance of CallBack
			 */
			getCallback()	{
				return this.callback;

			}

			/**
			 * The method to set the value to callback
			 * @param {CallBack} callback An instance of CallBack
			 */
			setCallback(callback)	{
				if((callback != null) && (!(callback instanceof ZCRM.BulkWrite.Model.CallBack))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: callback EXPECTED TYPE: CallBack", null, null);
				}
				this.callback = callback;
				this.keyModified.set("callback", 1);

			}

			/**
			 * The method to get the result
			 * @returns {Result} An instance of Result
			 */
			getResult()	{
				return this.result;

			}

			/**
			 * The method to set the value to result
			 * @param {Result} result An instance of Result
			 */
			setResult(result)	{
				if((result != null) && (!(result instanceof ZCRM.BulkWrite.Model.Result))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: result EXPECTED TYPE: Result", null, null);
				}
				this.result = result;
				this.keyModified.set("result", 1);

			}

			/**
			 * The method to get the createdBy
			 * @returns {User} An instance of User
			 */
			getCreatedBy()	{
				return this.createdBy;

			}

			/**
			 * The method to set the value to createdBy
			 * @param {User} createdBy An instance of User
			 */
			setCreatedBy(createdBy)	{
				if((createdBy != null) && (!(createdBy instanceof ZCRM.User.Model.User))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: createdBy EXPECTED TYPE: User", null, null);
				}
				this.createdBy = createdBy;
				this.keyModified.set("created_by", 1);

			}

			/**
			 * The method to get the operation
			 * @returns {String} A String representing the operation
			 */
			getOperation()	{
				return this.operation;

			}

			/**
			 * The method to set the value to operation
			 * @param {String} operation A String
			 */
			setOperation(operation)	{
				if((operation != null) && (!(Object.prototype.toString.call(operation) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: operation EXPECTED TYPE: String", null, null);
				}
				this.operation = operation;
				this.keyModified.set("operation", 1);

			}

			/**
			 * The method to get the createdTime
			 * @returns {OffsetDateTime} An instance of OffsetDateTime
			 */
			getCreatedTime()	{
				return this.createdTime;

			}

			/**
			 * The method to set the value to createdTime
			 * @param {OffsetDateTime} createdTime An instance of OffsetDateTime
			 */
			setCreatedTime(createdTime)	{
				if((createdTime != null) && (!(createdTime instanceof Date))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: createdTime EXPECTED TYPE: Date", null, null);
				}
				this.createdTime = createdTime;
				this.keyModified.set("created_time", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		File : class{
			constructor(){

				this.status=null;
				this.name=null;
				this.addedCount=null;
				this.skippedCount=null;
				this.updatedCount=null;
				this.totalCount=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the name
			 * @returns {String} A String representing the name
			 */
			getName()	{
				return this.name;

			}

			/**
			 * The method to set the value to name
			 * @param {String} name A String
			 */
			setName(name)	{
				if((name != null) && (!(Object.prototype.toString.call(name) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: name EXPECTED TYPE: String", null, null);
				}
				this.name = name;
				this.keyModified.set("name", 1);

			}

			/**
			 * The method to get the addedCount
			 * @returns {Integer} An Integer representing the addedCount
			 */
			getAddedCount()	{
				return this.addedCount;

			}

			/**
			 * The method to set the value to addedCount
			 * @param {Integer} addedCount An Integer
			 */
			setAddedCount(addedCount)	{
				if((addedCount != null) && (!(Object.prototype.toString.call(addedCount) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: addedCount EXPECTED TYPE: Integer", null, null);
				}
				this.addedCount = addedCount;
				this.keyModified.set("added_count", 1);

			}

			/**
			 * The method to get the skippedCount
			 * @returns {Integer} An Integer representing the skippedCount
			 */
			getSkippedCount()	{
				return this.skippedCount;

			}

			/**
			 * The method to set the value to skippedCount
			 * @param {Integer} skippedCount An Integer
			 */
			setSkippedCount(skippedCount)	{
				if((skippedCount != null) && (!(Object.prototype.toString.call(skippedCount) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: skippedCount EXPECTED TYPE: Integer", null, null);
				}
				this.skippedCount = skippedCount;
				this.keyModified.set("skipped_count", 1);

			}

			/**
			 * The method to get the updatedCount
			 * @returns {Integer} An Integer representing the updatedCount
			 */
			getUpdatedCount()	{
				return this.updatedCount;

			}

			/**
			 * The method to set the value to updatedCount
			 * @param {Integer} updatedCount An Integer
			 */
			setUpdatedCount(updatedCount)	{
				if((updatedCount != null) && (!(Object.prototype.toString.call(updatedCount) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: updatedCount EXPECTED TYPE: Integer", null, null);
				}
				this.updatedCount = updatedCount;
				this.keyModified.set("updated_count", 1);

			}

			/**
			 * The method to get the totalCount
			 * @returns {Integer} An Integer representing the totalCount
			 */
			getTotalCount()	{
				return this.totalCount;

			}

			/**
			 * The method to set the value to totalCount
			 * @param {Integer} totalCount An Integer
			 */
			setTotalCount(totalCount)	{
				if((totalCount != null) && (!(Object.prototype.toString.call(totalCount) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: totalCount EXPECTED TYPE: Integer", null, null);
				}
				this.totalCount = totalCount;
				this.keyModified.set("total_count", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		Resource : class{
			constructor(){

				this.status=null;
				this.type=null;
				this.module=null;
				this.fileId=null;
				this.ignoreEmpty=null;
				this.findBy=null;
				this.fieldMappings=null;
				this.file=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the type
			 * @returns {Choice} An instance of Choice
			 */
			getType()	{
				return this.type;

			}

			/**
			 * The method to set the value to type
			 * @param {Choice} type An instance of Choice
			 */
			setType(type)	{
				if((type != null) && (!(type instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: type EXPECTED TYPE: Choice", null, null);
				}
				this.type = type;
				this.keyModified.set("type", 1);

			}

			/**
			 * The method to get the module
			 * @returns {String} A String representing the module
			 */
			getModule()	{
				return this.module;

			}

			/**
			 * The method to set the value to module
			 * @param {String} module A String
			 */
			setModule(module)	{
				if((module != null) && (!(Object.prototype.toString.call(module) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: module EXPECTED TYPE: String", null, null);
				}
				this.module = module;
				this.keyModified.set("module", 1);

			}

			/**
			 * The method to get the fileId
			 * @returns {String} A String representing the fileId
			 */
			getFileId()	{
				return this.fileId;

			}

			/**
			 * The method to set the value to fileId
			 * @param {String} fileId A String
			 */
			setFileId(fileId)	{
				if((fileId != null) && (!(Object.prototype.toString.call(fileId) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: fileId EXPECTED TYPE: String", null, null);
				}
				this.fileId = fileId;
				this.keyModified.set("file_id", 1);

			}

			/**
			 * The method to get the ignoreEmpty
			 * @returns {Boolean} A Boolean representing the ignoreEmpty
			 */
			getIgnoreEmpty()	{
				return this.ignoreEmpty;

			}

			/**
			 * The method to set the value to ignoreEmpty
			 * @param {Boolean} ignoreEmpty A Boolean
			 */
			setIgnoreEmpty(ignoreEmpty)	{
				if((ignoreEmpty != null) && (!(Object.prototype.toString.call(ignoreEmpty) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: ignoreEmpty EXPECTED TYPE: Boolean", null, null);
				}
				this.ignoreEmpty = ignoreEmpty;
				this.keyModified.set("ignore_empty", 1);

			}

			/**
			 * The method to get the findBy
			 * @returns {String} A String representing the findBy
			 */
			getFindBy()	{
				return this.findBy;

			}

			/**
			 * The method to set the value to findBy
			 * @param {String} findBy A String
			 */
			setFindBy(findBy)	{
				if((findBy != null) && (!(Object.prototype.toString.call(findBy) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: findBy EXPECTED TYPE: String", null, null);
				}
				this.findBy = findBy;
				this.keyModified.set("find_by", 1);

			}

			/**
			 * The method to get the fieldMappings
			 * @returns {List} An Array representing the fieldMappings
			 */
			getFieldMappings()	{
				return this.fieldMappings;

			}

			/**
			 * The method to set the value to fieldMappings
			 * @param {List} fieldMappings An Array
			 */
			setFieldMappings(fieldMappings)	{
				if((fieldMappings != null) && (!(Object.prototype.toString.call(fieldMappings) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: fieldMappings EXPECTED TYPE: Array", null, null);
				}
				this.fieldMappings = fieldMappings;
				this.keyModified.set("field_mappings", 1);

			}

			/**
			 * The method to get the file
			 * @returns {File} An instance of File
			 */
			getFile()	{
				return this.file;

			}

			/**
			 * The method to set the value to file
			 * @param {File} file An instance of File
			 */
			setFile(file)	{
				if((file != null) && (!(file instanceof ZCRM.BulkWrite.Model.File))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: file EXPECTED TYPE: File", null, null);
				}
				this.file = file;
				this.keyModified.set("file", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		FieldMapping : class{
			constructor(){

				this.apiName=null;
				this.index=null;
				this.format=null;
				this.findBy=null;
				this.defaultValue=null;
				this.module=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the apiName
			 * @returns {String} A String representing the apiName
			 */
			getAPIName()	{
				return this.apiName;

			}

			/**
			 * The method to set the value to apiName
			 * @param {String} apiName A String
			 */
			setAPIName(apiName)	{
				if((apiName != null) && (!(Object.prototype.toString.call(apiName) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: apiName EXPECTED TYPE: String", null, null);
				}
				this.apiName = apiName;
				this.keyModified.set("api_name", 1);

			}

			/**
			 * The method to get the index
			 * @returns {Integer} An Integer representing the index
			 */
			getIndex()	{
				return this.index;

			}

			/**
			 * The method to set the value to index
			 * @param {Integer} index An Integer
			 */
			setIndex(index)	{
				if((index != null) && (!(Object.prototype.toString.call(index) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: index EXPECTED TYPE: Integer", null, null);
				}
				this.index = index;
				this.keyModified.set("index", 1);

			}

			/**
			 * The method to get the format
			 * @returns {String} A String representing the format
			 */
			getFormat()	{
				return this.format;

			}

			/**
			 * The method to set the value to format
			 * @param {String} format A String
			 */
			setFormat(format)	{
				if((format != null) && (!(Object.prototype.toString.call(format) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: format EXPECTED TYPE: String", null, null);
				}
				this.format = format;
				this.keyModified.set("format", 1);

			}

			/**
			 * The method to get the findBy
			 * @returns {String} A String representing the findBy
			 */
			getFindBy()	{
				return this.findBy;

			}

			/**
			 * The method to set the value to findBy
			 * @param {String} findBy A String
			 */
			setFindBy(findBy)	{
				if((findBy != null) && (!(Object.prototype.toString.call(findBy) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: findBy EXPECTED TYPE: String", null, null);
				}
				this.findBy = findBy;
				this.keyModified.set("find_by", 1);

			}

			/**
			 * The method to get the defaultValue
			 * @returns {Map} A Map representing the defaultValue
			 */
			getDefaultValue()	{
				return this.defaultValue;

			}

			/**
			 * The method to set the value to defaultValue
			 * @param {Map} defaultValue A Map
			 */
			setDefaultValue(defaultValue)	{
				if((defaultValue != null) && (!(Object.prototype.toString.call(defaultValue) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: defaultValue EXPECTED TYPE: Map", null, null);
				}
				this.defaultValue = defaultValue;
				this.keyModified.set("default_value", 1);

			}

			/**
			 * The method to get the module
			 * @returns {String} A String representing the module
			 */
			getModule()	{
				return this.module;

			}

			/**
			 * The method to set the value to module
			 * @param {String} module A String
			 */
			setModule(module)	{
				if((module != null) && (!(Object.prototype.toString.call(module) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: module EXPECTED TYPE: String", null, null);
				}
				this.module = module;
				this.keyModified.set("module", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		FileBodyWrapper : class{
			constructor(){

				this.file=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the file
			 * @returns {StreamWrapper} An instance of StreamWrapper
			 */
			getFile()	{
				return this.file;

			}

			/**
			 * The method to set the value to file
			 * @param {StreamWrapper} file An instance of StreamWrapper
			 */
			setFile(file)	{
				if((file != null) && (!(file instanceof StreamWrapper.Model.StreamWrapper))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: file EXPECTED TYPE: StreamWrapper", null, null);
				}
				this.file = file;
				this.keyModified.set("file", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		Result : class{
			constructor(){

				this.downloadUrl=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the downloadUrl
			 * @returns {String} A String representing the downloadUrl
			 */
			getDownloadUrl()	{
				return this.downloadUrl;

			}

			/**
			 * The method to set the value to downloadUrl
			 * @param {String} downloadUrl A String
			 */
			setDownloadUrl(downloadUrl)	{
				if((downloadUrl != null) && (!(Object.prototype.toString.call(downloadUrl) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: downloadUrl EXPECTED TYPE: String", null, null);
				}
				this.downloadUrl = downloadUrl;
				this.keyModified.set("download_url", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		UploadFileHeader : {
			FEATURE : 	new Header("feature", "BulkWrite.Model.UploadFileHeader"),

			X_CRM_ORG : 	new Header("X-CRM-ORG", "BulkWrite.Model.UploadFileHeader"),


		}
	},
	Operations : class {
		constructor(){

		}

		/**
		 * The method to upload file
		 * @param {FileBodyWrapper} request An instance of FileBodyWrapper
		 * @param {HeaderMap} headerInstance An instance of HeaderMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async uploadFile(request, headerInstance=null){
			if((request != null) && (!(request instanceof ZCRM.BulkWrite.Model.FileBodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: FileBodyWrapper", null, null);
			}
			if((headerInstance != null) && (!(headerInstance instanceof HeaderMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: headerInstance EXPECTED TYPE: HeaderMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("https://content.zohoapis.com/crm/v2/upload");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_POST);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_CREATE);
			handlerInstance.setContentType("multipart/form-data");
			handlerInstance.setRequest(request);
			handlerInstance.setMandatoryChecker(true);
			handlerInstance.setHeader(headerInstance);
			return handlerInstance.apiCall("BulkWrite.Model.ActionResponse", "application/json");

		}

		/**
		 * The method to create bulk write job
		 * @param {RequestWrapper} request An instance of RequestWrapper
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async createBulkWriteJob(request){
			if((request != null) && (!(request instanceof ZCRM.BulkWrite.Model.RequestWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: RequestWrapper", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/bulk/v2/write");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_POST);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_CREATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			handlerInstance.setMandatoryChecker(true);
			return handlerInstance.apiCall("BulkWrite.Model.ActionResponse", "application/json");

		}

		/**
		 * The method to get bulk write job details
		 * @param {Long} jobId A BigInt
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getBulkWriteJobDetails(jobId){
			if((!(Object.prototype.toString.call(jobId) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: jobId EXPECTED TYPE: BigInt", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/bulk/v2/write/");
			apiPath = apiPath.concat(jobId.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			return handlerInstance.apiCall("BulkWrite.Model.ResponseWrapper", "application/json");

		}

		/**
		 * The method to download bulk write result
		 * @param {String} downloadUrl A String
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async downloadBulkWriteResult(downloadUrl){
			if((!(Object.prototype.toString.call(downloadUrl) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: downloadUrl EXPECTED TYPE: String", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(downloadUrl.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			return handlerInstance.apiCall("BulkWrite.Model.ResponseHandler", "application/octet-stream");

		}
	},

}

ZCRM.Function = {
	Model : {
		ResponseWrapper : class{
			constructor(){

			}


		},

		APIException : class{
			constructor(){

				this.status=null;
				this.code=null;
				this.message=null;
				this.details=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		BodyWrapper : class{
			constructor(){

				this.body=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the body
			 * @returns {Map} A Map representing the body
			 */
			getBody()	{
				return this.body;

			}

			/**
			 * The method to set the value to body
			 * @param {Map} body A Map
			 */
			setBody(body)	{
				if((body != null) && (!(Object.prototype.toString.call(body) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: body EXPECTED TYPE: Map", null, null);
				}
				this.body = body;
				this.keyModified.set("body", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		FileBodyWrapper : class{
			constructor(){

				this.inputfile=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the inputfile
			 * @returns {StreamWrapper} An instance of StreamWrapper
			 */
			getInputfile()	{
				return this.inputfile;

			}

			/**
			 * The method to set the value to inputfile
			 * @param {StreamWrapper} inputfile An instance of StreamWrapper
			 */
			setInputfile(inputfile)	{
				if((inputfile != null) && (!(inputfile instanceof StreamWrapper.Model.StreamWrapper))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: inputfile EXPECTED TYPE: StreamWrapper", null, null);
				}
				this.inputfile = inputfile;
				this.keyModified.set("inputFile", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		SuccessResponse : class{
			constructor(){

				this.code=null;
				this.message=null;
				this.details=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		ExecuteFunctionUsingFileParam : {
			UPLOAD_FILE_PARAM : 	new Param("upload_file_param", "Function.Model.ExecuteFunctionUsingFileParam"),


		},

		ExecuteFunctionUsingParametersHeader : {
			GET_CUSTOM_FUNCTIONS_HEADER : 	new Header("get_custom_functions_header", "Function.Model.ExecuteFunctionUsingParametersHeader"),


		},

		ExecuteFunctionUsingRequestBodyHeader : {
			CUSTOM_FUNCTIONS_HEADER : 	new Header("custom_functions_header", "Function.Model.ExecuteFunctionUsingRequestBodyHeader"),


		},

		ExecuteFunctionUsingFileHeader : {
			UPLOAD_FILE_HEADER : 	new Header("upload_file_header", "Function.Model.ExecuteFunctionUsingFileHeader"),


		},

		ExecuteFunctionUsingParametersParam : {
			GET_CUSTOM_FUNCTIONS_PARAM : 	new Param("get_custom_functions_param", "Function.Model.ExecuteFunctionUsingParametersParam"),


		},

		ExecuteFunctionUsingRequestBodyParam : {
			CUSTOM_FUNCTIONS_PARAM : 	new Param("custom_functions_param", "Function.Model.ExecuteFunctionUsingRequestBodyParam"),


		}
	},
	Operations : class {


		/**
		 * Creates an instance of FunctionsOperations with the given parameters
		 * @param {String} functionName A String
		 * @param {String} authType A String
		 * @param {Map} arguments1 A Map
		 */
		constructor(functionName, authType=null, arguments1=null){
			if((!(Object.prototype.toString.call(functionName) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: functionName EXPECTED TYPE: String", null, null);
			}
			if((authType != null) && (!(Object.prototype.toString.call(authType) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: authType EXPECTED TYPE: String", null, null);
			}
			if((arguments1 != null) && (!(Object.prototype.toString.call(arguments1) == "[object Map]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: arguments1 EXPECTED TYPE: Map", null, null);
			}
						this.functionName = functionName;
						this.authType = authType;
						this.arguments1 = arguments1;

		}

		/**
		 * The method to execute function using request body
		 * @param {BodyWrapper} request An instance of BodyWrapper
		 * @param {ParameterMap} paramInstance An instance of ParameterMap
		 * @param {HeaderMap} headerInstance An instance of HeaderMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async executeFunctionUsingRequestBody(request, paramInstance=null, headerInstance=null){
			if((request != null) && (!(request instanceof ZCRM.Function.Model.BodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: BodyWrapper", null, null);
			}
			if((paramInstance != null) && (!(paramInstance instanceof ParameterMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paramInstance EXPECTED TYPE: ParameterMap", null, null);
			}
			if((headerInstance != null) && (!(headerInstance instanceof HeaderMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: headerInstance EXPECTED TYPE: HeaderMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/functions/");
			apiPath = apiPath.concat(this.functionName.toString());
			apiPath = apiPath.concat("/actions/execute");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_POST);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_CREATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			handlerInstance.setMandatoryChecker(true);
			await handlerInstance.addParam(new Param("auth_type", "Function.Model.ExecuteFunctionUsingRequestBodyParam"), this.authType);
			await handlerInstance.addParam(new Param("arguments", "Function.Model.ExecuteFunctionUsingRequestBodyParam"), this.arguments1);
			handlerInstance.setParam(paramInstance);
			handlerInstance.setHeader(headerInstance);
			return handlerInstance.apiCall("Function.Model.ResponseWrapper", "application/json");

		}

		/**
		 * The method to execute function using parameters
		 * @param {ParameterMap} paramInstance An instance of ParameterMap
		 * @param {HeaderMap} headerInstance An instance of HeaderMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async executeFunctionUsingParameters(paramInstance=null, headerInstance=null){
			if((paramInstance != null) && (!(paramInstance instanceof ParameterMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paramInstance EXPECTED TYPE: ParameterMap", null, null);
			}
			if((headerInstance != null) && (!(headerInstance instanceof HeaderMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: headerInstance EXPECTED TYPE: HeaderMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/functions/");
			apiPath = apiPath.concat(this.functionName.toString());
			apiPath = apiPath.concat("/actions/execute");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			await handlerInstance.addParam(new Param("auth_type", "Function.Model.ExecuteFunctionUsingParametersParam"), this.authType);
			await handlerInstance.addParam(new Param("arguments", "Function.Model.ExecuteFunctionUsingParametersParam"), this.arguments1);
			handlerInstance.setParam(paramInstance);
			handlerInstance.setHeader(headerInstance);
			return handlerInstance.apiCall("Function.Model.ResponseWrapper", "application/json");

		}

		/**
		 * The method to execute function using file
		 * @param {FileBodyWrapper} request An instance of FileBodyWrapper
		 * @param {ParameterMap} paramInstance An instance of ParameterMap
		 * @param {HeaderMap} headerInstance An instance of HeaderMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async executeFunctionUsingFile(request, paramInstance=null, headerInstance=null){
			if((request != null) && (!(request instanceof ZCRM.Function.Model.FileBodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: FileBodyWrapper", null, null);
			}
			if((paramInstance != null) && (!(paramInstance instanceof ParameterMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paramInstance EXPECTED TYPE: ParameterMap", null, null);
			}
			if((headerInstance != null) && (!(headerInstance instanceof HeaderMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: headerInstance EXPECTED TYPE: HeaderMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/functions/");
			apiPath = apiPath.concat(this.functionName.toString());
			apiPath = apiPath.concat("/actions/execute");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_POST);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_CREATE);
			handlerInstance.setContentType("multipart/form-data");
			handlerInstance.setRequest(request);
			handlerInstance.setMandatoryChecker(true);
			await handlerInstance.addParam(new Param("auth_type", "Function.Model.ExecuteFunctionUsingFileParam"), this.authType);
			await handlerInstance.addParam(new Param("arguments", "Function.Model.ExecuteFunctionUsingFileParam"), this.arguments1);
			handlerInstance.setParam(paramInstance);
			handlerInstance.setHeader(headerInstance);
			return handlerInstance.apiCall("Function.Model.ResponseWrapper", "application/json");

		}

	},

}

class RequestProxy {
    /**
     * Creates a RequestProxy class instance with the specified parameters.
     * @param {String} host A String containing the hostname or address of the proxy server
     * @param {Number} port An Integer containing The port number of the proxy server
     * @param {String} user A String containing the user name of the proxy server
     * @param {String} password A String containing the password of the proxy server
     */
    constructor(host, port) {
        this._host = host;

        this._port = port;
    }

    /**
     * This is a getter method to get Proxy host.
     * @returns {String}
     */
    getHost() {
        return this._host;
    }

    /**
     * This is a getter method to get the Proxy port.
     * @returns {Number}
     */
    getPort() {
        return this._port;
    }
}

ZCRM.Field = {
	Model : {
		ResponseHandler : class{
			constructor(){

			}


		},

		RelatedDetails : class{
			constructor(){

				this.displayLabel=null;
				this.apiName=null;
				this.module=null;
				this.id=null;
				this.type=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the displayLabel
			 * @returns {String} A String representing the displayLabel
			 */
			getDisplayLabel()	{
				return this.displayLabel;

			}

			/**
			 * The method to set the value to displayLabel
			 * @param {String} displayLabel A String
			 */
			setDisplayLabel(displayLabel)	{
				if((displayLabel != null) && (!(Object.prototype.toString.call(displayLabel) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: displayLabel EXPECTED TYPE: String", null, null);
				}
				this.displayLabel = displayLabel;
				this.keyModified.set("display_label", 1);

			}

			/**
			 * The method to get the apiName
			 * @returns {String} A String representing the apiName
			 */
			getAPIName()	{
				return this.apiName;

			}

			/**
			 * The method to set the value to apiName
			 * @param {String} apiName A String
			 */
			setAPIName(apiName)	{
				if((apiName != null) && (!(Object.prototype.toString.call(apiName) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: apiName EXPECTED TYPE: String", null, null);
				}
				this.apiName = apiName;
				this.keyModified.set("api_name", 1);

			}

			/**
			 * The method to get the module
			 * @returns {Module} An instance of Module
			 */
			getModule()	{
				return this.module;

			}

			/**
			 * The method to set the value to module
			 * @param {Module} module An instance of Module
			 */
			setModule(module)	{
				if((module != null) && (!(module instanceof ZCRM.Field.Model.Module))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: module EXPECTED TYPE: Module", null, null);
				}
				this.module = module;
				this.keyModified.set("module", 1);

			}

			/**
			 * The method to get the id
			 * @returns {Long} A BigInt representing the id
			 */
			getId()	{
				return this.id;

			}

			/**
			 * The method to set the value to id
			 * @param {Long} id A BigInt
			 */
			setId(id)	{
				if((id != null) && (!(Object.prototype.toString.call(id) == "[object BigInt]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
				}
				this.id = id;
				this.keyModified.set("id", 1);

			}

			/**
			 * The method to get the type
			 * @returns {String} A String representing the type
			 */
			getType()	{
				return this.type;

			}

			/**
			 * The method to set the value to type
			 * @param {String} type A String
			 */
			setType(type)	{
				if((type != null) && (!(Object.prototype.toString.call(type) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: type EXPECTED TYPE: String", null, null);
				}
				this.type = type;
				this.keyModified.set("_type", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		Field : class{
			constructor(){

				this.systemMandatory=null;
				this.webhook=null;
				this.private1=null;
				this.layouts=null;
				this.content=null;
				this.columnName=null;
				this.type=null;
				this.transitionSequence=null;
				this.personalityName=null;
				this.message=null;
				this.mandatory=null;
				this.criteria=null;
				this.relatedDetails=null;
				this.jsonType=null;
				this.crypt=null;
				this.fieldLabel=null;
				this.tooltip=null;
				this.createdSource=null;
				this.fieldReadOnly=null;
				this.displayLabel=null;
				this.readOnly=null;
				this.associationDetails=null;
				this.quickSequenceNumber=null;
				this.businesscardSupported=null;
				this.multiModuleLookup=null;
				this.currency=null;
				this.id=null;
				this.customField=null;
				this.lookup=null;
				this.visible=null;
				this.length=null;
				this.viewType=null;
				this.subform=null;
				this.apiName=null;
				this.unique=null;
				this.historyTracking=null;
				this.dataType=null;
				this.formula=null;
				this.decimalPlace=null;
				this.massUpdate=null;
				this.blueprintSupported=null;
				this.multiselectlookup=null;
				this.pickListValues=null;
				this.autoNumber=null;
				this.defaultValue=null;
				this.sectionId=null;
				this.validationRule=null;
				this.convertMapping=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the systemMandatory
			 * @returns {Boolean} A Boolean representing the systemMandatory
			 */
			getSystemMandatory()	{
				return this.systemMandatory;

			}

			/**
			 * The method to set the value to systemMandatory
			 * @param {Boolean} systemMandatory A Boolean
			 */
			setSystemMandatory(systemMandatory)	{
				if((systemMandatory != null) && (!(Object.prototype.toString.call(systemMandatory) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: systemMandatory EXPECTED TYPE: Boolean", null, null);
				}
				this.systemMandatory = systemMandatory;
				this.keyModified.set("system_mandatory", 1);

			}

			/**
			 * The method to get the webhook
			 * @returns {Boolean} A Boolean representing the webhook
			 */
			getWebhook()	{
				return this.webhook;

			}

			/**
			 * The method to set the value to webhook
			 * @param {Boolean} webhook A Boolean
			 */
			setWebhook(webhook)	{
				if((webhook != null) && (!(Object.prototype.toString.call(webhook) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: webhook EXPECTED TYPE: Boolean", null, null);
				}
				this.webhook = webhook;
				this.keyModified.set("webhook", 1);

			}

			/**
			 * The method to get the private
			 * @returns {Private} An instance of Private
			 */
			getPrivate()	{
				return this.private1;

			}

			/**
			 * The method to set the value to private
			 * @param {Private} private1 An instance of Private
			 */
			setPrivate(private1)	{
				if((private1 != null) && (!(private1 instanceof ZCRM.Field.Model.Private))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: private1 EXPECTED TYPE: Private", null, null);
				}
				this.private1 = private1;
				this.keyModified.set("private", 1);

			}

			/**
			 * The method to get the layouts
			 * @returns {Layout} An instance of Layout
			 */
			getLayouts()	{
				return this.layouts;

			}

			/**
			 * The method to set the value to layouts
			 * @param {Layout} layouts An instance of Layout
			 */
			setLayouts(layouts)	{
				if((layouts != null) && (!(layouts instanceof ZCRM.Layout.Model.Layout))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: layouts EXPECTED TYPE: Layout", null, null);
				}
				this.layouts = layouts;
				this.keyModified.set("layouts", 1);

			}

			/**
			 * The method to get the content
			 * @returns {String} A String representing the content
			 */
			getContent()	{
				return this.content;

			}

			/**
			 * The method to set the value to content
			 * @param {String} content A String
			 */
			setContent(content)	{
				if((content != null) && (!(Object.prototype.toString.call(content) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: content EXPECTED TYPE: String", null, null);
				}
				this.content = content;
				this.keyModified.set("content", 1);

			}

			/**
			 * The method to get the columnName
			 * @returns {String} A String representing the columnName
			 */
			getColumnName()	{
				return this.columnName;

			}

			/**
			 * The method to set the value to columnName
			 * @param {String} columnName A String
			 */
			setColumnName(columnName)	{
				if((columnName != null) && (!(Object.prototype.toString.call(columnName) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: columnName EXPECTED TYPE: String", null, null);
				}
				this.columnName = columnName;
				this.keyModified.set("column_name", 1);

			}

			/**
			 * The method to get the type
			 * @returns {String} A String representing the type
			 */
			getType()	{
				return this.type;

			}

			/**
			 * The method to set the value to type
			 * @param {String} type A String
			 */
			setType(type)	{
				if((type != null) && (!(Object.prototype.toString.call(type) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: type EXPECTED TYPE: String", null, null);
				}
				this.type = type;
				this.keyModified.set("_type", 1);

			}

			/**
			 * The method to get the transitionSequence
			 * @returns {Integer} An Integer representing the transitionSequence
			 */
			getTransitionSequence()	{
				return this.transitionSequence;

			}

			/**
			 * The method to set the value to transitionSequence
			 * @param {Integer} transitionSequence An Integer
			 */
			setTransitionSequence(transitionSequence)	{
				if((transitionSequence != null) && (!(Object.prototype.toString.call(transitionSequence) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: transitionSequence EXPECTED TYPE: Integer", null, null);
				}
				this.transitionSequence = transitionSequence;
				this.keyModified.set("transition_sequence", 1);

			}

			/**
			 * The method to get the personalityName
			 * @returns {String} A String representing the personalityName
			 */
			getPersonalityName()	{
				return this.personalityName;

			}

			/**
			 * The method to set the value to personalityName
			 * @param {String} personalityName A String
			 */
			setPersonalityName(personalityName)	{
				if((personalityName != null) && (!(Object.prototype.toString.call(personalityName) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: personalityName EXPECTED TYPE: String", null, null);
				}
				this.personalityName = personalityName;
				this.keyModified.set("personality_name", 1);

			}

			/**
			 * The method to get the message
			 * @returns {String} A String representing the message
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {String} message A String
			 */
			setMessage(message)	{
				if((message != null) && (!(Object.prototype.toString.call(message) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: String", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the mandatory
			 * @returns {Boolean} A Boolean representing the mandatory
			 */
			getMandatory()	{
				return this.mandatory;

			}

			/**
			 * The method to set the value to mandatory
			 * @param {Boolean} mandatory A Boolean
			 */
			setMandatory(mandatory)	{
				if((mandatory != null) && (!(Object.prototype.toString.call(mandatory) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: mandatory EXPECTED TYPE: Boolean", null, null);
				}
				this.mandatory = mandatory;
				this.keyModified.set("mandatory", 1);

			}

			/**
			 * The method to get the criteria
			 * @returns {Criteria} An instance of Criteria
			 */
			getCriteria()	{
				return this.criteria;

			}

			/**
			 * The method to set the value to criteria
			 * @param {Criteria} criteria An instance of Criteria
			 */
			setCriteria(criteria)	{
				if((criteria != null) && (!(criteria instanceof ZCRM.CustomView.Model.Criteria))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: criteria EXPECTED TYPE: Criteria", null, null);
				}
				this.criteria = criteria;
				this.keyModified.set("criteria", 1);

			}

			/**
			 * The method to get the relatedDetails
			 * @returns {RelatedDetails} An instance of RelatedDetails
			 */
			getRelatedDetails()	{
				return this.relatedDetails;

			}

			/**
			 * The method to set the value to relatedDetails
			 * @param {RelatedDetails} relatedDetails An instance of RelatedDetails
			 */
			setRelatedDetails(relatedDetails)	{
				if((relatedDetails != null) && (!(relatedDetails instanceof ZCRM.Field.Model.RelatedDetails))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: relatedDetails EXPECTED TYPE: RelatedDetails", null, null);
				}
				this.relatedDetails = relatedDetails;
				this.keyModified.set("related_details", 1);

			}

			/**
			 * The method to get the jsonType
			 * @returns {String} A String representing the jsonType
			 */
			getJsonType()	{
				return this.jsonType;

			}

			/**
			 * The method to set the value to jsonType
			 * @param {String} jsonType A String
			 */
			setJsonType(jsonType)	{
				if((jsonType != null) && (!(Object.prototype.toString.call(jsonType) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: jsonType EXPECTED TYPE: String", null, null);
				}
				this.jsonType = jsonType;
				this.keyModified.set("json_type", 1);

			}

			/**
			 * The method to get the crypt
			 * @returns {Crypt} An instance of Crypt
			 */
			getCrypt()	{
				return this.crypt;

			}

			/**
			 * The method to set the value to crypt
			 * @param {Crypt} crypt An instance of Crypt
			 */
			setCrypt(crypt)	{
				if((crypt != null) && (!(crypt instanceof ZCRM.Field.Model.Crypt))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: crypt EXPECTED TYPE: Crypt", null, null);
				}
				this.crypt = crypt;
				this.keyModified.set("crypt", 1);

			}

			/**
			 * The method to get the fieldLabel
			 * @returns {String} A String representing the fieldLabel
			 */
			getFieldLabel()	{
				return this.fieldLabel;

			}

			/**
			 * The method to set the value to fieldLabel
			 * @param {String} fieldLabel A String
			 */
			setFieldLabel(fieldLabel)	{
				if((fieldLabel != null) && (!(Object.prototype.toString.call(fieldLabel) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: fieldLabel EXPECTED TYPE: String", null, null);
				}
				this.fieldLabel = fieldLabel;
				this.keyModified.set("field_label", 1);

			}

			/**
			 * The method to get the tooltip
			 * @returns {ToolTip} An instance of ToolTip
			 */
			getTooltip()	{
				return this.tooltip;

			}

			/**
			 * The method to set the value to tooltip
			 * @param {ToolTip} tooltip An instance of ToolTip
			 */
			setTooltip(tooltip)	{
				if((tooltip != null) && (!(tooltip instanceof ZCRM.Field.Model.ToolTip))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: tooltip EXPECTED TYPE: ToolTip", null, null);
				}
				this.tooltip = tooltip;
				this.keyModified.set("tooltip", 1);

			}

			/**
			 * The method to get the createdSource
			 * @returns {String} A String representing the createdSource
			 */
			getCreatedSource()	{
				return this.createdSource;

			}

			/**
			 * The method to set the value to createdSource
			 * @param {String} createdSource A String
			 */
			setCreatedSource(createdSource)	{
				if((createdSource != null) && (!(Object.prototype.toString.call(createdSource) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: createdSource EXPECTED TYPE: String", null, null);
				}
				this.createdSource = createdSource;
				this.keyModified.set("created_source", 1);

			}

			/**
			 * The method to get the fieldReadOnly
			 * @returns {Boolean} A Boolean representing the fieldReadOnly
			 */
			getFieldReadOnly()	{
				return this.fieldReadOnly;

			}

			/**
			 * The method to set the value to fieldReadOnly
			 * @param {Boolean} fieldReadOnly A Boolean
			 */
			setFieldReadOnly(fieldReadOnly)	{
				if((fieldReadOnly != null) && (!(Object.prototype.toString.call(fieldReadOnly) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: fieldReadOnly EXPECTED TYPE: Boolean", null, null);
				}
				this.fieldReadOnly = fieldReadOnly;
				this.keyModified.set("field_read_only", 1);

			}

			/**
			 * The method to get the displayLabel
			 * @returns {String} A String representing the displayLabel
			 */
			getDisplayLabel()	{
				return this.displayLabel;

			}

			/**
			 * The method to set the value to displayLabel
			 * @param {String} displayLabel A String
			 */
			setDisplayLabel(displayLabel)	{
				if((displayLabel != null) && (!(Object.prototype.toString.call(displayLabel) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: displayLabel EXPECTED TYPE: String", null, null);
				}
				this.displayLabel = displayLabel;
				this.keyModified.set("display_label", 1);

			}

			/**
			 * The method to get the readOnly
			 * @returns {Boolean} A Boolean representing the readOnly
			 */
			getReadOnly()	{
				return this.readOnly;

			}

			/**
			 * The method to set the value to readOnly
			 * @param {Boolean} readOnly A Boolean
			 */
			setReadOnly(readOnly)	{
				if((readOnly != null) && (!(Object.prototype.toString.call(readOnly) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: readOnly EXPECTED TYPE: Boolean", null, null);
				}
				this.readOnly = readOnly;
				this.keyModified.set("read_only", 1);

			}

			/**
			 * The method to get the associationDetails
			 * @returns {AssociationDetails} An instance of AssociationDetails
			 */
			getAssociationDetails()	{
				return this.associationDetails;

			}

			/**
			 * The method to set the value to associationDetails
			 * @param {AssociationDetails} associationDetails An instance of AssociationDetails
			 */
			setAssociationDetails(associationDetails)	{
				if((associationDetails != null) && (!(associationDetails instanceof ZCRM.Field.Model.AssociationDetails))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: associationDetails EXPECTED TYPE: AssociationDetails", null, null);
				}
				this.associationDetails = associationDetails;
				this.keyModified.set("association_details", 1);

			}

			/**
			 * The method to get the quickSequenceNumber
			 * @returns {Integer} An Integer representing the quickSequenceNumber
			 */
			getQuickSequenceNumber()	{
				return this.quickSequenceNumber;

			}

			/**
			 * The method to set the value to quickSequenceNumber
			 * @param {Integer} quickSequenceNumber An Integer
			 */
			setQuickSequenceNumber(quickSequenceNumber)	{
				if((quickSequenceNumber != null) && (!(Object.prototype.toString.call(quickSequenceNumber) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: quickSequenceNumber EXPECTED TYPE: Integer", null, null);
				}
				this.quickSequenceNumber = quickSequenceNumber;
				this.keyModified.set("quick_sequence_number", 1);

			}

			/**
			 * The method to get the businesscardSupported
			 * @returns {Boolean} A Boolean representing the businesscardSupported
			 */
			getBusinesscardSupported()	{
				return this.businesscardSupported;

			}

			/**
			 * The method to set the value to businesscardSupported
			 * @param {Boolean} businesscardSupported A Boolean
			 */
			setBusinesscardSupported(businesscardSupported)	{
				if((businesscardSupported != null) && (!(Object.prototype.toString.call(businesscardSupported) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: businesscardSupported EXPECTED TYPE: Boolean", null, null);
				}
				this.businesscardSupported = businesscardSupported;
				this.keyModified.set("businesscard_supported", 1);

			}

			/**
			 * The method to get the multiModuleLookup
			 * @returns {Map} A Map representing the multiModuleLookup
			 */
			getMultiModuleLookup()	{
				return this.multiModuleLookup;

			}

			/**
			 * The method to set the value to multiModuleLookup
			 * @param {Map} multiModuleLookup A Map
			 */
			setMultiModuleLookup(multiModuleLookup)	{
				if((multiModuleLookup != null) && (!(Object.prototype.toString.call(multiModuleLookup) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: multiModuleLookup EXPECTED TYPE: Map", null, null);
				}
				this.multiModuleLookup = multiModuleLookup;
				this.keyModified.set("multi_module_lookup", 1);

			}

			/**
			 * The method to get the currency
			 * @returns {Currency} An instance of Currency
			 */
			getCurrency()	{
				return this.currency;

			}

			/**
			 * The method to set the value to currency
			 * @param {Currency} currency An instance of Currency
			 */
			setCurrency(currency)	{
				if((currency != null) && (!(currency instanceof ZCRM.Field.Model.Currency))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: currency EXPECTED TYPE: Currency", null, null);
				}
				this.currency = currency;
				this.keyModified.set("currency", 1);

			}

			/**
			 * The method to get the id
			 * @returns {Long} A BigInt representing the id
			 */
			getId()	{
				return this.id;

			}

			/**
			 * The method to set the value to id
			 * @param {Long} id A BigInt
			 */
			setId(id)	{
				if((id != null) && (!(Object.prototype.toString.call(id) == "[object BigInt]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
				}
				this.id = id;
				this.keyModified.set("id", 1);

			}

			/**
			 * The method to get the customField
			 * @returns {Boolean} A Boolean representing the customField
			 */
			getCustomField()	{
				return this.customField;

			}

			/**
			 * The method to set the value to customField
			 * @param {Boolean} customField A Boolean
			 */
			setCustomField(customField)	{
				if((customField != null) && (!(Object.prototype.toString.call(customField) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: customField EXPECTED TYPE: Boolean", null, null);
				}
				this.customField = customField;
				this.keyModified.set("custom_field", 1);

			}

			/**
			 * The method to get the lookup
			 * @returns {Module} An instance of Module
			 */
			getLookup()	{
				return this.lookup;

			}

			/**
			 * The method to set the value to lookup
			 * @param {Module} lookup An instance of Module
			 */
			setLookup(lookup)	{
				if((lookup != null) && (!(lookup instanceof ZCRM.Field.Model.Module))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: lookup EXPECTED TYPE: Module", null, null);
				}
				this.lookup = lookup;
				this.keyModified.set("lookup", 1);

			}

			/**
			 * The method to get the visible
			 * @returns {Boolean} A Boolean representing the visible
			 */
			getVisible()	{
				return this.visible;

			}

			/**
			 * The method to set the value to visible
			 * @param {Boolean} visible A Boolean
			 */
			setVisible(visible)	{
				if((visible != null) && (!(Object.prototype.toString.call(visible) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: visible EXPECTED TYPE: Boolean", null, null);
				}
				this.visible = visible;
				this.keyModified.set("visible", 1);

			}

			/**
			 * The method to get the length
			 * @returns {Integer} An Integer representing the length
			 */
			getLength()	{
				return this.length;

			}

			/**
			 * The method to set the value to length
			 * @param {Integer} length An Integer
			 */
			setLength(length)	{
				if((length != null) && (!(Object.prototype.toString.call(length) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: length EXPECTED TYPE: Integer", null, null);
				}
				this.length = length;
				this.keyModified.set("length", 1);

			}

			/**
			 * The method to get the viewType
			 * @returns {ViewType} An instance of ViewType
			 */
			getViewType()	{
				return this.viewType;

			}

			/**
			 * The method to set the value to viewType
			 * @param {ViewType} viewType An instance of ViewType
			 */
			setViewType(viewType)	{
				if((viewType != null) && (!(viewType instanceof ZCRM.Field.Model.ViewType))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: viewType EXPECTED TYPE: ViewType", null, null);
				}
				this.viewType = viewType;
				this.keyModified.set("view_type", 1);

			}

			/**
			 * The method to get the subform
			 * @returns {Module} An instance of Module
			 */
			getSubform()	{
				return this.subform;

			}

			/**
			 * The method to set the value to subform
			 * @param {Module} subform An instance of Module
			 */
			setSubform(subform)	{
				if((subform != null) && (!(subform instanceof ZCRM.Field.Model.Module))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: subform EXPECTED TYPE: Module", null, null);
				}
				this.subform = subform;
				this.keyModified.set("subform", 1);

			}

			/**
			 * The method to get the apiName
			 * @returns {String} A String representing the apiName
			 */
			getAPIName()	{
				return this.apiName;

			}

			/**
			 * The method to set the value to apiName
			 * @param {String} apiName A String
			 */
			setAPIName(apiName)	{
				if((apiName != null) && (!(Object.prototype.toString.call(apiName) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: apiName EXPECTED TYPE: String", null, null);
				}
				this.apiName = apiName;
				this.keyModified.set("api_name", 1);

			}

			/**
			 * The method to get the unique
			 * @returns {Unique} An instance of Unique
			 */
			getUnique()	{
				return this.unique;

			}

			/**
			 * The method to set the value to unique
			 * @param {Unique} unique An instance of Unique
			 */
			setUnique(unique)	{
				if((unique != null) && (!(unique instanceof ZCRM.Field.Model.Unique))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: unique EXPECTED TYPE: Unique", null, null);
				}
				this.unique = unique;
				this.keyModified.set("unique", 1);

			}

			/**
			 * The method to get the historyTracking
			 * @returns {Boolean} A Boolean representing the historyTracking
			 */
			getHistoryTracking()	{
				return this.historyTracking;

			}

			/**
			 * The method to set the value to historyTracking
			 * @param {Boolean} historyTracking A Boolean
			 */
			setHistoryTracking(historyTracking)	{
				if((historyTracking != null) && (!(Object.prototype.toString.call(historyTracking) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: historyTracking EXPECTED TYPE: Boolean", null, null);
				}
				this.historyTracking = historyTracking;
				this.keyModified.set("history_tracking", 1);

			}

			/**
			 * The method to get the dataType
			 * @returns {String} A String representing the dataType
			 */
			getDataType()	{
				return this.dataType;

			}

			/**
			 * The method to set the value to dataType
			 * @param {String} dataType A String
			 */
			setDataType(dataType)	{
				if((dataType != null) && (!(Object.prototype.toString.call(dataType) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: dataType EXPECTED TYPE: String", null, null);
				}
				this.dataType = dataType;
				this.keyModified.set("data_type", 1);

			}

			/**
			 * The method to get the formula
			 * @returns {Formula} An instance of Formula
			 */
			getFormula()	{
				return this.formula;

			}

			/**
			 * The method to set the value to formula
			 * @param {Formula} formula An instance of Formula
			 */
			setFormula(formula)	{
				if((formula != null) && (!(formula instanceof ZCRM.Field.Model.Formula))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: formula EXPECTED TYPE: Formula", null, null);
				}
				this.formula = formula;
				this.keyModified.set("formula", 1);

			}

			/**
			 * The method to get the decimalPlace
			 * @returns {Integer} An Integer representing the decimalPlace
			 */
			getDecimalPlace()	{
				return this.decimalPlace;

			}

			/**
			 * The method to set the value to decimalPlace
			 * @param {Integer} decimalPlace An Integer
			 */
			setDecimalPlace(decimalPlace)	{
				if((decimalPlace != null) && (!(Object.prototype.toString.call(decimalPlace) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: decimalPlace EXPECTED TYPE: Integer", null, null);
				}
				this.decimalPlace = decimalPlace;
				this.keyModified.set("decimal_place", 1);

			}

			/**
			 * The method to get the massUpdate
			 * @returns {Boolean} A Boolean representing the massUpdate
			 */
			getMassUpdate()	{
				return this.massUpdate;

			}

			/**
			 * The method to set the value to massUpdate
			 * @param {Boolean} massUpdate A Boolean
			 */
			setMassUpdate(massUpdate)	{
				if((massUpdate != null) && (!(Object.prototype.toString.call(massUpdate) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: massUpdate EXPECTED TYPE: Boolean", null, null);
				}
				this.massUpdate = massUpdate;
				this.keyModified.set("mass_update", 1);

			}

			/**
			 * The method to get the blueprintSupported
			 * @returns {Boolean} A Boolean representing the blueprintSupported
			 */
			getBlueprintSupported()	{
				return this.blueprintSupported;

			}

			/**
			 * The method to set the value to blueprintSupported
			 * @param {Boolean} blueprintSupported A Boolean
			 */
			setBlueprintSupported(blueprintSupported)	{
				if((blueprintSupported != null) && (!(Object.prototype.toString.call(blueprintSupported) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: blueprintSupported EXPECTED TYPE: Boolean", null, null);
				}
				this.blueprintSupported = blueprintSupported;
				this.keyModified.set("blueprint_supported", 1);

			}

			/**
			 * The method to get the multiselectlookup
			 * @returns {MultiSelectLookup} An instance of MultiSelectLookup
			 */
			getMultiselectlookup()	{
				return this.multiselectlookup;

			}

			/**
			 * The method to set the value to multiselectlookup
			 * @param {MultiSelectLookup} multiselectlookup An instance of MultiSelectLookup
			 */
			setMultiselectlookup(multiselectlookup)	{
				if((multiselectlookup != null) && (!(multiselectlookup instanceof ZCRM.Field.Model.MultiSelectLookup))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: multiselectlookup EXPECTED TYPE: MultiSelectLookup", null, null);
				}
				this.multiselectlookup = multiselectlookup;
				this.keyModified.set("multiselectlookup", 1);

			}

			/**
			 * The method to get the pickListValues
			 * @returns {List} An Array representing the pickListValues
			 */
			getPickListValues()	{
				return this.pickListValues;

			}

			/**
			 * The method to set the value to pickListValues
			 * @param {List} pickListValues An Array
			 */
			setPickListValues(pickListValues)	{
				if((pickListValues != null) && (!(Object.prototype.toString.call(pickListValues) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: pickListValues EXPECTED TYPE: Array", null, null);
				}
				this.pickListValues = pickListValues;
				this.keyModified.set("pick_list_values", 1);

			}

			/**
			 * The method to get the autoNumber
			 * @returns {AutoNumber} An instance of AutoNumber
			 */
			getAutoNumber()	{
				return this.autoNumber;

			}

			/**
			 * The method to set the value to autoNumber
			 * @param {AutoNumber} autoNumber An instance of AutoNumber
			 */
			setAutoNumber(autoNumber)	{
				if((autoNumber != null) && (!(autoNumber instanceof ZCRM.Field.Model.AutoNumber))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: autoNumber EXPECTED TYPE: AutoNumber", null, null);
				}
				this.autoNumber = autoNumber;
				this.keyModified.set("auto_number", 1);

			}

			/**
			 * The method to get the defaultValue
			 * @returns {String} A String representing the defaultValue
			 */
			getDefaultValue()	{
				return this.defaultValue;

			}

			/**
			 * The method to set the value to defaultValue
			 * @param {String} defaultValue A String
			 */
			setDefaultValue(defaultValue)	{
				if((defaultValue != null) && (!(Object.prototype.toString.call(defaultValue) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: defaultValue EXPECTED TYPE: String", null, null);
				}
				this.defaultValue = defaultValue;
				this.keyModified.set("default_value", 1);

			}

			/**
			 * The method to get the sectionId
			 * @returns {Integer} An Integer representing the sectionId
			 */
			getSectionId()	{
				return this.sectionId;

			}

			/**
			 * The method to set the value to sectionId
			 * @param {Integer} sectionId An Integer
			 */
			setSectionId(sectionId)	{
				if((sectionId != null) && (!(Object.prototype.toString.call(sectionId) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: sectionId EXPECTED TYPE: Integer", null, null);
				}
				this.sectionId = sectionId;
				this.keyModified.set("section_id", 1);

			}

			/**
			 * The method to get the validationRule
			 * @returns {Map} A Map representing the validationRule
			 */
			getValidationRule()	{
				return this.validationRule;

			}

			/**
			 * The method to set the value to validationRule
			 * @param {Map} validationRule A Map
			 */
			setValidationRule(validationRule)	{
				if((validationRule != null) && (!(Object.prototype.toString.call(validationRule) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: validationRule EXPECTED TYPE: Map", null, null);
				}
				this.validationRule = validationRule;
				this.keyModified.set("validation_rule", 1);

			}

			/**
			 * The method to get the convertMapping
			 * @returns {Map} A Map representing the convertMapping
			 */
			getConvertMapping()	{
				return this.convertMapping;

			}

			/**
			 * The method to set the value to convertMapping
			 * @param {Map} convertMapping A Map
			 */
			setConvertMapping(convertMapping)	{
				if((convertMapping != null) && (!(Object.prototype.toString.call(convertMapping) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: convertMapping EXPECTED TYPE: Map", null, null);
				}
				this.convertMapping = convertMapping;
				this.keyModified.set("convert_mapping", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		Unique : class{
			constructor(){

				this.casesensitive=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the casesensitive
			 * @returns {String} A String representing the casesensitive
			 */
			getCasesensitive()	{
				return this.casesensitive;

			}

			/**
			 * The method to set the value to casesensitive
			 * @param {String} casesensitive A String
			 */
			setCasesensitive(casesensitive)	{
				if((casesensitive != null) && (!(Object.prototype.toString.call(casesensitive) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: casesensitive EXPECTED TYPE: String", null, null);
				}
				this.casesensitive = casesensitive;
				this.keyModified.set("casesensitive", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		Crypt : class{
			constructor(){

				this.mode=null;
				this.column=null;
				this.encfldids=null;
				this.notify=null;
				this.table=null;
				this.status=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the mode
			 * @returns {String} A String representing the mode
			 */
			getMode()	{
				return this.mode;

			}

			/**
			 * The method to set the value to mode
			 * @param {String} mode A String
			 */
			setMode(mode)	{
				if((mode != null) && (!(Object.prototype.toString.call(mode) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: mode EXPECTED TYPE: String", null, null);
				}
				this.mode = mode;
				this.keyModified.set("mode", 1);

			}

			/**
			 * The method to get the column
			 * @returns {String} A String representing the column
			 */
			getColumn()	{
				return this.column;

			}

			/**
			 * The method to set the value to column
			 * @param {String} column A String
			 */
			setColumn(column)	{
				if((column != null) && (!(Object.prototype.toString.call(column) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: column EXPECTED TYPE: String", null, null);
				}
				this.column = column;
				this.keyModified.set("column", 1);

			}

			/**
			 * The method to get the encfldids
			 * @returns {List} An Array representing the encfldids
			 */
			getEncfldids()	{
				return this.encfldids;

			}

			/**
			 * The method to set the value to encfldids
			 * @param {List} encfldids An Array
			 */
			setEncfldids(encfldids)	{
				if((encfldids != null) && (!(Object.prototype.toString.call(encfldids) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: encfldids EXPECTED TYPE: Array", null, null);
				}
				this.encfldids = encfldids;
				this.keyModified.set("encFldIds", 1);

			}

			/**
			 * The method to get the notify
			 * @returns {String} A String representing the notify
			 */
			getNotify()	{
				return this.notify;

			}

			/**
			 * The method to set the value to notify
			 * @param {String} notify A String
			 */
			setNotify(notify)	{
				if((notify != null) && (!(Object.prototype.toString.call(notify) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: notify EXPECTED TYPE: String", null, null);
				}
				this.notify = notify;
				this.keyModified.set("notify", 1);

			}

			/**
			 * The method to get the table
			 * @returns {String} A String representing the table
			 */
			getTable()	{
				return this.table;

			}

			/**
			 * The method to set the value to table
			 * @param {String} table A String
			 */
			setTable(table)	{
				if((table != null) && (!(Object.prototype.toString.call(table) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: table EXPECTED TYPE: String", null, null);
				}
				this.table = table;
				this.keyModified.set("table", 1);

			}

			/**
			 * The method to get the status
			 * @returns {Integer} An Integer representing the status
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Integer} status An Integer
			 */
			setStatus(status)	{
				if((status != null) && (!(Object.prototype.toString.call(status) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Integer", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		ViewType : class{
			constructor(){

				this.view=null;
				this.edit=null;
				this.create=null;
				this.quickCreate=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the view
			 * @returns {Boolean} A Boolean representing the view
			 */
			getView()	{
				return this.view;

			}

			/**
			 * The method to set the value to view
			 * @param {Boolean} view A Boolean
			 */
			setView(view)	{
				if((view != null) && (!(Object.prototype.toString.call(view) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: view EXPECTED TYPE: Boolean", null, null);
				}
				this.view = view;
				this.keyModified.set("view", 1);

			}

			/**
			 * The method to get the edit
			 * @returns {Boolean} A Boolean representing the edit
			 */
			getEdit()	{
				return this.edit;

			}

			/**
			 * The method to set the value to edit
			 * @param {Boolean} edit A Boolean
			 */
			setEdit(edit)	{
				if((edit != null) && (!(Object.prototype.toString.call(edit) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: edit EXPECTED TYPE: Boolean", null, null);
				}
				this.edit = edit;
				this.keyModified.set("edit", 1);

			}

			/**
			 * The method to get the create
			 * @returns {Boolean} A Boolean representing the create
			 */
			getCreate()	{
				return this.create;

			}

			/**
			 * The method to set the value to create
			 * @param {Boolean} create A Boolean
			 */
			setCreate(create)	{
				if((create != null) && (!(Object.prototype.toString.call(create) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: create EXPECTED TYPE: Boolean", null, null);
				}
				this.create = create;
				this.keyModified.set("create", 1);

			}

			/**
			 * The method to get the quickCreate
			 * @returns {Boolean} A Boolean representing the quickCreate
			 */
			getQuickCreate()	{
				return this.quickCreate;

			}

			/**
			 * The method to set the value to quickCreate
			 * @param {Boolean} quickCreate A Boolean
			 */
			setQuickCreate(quickCreate)	{
				if((quickCreate != null) && (!(Object.prototype.toString.call(quickCreate) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: quickCreate EXPECTED TYPE: Boolean", null, null);
				}
				this.quickCreate = quickCreate;
				this.keyModified.set("quick_create", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		AutoNumber : class{
			constructor(){

				this.prefix=null;
				this.suffix=null;
				this.startNumber=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the prefix
			 * @returns {String} A String representing the prefix
			 */
			getPrefix()	{
				return this.prefix;

			}

			/**
			 * The method to set the value to prefix
			 * @param {String} prefix A String
			 */
			setPrefix(prefix)	{
				if((prefix != null) && (!(Object.prototype.toString.call(prefix) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: prefix EXPECTED TYPE: String", null, null);
				}
				this.prefix = prefix;
				this.keyModified.set("prefix", 1);

			}

			/**
			 * The method to get the suffix
			 * @returns {String} A String representing the suffix
			 */
			getSuffix()	{
				return this.suffix;

			}

			/**
			 * The method to set the value to suffix
			 * @param {String} suffix A String
			 */
			setSuffix(suffix)	{
				if((suffix != null) && (!(Object.prototype.toString.call(suffix) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: suffix EXPECTED TYPE: String", null, null);
				}
				this.suffix = suffix;
				this.keyModified.set("suffix", 1);

			}

			/**
			 * The method to get the startNumber
			 * @returns {Integer} An Integer representing the startNumber
			 */
			getStartNumber()	{
				return this.startNumber;

			}

			/**
			 * The method to set the value to startNumber
			 * @param {Integer} startNumber An Integer
			 */
			setStartNumber(startNumber)	{
				if((startNumber != null) && (!(Object.prototype.toString.call(startNumber) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: startNumber EXPECTED TYPE: Integer", null, null);
				}
				this.startNumber = startNumber;
				this.keyModified.set("start_number", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		MultiSelectLookup : class{
			constructor(){

				this.displayLabel=null;
				this.linkingModule=null;
				this.lookupApiname=null;
				this.apiName=null;
				this.connectedlookupApiname=null;
				this.id=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the displayLabel
			 * @returns {String} A String representing the displayLabel
			 */
			getDisplayLabel()	{
				return this.displayLabel;

			}

			/**
			 * The method to set the value to displayLabel
			 * @param {String} displayLabel A String
			 */
			setDisplayLabel(displayLabel)	{
				if((displayLabel != null) && (!(Object.prototype.toString.call(displayLabel) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: displayLabel EXPECTED TYPE: String", null, null);
				}
				this.displayLabel = displayLabel;
				this.keyModified.set("display_label", 1);

			}

			/**
			 * The method to get the linkingModule
			 * @returns {String} A String representing the linkingModule
			 */
			getLinkingModule()	{
				return this.linkingModule;

			}

			/**
			 * The method to set the value to linkingModule
			 * @param {String} linkingModule A String
			 */
			setLinkingModule(linkingModule)	{
				if((linkingModule != null) && (!(Object.prototype.toString.call(linkingModule) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: linkingModule EXPECTED TYPE: String", null, null);
				}
				this.linkingModule = linkingModule;
				this.keyModified.set("linking_module", 1);

			}

			/**
			 * The method to get the lookupApiname
			 * @returns {String} A String representing the lookupApiname
			 */
			getLookupApiname()	{
				return this.lookupApiname;

			}

			/**
			 * The method to set the value to lookupApiname
			 * @param {String} lookupApiname A String
			 */
			setLookupApiname(lookupApiname)	{
				if((lookupApiname != null) && (!(Object.prototype.toString.call(lookupApiname) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: lookupApiname EXPECTED TYPE: String", null, null);
				}
				this.lookupApiname = lookupApiname;
				this.keyModified.set("lookup_apiname", 1);

			}

			/**
			 * The method to get the apiName
			 * @returns {String} A String representing the apiName
			 */
			getAPIName()	{
				return this.apiName;

			}

			/**
			 * The method to set the value to apiName
			 * @param {String} apiName A String
			 */
			setAPIName(apiName)	{
				if((apiName != null) && (!(Object.prototype.toString.call(apiName) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: apiName EXPECTED TYPE: String", null, null);
				}
				this.apiName = apiName;
				this.keyModified.set("api_name", 1);

			}

			/**
			 * The method to get the connectedlookupApiname
			 * @returns {String} A String representing the connectedlookupApiname
			 */
			getConnectedlookupApiname()	{
				return this.connectedlookupApiname;

			}

			/**
			 * The method to set the value to connectedlookupApiname
			 * @param {String} connectedlookupApiname A String
			 */
			setConnectedlookupApiname(connectedlookupApiname)	{
				if((connectedlookupApiname != null) && (!(Object.prototype.toString.call(connectedlookupApiname) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: connectedlookupApiname EXPECTED TYPE: String", null, null);
				}
				this.connectedlookupApiname = connectedlookupApiname;
				this.keyModified.set("connectedlookup_apiname", 1);

			}

			/**
			 * The method to get the id
			 * @returns {Long} A BigInt representing the id
			 */
			getId()	{
				return this.id;

			}

			/**
			 * The method to set the value to id
			 * @param {Long} id A BigInt
			 */
			setId(id)	{
				if((id != null) && (!(Object.prototype.toString.call(id) == "[object BigInt]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
				}
				this.id = id;
				this.keyModified.set("id", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		PickListValue : class{
			constructor(){

				this.displayValue=null;
				this.sequenceNumber=null;
				this.expectedDataType=null;
				this.maps=null;
				this.actualValue=null;
				this.sysRefName=null;
				this.type=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the displayValue
			 * @returns {String} A String representing the displayValue
			 */
			getDisplayValue()	{
				return this.displayValue;

			}

			/**
			 * The method to set the value to displayValue
			 * @param {String} displayValue A String
			 */
			setDisplayValue(displayValue)	{
				if((displayValue != null) && (!(Object.prototype.toString.call(displayValue) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: displayValue EXPECTED TYPE: String", null, null);
				}
				this.displayValue = displayValue;
				this.keyModified.set("display_value", 1);

			}

			/**
			 * The method to get the sequenceNumber
			 * @returns {Integer} An Integer representing the sequenceNumber
			 */
			getSequenceNumber()	{
				return this.sequenceNumber;

			}

			/**
			 * The method to set the value to sequenceNumber
			 * @param {Integer} sequenceNumber An Integer
			 */
			setSequenceNumber(sequenceNumber)	{
				if((sequenceNumber != null) && (!(Object.prototype.toString.call(sequenceNumber) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: sequenceNumber EXPECTED TYPE: Integer", null, null);
				}
				this.sequenceNumber = sequenceNumber;
				this.keyModified.set("sequence_number", 1);

			}

			/**
			 * The method to get the expectedDataType
			 * @returns {String} A String representing the expectedDataType
			 */
			getExpectedDataType()	{
				return this.expectedDataType;

			}

			/**
			 * The method to set the value to expectedDataType
			 * @param {String} expectedDataType A String
			 */
			setExpectedDataType(expectedDataType)	{
				if((expectedDataType != null) && (!(Object.prototype.toString.call(expectedDataType) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: expectedDataType EXPECTED TYPE: String", null, null);
				}
				this.expectedDataType = expectedDataType;
				this.keyModified.set("expected_data_type", 1);

			}

			/**
			 * The method to get the maps
			 * @returns {List} An Array representing the maps
			 */
			getMaps()	{
				return this.maps;

			}

			/**
			 * The method to set the value to maps
			 * @param {List} maps An Array
			 */
			setMaps(maps)	{
				if((maps != null) && (!(Object.prototype.toString.call(maps) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: maps EXPECTED TYPE: Array", null, null);
				}
				this.maps = maps;
				this.keyModified.set("maps", 1);

			}

			/**
			 * The method to get the actualValue
			 * @returns {String} A String representing the actualValue
			 */
			getActualValue()	{
				return this.actualValue;

			}

			/**
			 * The method to set the value to actualValue
			 * @param {String} actualValue A String
			 */
			setActualValue(actualValue)	{
				if((actualValue != null) && (!(Object.prototype.toString.call(actualValue) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: actualValue EXPECTED TYPE: String", null, null);
				}
				this.actualValue = actualValue;
				this.keyModified.set("actual_value", 1);

			}

			/**
			 * The method to get the sysRefName
			 * @returns {String} A String representing the sysRefName
			 */
			getSysRefName()	{
				return this.sysRefName;

			}

			/**
			 * The method to set the value to sysRefName
			 * @param {String} sysRefName A String
			 */
			setSysRefName(sysRefName)	{
				if((sysRefName != null) && (!(Object.prototype.toString.call(sysRefName) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: sysRefName EXPECTED TYPE: String", null, null);
				}
				this.sysRefName = sysRefName;
				this.keyModified.set("sys_ref_name", 1);

			}

			/**
			 * The method to get the type
			 * @returns {String} A String representing the type
			 */
			getType()	{
				return this.type;

			}

			/**
			 * The method to set the value to type
			 * @param {String} type A String
			 */
			setType(type)	{
				if((type != null) && (!(Object.prototype.toString.call(type) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: type EXPECTED TYPE: String", null, null);
				}
				this.type = type;
				this.keyModified.set("type", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		ResponseWrapper : class{
			constructor(){

				this.fields=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the fields
			 * @returns {List} An Array representing the fields
			 */
			getFields()	{
				return this.fields;

			}

			/**
			 * The method to set the value to fields
			 * @param {List} fields An Array
			 */
			setFields(fields)	{
				if((fields != null) && (!(Object.prototype.toString.call(fields) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: fields EXPECTED TYPE: Array", null, null);
				}
				this.fields = fields;
				this.keyModified.set("fields", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		ToolTip : class{
			constructor(){

				this.name=null;
				this.value=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the name
			 * @returns {String} A String representing the name
			 */
			getName()	{
				return this.name;

			}

			/**
			 * The method to set the value to name
			 * @param {String} name A String
			 */
			setName(name)	{
				if((name != null) && (!(Object.prototype.toString.call(name) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: name EXPECTED TYPE: String", null, null);
				}
				this.name = name;
				this.keyModified.set("name", 1);

			}

			/**
			 * The method to get the value
			 * @returns {String} A String representing the value
			 */
			getValue()	{
				return this.value;

			}

			/**
			 * The method to set the value to value
			 * @param {String} value A String
			 */
			setValue(value)	{
				if((value != null) && (!(Object.prototype.toString.call(value) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: value EXPECTED TYPE: String", null, null);
				}
				this.value = value;
				this.keyModified.set("value", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		Currency : class{
			constructor(){

				this.roundingOption=null;
				this.precision=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the roundingOption
			 * @returns {String} A String representing the roundingOption
			 */
			getRoundingOption()	{
				return this.roundingOption;

			}

			/**
			 * The method to set the value to roundingOption
			 * @param {String} roundingOption A String
			 */
			setRoundingOption(roundingOption)	{
				if((roundingOption != null) && (!(Object.prototype.toString.call(roundingOption) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: roundingOption EXPECTED TYPE: String", null, null);
				}
				this.roundingOption = roundingOption;
				this.keyModified.set("rounding_option", 1);

			}

			/**
			 * The method to get the precision
			 * @returns {Integer} An Integer representing the precision
			 */
			getPrecision()	{
				return this.precision;

			}

			/**
			 * The method to set the value to precision
			 * @param {Integer} precision An Integer
			 */
			setPrecision(precision)	{
				if((precision != null) && (!(Object.prototype.toString.call(precision) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: precision EXPECTED TYPE: Integer", null, null);
				}
				this.precision = precision;
				this.keyModified.set("precision", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		Formula : class{
			constructor(){

				this.returnType=null;
				this.expression=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the returnType
			 * @returns {String} A String representing the returnType
			 */
			getReturnType()	{
				return this.returnType;

			}

			/**
			 * The method to set the value to returnType
			 * @param {String} returnType A String
			 */
			setReturnType(returnType)	{
				if((returnType != null) && (!(Object.prototype.toString.call(returnType) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: returnType EXPECTED TYPE: String", null, null);
				}
				this.returnType = returnType;
				this.keyModified.set("return_type", 1);

			}

			/**
			 * The method to get the expression
			 * @returns {String} A String representing the expression
			 */
			getExpression()	{
				return this.expression;

			}

			/**
			 * The method to set the value to expression
			 * @param {String} expression A String
			 */
			setExpression(expression)	{
				if((expression != null) && (!(Object.prototype.toString.call(expression) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: expression EXPECTED TYPE: String", null, null);
				}
				this.expression = expression;
				this.keyModified.set("expression", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		Private : class{
			constructor(){

				this.restricted=null;
				this.export1=null;
				this.type=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the restricted
			 * @returns {Boolean} A Boolean representing the restricted
			 */
			getRestricted()	{
				return this.restricted;

			}

			/**
			 * The method to set the value to restricted
			 * @param {Boolean} restricted A Boolean
			 */
			setRestricted(restricted)	{
				if((restricted != null) && (!(Object.prototype.toString.call(restricted) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: restricted EXPECTED TYPE: Boolean", null, null);
				}
				this.restricted = restricted;
				this.keyModified.set("restricted", 1);

			}

			/**
			 * The method to get the export
			 * @returns {Boolean} A Boolean representing the export1
			 */
			getExport()	{
				return this.export1;

			}

			/**
			 * The method to set the value to export
			 * @param {Boolean} export1 A Boolean
			 */
			setExport(export1)	{
				if((export1 != null) && (!(Object.prototype.toString.call(export1) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: export1 EXPECTED TYPE: Boolean", null, null);
				}
				this.export1 = export1;
				this.keyModified.set("export", 1);

			}

			/**
			 * The method to get the type
			 * @returns {String} A String representing the type
			 */
			getType()	{
				return this.type;

			}

			/**
			 * The method to set the value to type
			 * @param {String} type A String
			 */
			setType(type)	{
				if((type != null) && (!(Object.prototype.toString.call(type) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: type EXPECTED TYPE: String", null, null);
				}
				this.type = type;
				this.keyModified.set("type", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		LookupField : class{
			constructor(){

				this.id=null;
				this.name=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the id
			 * @returns {Long} A BigInt representing the id
			 */
			getId()	{
				return this.id;

			}

			/**
			 * The method to set the value to id
			 * @param {Long} id A BigInt
			 */
			setId(id)	{
				if((id != null) && (!(Object.prototype.toString.call(id) == "[object BigInt]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
				}
				this.id = id;
				this.keyModified.set("id", 1);

			}

			/**
			 * The method to get the name
			 * @returns {String} A String representing the name
			 */
			getName()	{
				return this.name;

			}

			/**
			 * The method to set the value to name
			 * @param {String} name A String
			 */
			setName(name)	{
				if((name != null) && (!(Object.prototype.toString.call(name) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: name EXPECTED TYPE: String", null, null);
				}
				this.name = name;
				this.keyModified.set("name", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		APIException : class{
			constructor(){

				this.status=null;
				this.code=null;
				this.message=null;
				this.details=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		Module : class{
			constructor(){

				this.layout=null;
				this.displayLabel=null;
				this.apiName=null;
				this.module=null;
				this.id=null;
				this.moduleName=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the layout
			 * @returns {Layout} An instance of Layout
			 */
			getLayout()	{
				return this.layout;

			}

			/**
			 * The method to set the value to layout
			 * @param {Layout} layout An instance of Layout
			 */
			setLayout(layout)	{
				if((layout != null) && (!(layout instanceof ZCRM.Layout.Model.Layout))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: layout EXPECTED TYPE: Layout", null, null);
				}
				this.layout = layout;
				this.keyModified.set("layout", 1);

			}

			/**
			 * The method to get the displayLabel
			 * @returns {String} A String representing the displayLabel
			 */
			getDisplayLabel()	{
				return this.displayLabel;

			}

			/**
			 * The method to set the value to displayLabel
			 * @param {String} displayLabel A String
			 */
			setDisplayLabel(displayLabel)	{
				if((displayLabel != null) && (!(Object.prototype.toString.call(displayLabel) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: displayLabel EXPECTED TYPE: String", null, null);
				}
				this.displayLabel = displayLabel;
				this.keyModified.set("display_label", 1);

			}

			/**
			 * The method to get the apiName
			 * @returns {String} A String representing the apiName
			 */
			getAPIName()	{
				return this.apiName;

			}

			/**
			 * The method to set the value to apiName
			 * @param {String} apiName A String
			 */
			setAPIName(apiName)	{
				if((apiName != null) && (!(Object.prototype.toString.call(apiName) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: apiName EXPECTED TYPE: String", null, null);
				}
				this.apiName = apiName;
				this.keyModified.set("api_name", 1);

			}

			/**
			 * The method to get the module
			 * @returns {String} A String representing the module
			 */
			getModule()	{
				return this.module;

			}

			/**
			 * The method to set the value to module
			 * @param {String} module A String
			 */
			setModule(module)	{
				if((module != null) && (!(Object.prototype.toString.call(module) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: module EXPECTED TYPE: String", null, null);
				}
				this.module = module;
				this.keyModified.set("module", 1);

			}

			/**
			 * The method to get the id
			 * @returns {Long} A BigInt representing the id
			 */
			getId()	{
				return this.id;

			}

			/**
			 * The method to set the value to id
			 * @param {Long} id A BigInt
			 */
			setId(id)	{
				if((id != null) && (!(Object.prototype.toString.call(id) == "[object BigInt]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
				}
				this.id = id;
				this.keyModified.set("id", 1);

			}

			/**
			 * The method to get the moduleName
			 * @returns {String} A String representing the moduleName
			 */
			getModuleName()	{
				return this.moduleName;

			}

			/**
			 * The method to set the value to moduleName
			 * @param {String} moduleName A String
			 */
			setModuleName(moduleName)	{
				if((moduleName != null) && (!(Object.prototype.toString.call(moduleName) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: moduleName EXPECTED TYPE: String", null, null);
				}
				this.moduleName = moduleName;
				this.keyModified.set("module_name", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		AssociationDetails : class{
			constructor(){

				this.lookupField=null;
				this.relatedField=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the lookupField
			 * @returns {LookupField} An instance of LookupField
			 */
			getLookupField()	{
				return this.lookupField;

			}

			/**
			 * The method to set the value to lookupField
			 * @param {LookupField} lookupField An instance of LookupField
			 */
			setLookupField(lookupField)	{
				if((lookupField != null) && (!(lookupField instanceof ZCRM.Field.Model.LookupField))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: lookupField EXPECTED TYPE: LookupField", null, null);
				}
				this.lookupField = lookupField;
				this.keyModified.set("lookup_field", 1);

			}

			/**
			 * The method to get the relatedField
			 * @returns {LookupField} An instance of LookupField
			 */
			getRelatedField()	{
				return this.relatedField;

			}

			/**
			 * The method to set the value to relatedField
			 * @param {LookupField} relatedField An instance of LookupField
			 */
			setRelatedField(relatedField)	{
				if((relatedField != null) && (!(relatedField instanceof ZCRM.Field.Model.LookupField))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: relatedField EXPECTED TYPE: LookupField", null, null);
				}
				this.relatedField = relatedField;
				this.keyModified.set("related_field", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		GetFieldsParam : {
			TYPE : 	new Param("type", "Field.Model.GetFieldsParam"),


		},

		GetFieldParam : {

		}
	},
	Operations : class {


		/**
		 * Creates an instance of FieldsOperations with the given parameters
		 * @param {String} module A String
		 */
		constructor(module=null){
			if((module != null) && (!(Object.prototype.toString.call(module) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: module EXPECTED TYPE: String", null, null);
			}
						this.module = module;

		}

		/**
		 * The method to get fields
		 * @param {ParameterMap} paramInstance An instance of ParameterMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getFields(paramInstance=null){
			if((paramInstance != null) && (!(paramInstance instanceof ParameterMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paramInstance EXPECTED TYPE: ParameterMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/settings/fields");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			await handlerInstance.addParam(new Param("module", "Field.Model.GetFieldsParam"), this.module);
			handlerInstance.setParam(paramInstance);
			return handlerInstance.apiCall("Field.Model.ResponseHandler", "application/json");

		}

		/**
		 * The method to get field
		 * @param {Long} id A BigInt
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getField(id){
			if((!(Object.prototype.toString.call(id) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/settings/fields/");
			apiPath = apiPath.concat(id.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			await handlerInstance.addParam(new Param("module", "Field.Model.GetFieldParam"), this.module);
			return handlerInstance.apiCall("Field.Model.ResponseHandler", "application/json");

		}

	},

}

ZCRM.Profile = {
	Model : {
		ResponseHandler : class{
			constructor(){

			}


		},

		APIException : class{
			constructor(){

				this.status=null;
				this.code=null;
				this.message=null;
				this.details=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		Category : class{
			constructor(){

				this.displayLabel=null;
				this.permissionsDetails=null;
				this.name=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the displayLabel
			 * @returns {String} A String representing the displayLabel
			 */
			getDisplayLabel()	{
				return this.displayLabel;

			}

			/**
			 * The method to set the value to displayLabel
			 * @param {String} displayLabel A String
			 */
			setDisplayLabel(displayLabel)	{
				if((displayLabel != null) && (!(Object.prototype.toString.call(displayLabel) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: displayLabel EXPECTED TYPE: String", null, null);
				}
				this.displayLabel = displayLabel;
				this.keyModified.set("display_label", 1);

			}

			/**
			 * The method to get the permissionsDetails
			 * @returns {List} An Array representing the permissionsDetails
			 */
			getPermissionsDetails()	{
				return this.permissionsDetails;

			}

			/**
			 * The method to set the value to permissionsDetails
			 * @param {List} permissionsDetails An Array
			 */
			setPermissionsDetails(permissionsDetails)	{
				if((permissionsDetails != null) && (!(Object.prototype.toString.call(permissionsDetails) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: permissionsDetails EXPECTED TYPE: Array", null, null);
				}
				this.permissionsDetails = permissionsDetails;
				this.keyModified.set("permissions_details", 1);

			}

			/**
			 * The method to get the name
			 * @returns {String} A String representing the name
			 */
			getName()	{
				return this.name;

			}

			/**
			 * The method to set the value to name
			 * @param {String} name A String
			 */
			setName(name)	{
				if((name != null) && (!(Object.prototype.toString.call(name) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: name EXPECTED TYPE: String", null, null);
				}
				this.name = name;
				this.keyModified.set("name", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		Profile : class{
			constructor(){

				this.displayLabel=null;
				this.createdTime=null;
				this.modifiedTime=null;
				this.permissionsDetails=null;
				this.name=null;
				this.modifiedBy=null;
				this.default1=null;
				this.description=null;
				this.id=null;
				this.category=null;
				this.createdBy=null;
				this.sections=null;
				this.delete1=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the displayLabel
			 * @returns {String} A String representing the displayLabel
			 */
			getDisplayLabel()	{
				return this.displayLabel;

			}

			/**
			 * The method to set the value to displayLabel
			 * @param {String} displayLabel A String
			 */
			setDisplayLabel(displayLabel)	{
				if((displayLabel != null) && (!(Object.prototype.toString.call(displayLabel) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: displayLabel EXPECTED TYPE: String", null, null);
				}
				this.displayLabel = displayLabel;
				this.keyModified.set("display_label", 1);

			}

			/**
			 * The method to get the createdTime
			 * @returns {OffsetDateTime} An instance of OffsetDateTime
			 */
			getCreatedTime()	{
				return this.createdTime;

			}

			/**
			 * The method to set the value to createdTime
			 * @param {OffsetDateTime} createdTime An instance of OffsetDateTime
			 */
			setCreatedTime(createdTime)	{
				if((createdTime != null) && (!(createdTime instanceof Date))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: createdTime EXPECTED TYPE: Date", null, null);
				}
				this.createdTime = createdTime;
				this.keyModified.set("created_time", 1);

			}

			/**
			 * The method to get the modifiedTime
			 * @returns {OffsetDateTime} An instance of OffsetDateTime
			 */
			getModifiedTime()	{
				return this.modifiedTime;

			}

			/**
			 * The method to set the value to modifiedTime
			 * @param {OffsetDateTime} modifiedTime An instance of OffsetDateTime
			 */
			setModifiedTime(modifiedTime)	{
				if((modifiedTime != null) && (!(modifiedTime instanceof Date))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modifiedTime EXPECTED TYPE: Date", null, null);
				}
				this.modifiedTime = modifiedTime;
				this.keyModified.set("modified_time", 1);

			}

			/**
			 * The method to get the permissionsDetails
			 * @returns {List} An Array representing the permissionsDetails
			 */
			getPermissionsDetails()	{
				return this.permissionsDetails;

			}

			/**
			 * The method to set the value to permissionsDetails
			 * @param {List} permissionsDetails An Array
			 */
			setPermissionsDetails(permissionsDetails)	{
				if((permissionsDetails != null) && (!(Object.prototype.toString.call(permissionsDetails) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: permissionsDetails EXPECTED TYPE: Array", null, null);
				}
				this.permissionsDetails = permissionsDetails;
				this.keyModified.set("permissions_details", 1);

			}

			/**
			 * The method to get the name
			 * @returns {String} A String representing the name
			 */
			getName()	{
				return this.name;

			}

			/**
			 * The method to set the value to name
			 * @param {String} name A String
			 */
			setName(name)	{
				if((name != null) && (!(Object.prototype.toString.call(name) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: name EXPECTED TYPE: String", null, null);
				}
				this.name = name;
				this.keyModified.set("name", 1);

			}

			/**
			 * The method to get the modifiedBy
			 * @returns {User} An instance of User
			 */
			getModifiedBy()	{
				return this.modifiedBy;

			}

			/**
			 * The method to set the value to modifiedBy
			 * @param {User} modifiedBy An instance of User
			 */
			setModifiedBy(modifiedBy)	{
				if((modifiedBy != null) && (!(modifiedBy instanceof ZCRM.User.Model.User))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modifiedBy EXPECTED TYPE: User", null, null);
				}
				this.modifiedBy = modifiedBy;
				this.keyModified.set("modified_by", 1);

			}

			/**
			 * The method to get the default
			 * @returns {Boolean} A Boolean representing the default1
			 */
			getDefault()	{
				return this.default1;

			}

			/**
			 * The method to set the value to default
			 * @param {Boolean} default1 A Boolean
			 */
			setDefault(default1)	{
				if((default1 != null) && (!(Object.prototype.toString.call(default1) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: default1 EXPECTED TYPE: Boolean", null, null);
				}
				this.default1 = default1;
				this.keyModified.set("default", 1);

			}

			/**
			 * The method to get the description
			 * @returns {String} A String representing the description
			 */
			getDescription()	{
				return this.description;

			}

			/**
			 * The method to set the value to description
			 * @param {String} description A String
			 */
			setDescription(description)	{
				if((description != null) && (!(Object.prototype.toString.call(description) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: description EXPECTED TYPE: String", null, null);
				}
				this.description = description;
				this.keyModified.set("description", 1);

			}

			/**
			 * The method to get the id
			 * @returns {Long} A BigInt representing the id
			 */
			getId()	{
				return this.id;

			}

			/**
			 * The method to set the value to id
			 * @param {Long} id A BigInt
			 */
			setId(id)	{
				if((id != null) && (!(Object.prototype.toString.call(id) == "[object BigInt]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
				}
				this.id = id;
				this.keyModified.set("id", 1);

			}

			/**
			 * The method to get the category
			 * @returns {Boolean} A Boolean representing the category
			 */
			getCategory()	{
				return this.category;

			}

			/**
			 * The method to set the value to category
			 * @param {Boolean} category A Boolean
			 */
			setCategory(category)	{
				if((category != null) && (!(Object.prototype.toString.call(category) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: category EXPECTED TYPE: Boolean", null, null);
				}
				this.category = category;
				this.keyModified.set("category", 1);

			}

			/**
			 * The method to get the createdBy
			 * @returns {User} An instance of User
			 */
			getCreatedBy()	{
				return this.createdBy;

			}

			/**
			 * The method to set the value to createdBy
			 * @param {User} createdBy An instance of User
			 */
			setCreatedBy(createdBy)	{
				if((createdBy != null) && (!(createdBy instanceof ZCRM.User.Model.User))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: createdBy EXPECTED TYPE: User", null, null);
				}
				this.createdBy = createdBy;
				this.keyModified.set("created_by", 1);

			}

			/**
			 * The method to get the sections
			 * @returns {List} An Array representing the sections
			 */
			getSections()	{
				return this.sections;

			}

			/**
			 * The method to set the value to sections
			 * @param {List} sections An Array
			 */
			setSections(sections)	{
				if((sections != null) && (!(Object.prototype.toString.call(sections) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: sections EXPECTED TYPE: Array", null, null);
				}
				this.sections = sections;
				this.keyModified.set("sections", 1);

			}

			/**
			 * The method to get the delete
			 * @returns {Boolean} A Boolean representing the delete1
			 */
			getDelete()	{
				return this.delete1;

			}

			/**
			 * The method to set the value to delete
			 * @param {Boolean} delete1 A Boolean
			 */
			setDelete(delete1)	{
				if((delete1 != null) && (!(Object.prototype.toString.call(delete1) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: delete1 EXPECTED TYPE: Boolean", null, null);
				}
				this.delete1 = delete1;
				this.keyModified.set("_delete", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		PermissionDetail : class{
			constructor(){

				this.displayLabel=null;
				this.module=null;
				this.name=null;
				this.id=null;
				this.enabled=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the displayLabel
			 * @returns {String} A String representing the displayLabel
			 */
			getDisplayLabel()	{
				return this.displayLabel;

			}

			/**
			 * The method to set the value to displayLabel
			 * @param {String} displayLabel A String
			 */
			setDisplayLabel(displayLabel)	{
				if((displayLabel != null) && (!(Object.prototype.toString.call(displayLabel) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: displayLabel EXPECTED TYPE: String", null, null);
				}
				this.displayLabel = displayLabel;
				this.keyModified.set("display_label", 1);

			}

			/**
			 * The method to get the module
			 * @returns {String} A String representing the module
			 */
			getModule()	{
				return this.module;

			}

			/**
			 * The method to set the value to module
			 * @param {String} module A String
			 */
			setModule(module)	{
				if((module != null) && (!(Object.prototype.toString.call(module) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: module EXPECTED TYPE: String", null, null);
				}
				this.module = module;
				this.keyModified.set("module", 1);

			}

			/**
			 * The method to get the name
			 * @returns {String} A String representing the name
			 */
			getName()	{
				return this.name;

			}

			/**
			 * The method to set the value to name
			 * @param {String} name A String
			 */
			setName(name)	{
				if((name != null) && (!(Object.prototype.toString.call(name) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: name EXPECTED TYPE: String", null, null);
				}
				this.name = name;
				this.keyModified.set("name", 1);

			}

			/**
			 * The method to get the id
			 * @returns {Long} A BigInt representing the id
			 */
			getId()	{
				return this.id;

			}

			/**
			 * The method to set the value to id
			 * @param {Long} id A BigInt
			 */
			setId(id)	{
				if((id != null) && (!(Object.prototype.toString.call(id) == "[object BigInt]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
				}
				this.id = id;
				this.keyModified.set("id", 1);

			}

			/**
			 * The method to get the enabled
			 * @returns {Boolean} A Boolean representing the enabled
			 */
			getEnabled()	{
				return this.enabled;

			}

			/**
			 * The method to set the value to enabled
			 * @param {Boolean} enabled A Boolean
			 */
			setEnabled(enabled)	{
				if((enabled != null) && (!(Object.prototype.toString.call(enabled) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: enabled EXPECTED TYPE: Boolean", null, null);
				}
				this.enabled = enabled;
				this.keyModified.set("enabled", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		Section : class{
			constructor(){

				this.name=null;
				this.categories=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the name
			 * @returns {String} A String representing the name
			 */
			getName()	{
				return this.name;

			}

			/**
			 * The method to set the value to name
			 * @param {String} name A String
			 */
			setName(name)	{
				if((name != null) && (!(Object.prototype.toString.call(name) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: name EXPECTED TYPE: String", null, null);
				}
				this.name = name;
				this.keyModified.set("name", 1);

			}

			/**
			 * The method to get the categories
			 * @returns {List} An Array representing the categories
			 */
			getCategories()	{
				return this.categories;

			}

			/**
			 * The method to set the value to categories
			 * @param {List} categories An Array
			 */
			setCategories(categories)	{
				if((categories != null) && (!(Object.prototype.toString.call(categories) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: categories EXPECTED TYPE: Array", null, null);
				}
				this.categories = categories;
				this.keyModified.set("categories", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		ResponseWrapper : class{
			constructor(){

				this.profiles=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the profiles
			 * @returns {List} An Array representing the profiles
			 */
			getProfiles()	{
				return this.profiles;

			}

			/**
			 * The method to set the value to profiles
			 * @param {List} profiles An Array
			 */
			setProfiles(profiles)	{
				if((profiles != null) && (!(Object.prototype.toString.call(profiles) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: profiles EXPECTED TYPE: Array", null, null);
				}
				this.profiles = profiles;
				this.keyModified.set("profiles", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		GetProfilesHeader : {

		},

		GetProfileHeader : {

		}
	},
	Operations : class {


		/**
		 * Creates an instance of ProfilesOperations with the given parameters
		 * @param {OffsetDateTime} ifModifiedSince An instance of OffsetDateTime
		 */
		constructor(ifModifiedSince=null){
			if((ifModifiedSince != null) && (!(ifModifiedSince instanceof Date))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: ifModifiedSince EXPECTED TYPE: Date", null, null);
			}
						this.ifModifiedSince = ifModifiedSince;

		}

		/**
		 * The method to get profiles
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getProfiles(){
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/settings/profiles");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			await handlerInstance.addHeader(new Header("If-Modified-Since", "Profile.Model.GetProfilesHeader"), this.ifModifiedSince);
			return handlerInstance.apiCall("Profile.Model.ResponseHandler", "application/json");

		}

		/**
		 * The method to get profile
		 * @param {Long} id A BigInt
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getProfile(id){
			if((!(Object.prototype.toString.call(id) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/settings/profiles/");
			apiPath = apiPath.concat(id.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			await handlerInstance.addHeader(new Header("If-Modified-Since", "Profile.Model.GetProfileHeader"), this.ifModifiedSince);
			return handlerInstance.apiCall("Profile.Model.ResponseHandler", "application/json");

		}

	},

}

ZCRM.ShareRecord = {
	Model : {
		ActionHandler : class{
			constructor(){

			}


		},

		DeleteActionResponse : class{
			constructor(){

			}


		},

		ResponseHandler : class{
			constructor(){

			}


		},

		DeleteActionHandler : class{
			constructor(){

			}


		},

		ActionResponse : class{
			constructor(){

			}


		},

		SuccessResponse : class{
			constructor(){

				this.status=null;
				this.code=null;
				this.message=null;
				this.details=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		SharedThrough : class{
			constructor(){

				this.module=null;
				this.id=null;
				this.entityName=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the module
			 * @returns {Module} An instance of Module
			 */
			getModule()	{
				return this.module;

			}

			/**
			 * The method to set the value to module
			 * @param {Module} module An instance of Module
			 */
			setModule(module)	{
				if((module != null) && (!(module instanceof ZCRM.Module.Model.Module))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: module EXPECTED TYPE: Module", null, null);
				}
				this.module = module;
				this.keyModified.set("module", 1);

			}

			/**
			 * The method to get the id
			 * @returns {Long} A BigInt representing the id
			 */
			getId()	{
				return this.id;

			}

			/**
			 * The method to set the value to id
			 * @param {Long} id A BigInt
			 */
			setId(id)	{
				if((id != null) && (!(Object.prototype.toString.call(id) == "[object BigInt]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
				}
				this.id = id;
				this.keyModified.set("id", 1);

			}

			/**
			 * The method to get the entityName
			 * @returns {String} A String representing the entityName
			 */
			getEntityName()	{
				return this.entityName;

			}

			/**
			 * The method to set the value to entityName
			 * @param {String} entityName A String
			 */
			setEntityName(entityName)	{
				if((entityName != null) && (!(Object.prototype.toString.call(entityName) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: entityName EXPECTED TYPE: String", null, null);
				}
				this.entityName = entityName;
				this.keyModified.set("entity_name", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		APIException : class{
			constructor(){

				this.status=null;
				this.code=null;
				this.message=null;
				this.details=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		ResponseWrapper : class{
			constructor(){

				this.share=null;
				this.shareableUser=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the share
			 * @returns {List} An Array representing the share
			 */
			getShare()	{
				return this.share;

			}

			/**
			 * The method to set the value to share
			 * @param {List} share An Array
			 */
			setShare(share)	{
				if((share != null) && (!(Object.prototype.toString.call(share) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: share EXPECTED TYPE: Array", null, null);
				}
				this.share = share;
				this.keyModified.set("share", 1);

			}

			/**
			 * The method to get the shareableUser
			 * @returns {List} An Array representing the shareableUser
			 */
			getShareableUser()	{
				return this.shareableUser;

			}

			/**
			 * The method to set the value to shareableUser
			 * @param {List} shareableUser An Array
			 */
			setShareableUser(shareableUser)	{
				if((shareableUser != null) && (!(Object.prototype.toString.call(shareableUser) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: shareableUser EXPECTED TYPE: Array", null, null);
				}
				this.shareableUser = shareableUser;
				this.keyModified.set("shareable_user", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		ShareRecord : class{
			constructor(){

				this.shareRelatedRecords=null;
				this.sharedThrough=null;
				this.sharedTime=null;
				this.permission=null;
				this.sharedBy=null;
				this.user=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the shareRelatedRecords
			 * @returns {Boolean} A Boolean representing the shareRelatedRecords
			 */
			getShareRelatedRecords()	{
				return this.shareRelatedRecords;

			}

			/**
			 * The method to set the value to shareRelatedRecords
			 * @param {Boolean} shareRelatedRecords A Boolean
			 */
			setShareRelatedRecords(shareRelatedRecords)	{
				if((shareRelatedRecords != null) && (!(Object.prototype.toString.call(shareRelatedRecords) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: shareRelatedRecords EXPECTED TYPE: Boolean", null, null);
				}
				this.shareRelatedRecords = shareRelatedRecords;
				this.keyModified.set("share_related_records", 1);

			}

			/**
			 * The method to get the sharedThrough
			 * @returns {SharedThrough} An instance of SharedThrough
			 */
			getSharedThrough()	{
				return this.sharedThrough;

			}

			/**
			 * The method to set the value to sharedThrough
			 * @param {SharedThrough} sharedThrough An instance of SharedThrough
			 */
			setSharedThrough(sharedThrough)	{
				if((sharedThrough != null) && (!(sharedThrough instanceof ZCRM.ShareRecord.Model.SharedThrough))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: sharedThrough EXPECTED TYPE: SharedThrough", null, null);
				}
				this.sharedThrough = sharedThrough;
				this.keyModified.set("shared_through", 1);

			}

			/**
			 * The method to get the sharedTime
			 * @returns {OffsetDateTime} An instance of OffsetDateTime
			 */
			getSharedTime()	{
				return this.sharedTime;

			}

			/**
			 * The method to set the value to sharedTime
			 * @param {OffsetDateTime} sharedTime An instance of OffsetDateTime
			 */
			setSharedTime(sharedTime)	{
				if((sharedTime != null) && (!(sharedTime instanceof Date))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: sharedTime EXPECTED TYPE: Date", null, null);
				}
				this.sharedTime = sharedTime;
				this.keyModified.set("shared_time", 1);

			}

			/**
			 * The method to get the permission
			 * @returns {String} A String representing the permission
			 */
			getPermission()	{
				return this.permission;

			}

			/**
			 * The method to set the value to permission
			 * @param {String} permission A String
			 */
			setPermission(permission)	{
				if((permission != null) && (!(Object.prototype.toString.call(permission) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: permission EXPECTED TYPE: String", null, null);
				}
				this.permission = permission;
				this.keyModified.set("permission", 1);

			}

			/**
			 * The method to get the sharedBy
			 * @returns {User} An instance of User
			 */
			getSharedBy()	{
				return this.sharedBy;

			}

			/**
			 * The method to set the value to sharedBy
			 * @param {User} sharedBy An instance of User
			 */
			setSharedBy(sharedBy)	{
				if((sharedBy != null) && (!(sharedBy instanceof ZCRM.User.Model.User))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: sharedBy EXPECTED TYPE: User", null, null);
				}
				this.sharedBy = sharedBy;
				this.keyModified.set("shared_by", 1);

			}

			/**
			 * The method to get the user
			 * @returns {User} An instance of User
			 */
			getUser()	{
				return this.user;

			}

			/**
			 * The method to set the value to user
			 * @param {User} user An instance of User
			 */
			setUser(user)	{
				if((user != null) && (!(user instanceof ZCRM.User.Model.User))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: user EXPECTED TYPE: User", null, null);
				}
				this.user = user;
				this.keyModified.set("user", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		DeleteActionWrapper : class{
			constructor(){

				this.share=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the share
			 * @returns {DeleteActionResponse} An instance of DeleteActionResponse
			 */
			getShare()	{
				return this.share;

			}

			/**
			 * The method to set the value to share
			 * @param {DeleteActionResponse} share An instance of DeleteActionResponse
			 */
			setShare(share)	{
				if((share != null) && (!(share instanceof ZCRM.ShareRecord.Model.DeleteActionResponse))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: share EXPECTED TYPE: DeleteActionResponse", null, null);
				}
				this.share = share;
				this.keyModified.set("share", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		BodyWrapper : class{
			constructor(){

				this.share=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the share
			 * @returns {List} An Array representing the share
			 */
			getShare()	{
				return this.share;

			}

			/**
			 * The method to set the value to share
			 * @param {List} share An Array
			 */
			setShare(share)	{
				if((share != null) && (!(Object.prototype.toString.call(share) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: share EXPECTED TYPE: Array", null, null);
				}
				this.share = share;
				this.keyModified.set("share", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		ActionWrapper : class{
			constructor(){

				this.share=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the share
			 * @returns {List} An Array representing the share
			 */
			getShare()	{
				return this.share;

			}

			/**
			 * The method to set the value to share
			 * @param {List} share An Array
			 */
			setShare(share)	{
				if((share != null) && (!(Object.prototype.toString.call(share) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: share EXPECTED TYPE: Array", null, null);
				}
				this.share = share;
				this.keyModified.set("share", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		GetSharedRecordDetailsParam : {
			SHAREDTO : 	new Param("sharedTo", "ShareRecord.Model.GetSharedRecordDetailsParam"),

			VIEW : 	new Param("view", "ShareRecord.Model.GetSharedRecordDetailsParam"),


		}
	},
	Operations : class {


		/**
		 * Creates an instance of ShareRecordsOperations with the given parameters
		 * @param {Long} recordId A BigInt
		 * @param {String} moduleAPIName A String
		 */
		constructor(recordId, moduleAPIName){
			if((!(Object.prototype.toString.call(recordId) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: recordId EXPECTED TYPE: BigInt", null, null);
			}
			if((!(Object.prototype.toString.call(moduleAPIName) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: moduleAPIName EXPECTED TYPE: String", null, null);
			}
						this.recordId = recordId;
						this.moduleAPIName = moduleAPIName;

		}

		/**
		 * The method to get shared record details
		 * @param {ParameterMap} paramInstance An instance of ParameterMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getSharedRecordDetails(paramInstance=null){
			if((paramInstance != null) && (!(paramInstance instanceof ParameterMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paramInstance EXPECTED TYPE: ParameterMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/");
			apiPath = apiPath.concat(this.moduleAPIName.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(this.recordId.toString());
			apiPath = apiPath.concat("/actions/share");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			handlerInstance.setParam(paramInstance);
			return handlerInstance.apiCall("ShareRecord.Model.ResponseHandler", "application/json");

		}

		/**
		 * The method to share record
		 * @param {BodyWrapper} request An instance of BodyWrapper
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async shareRecord(request){
			if((request != null) && (!(request instanceof ZCRM.ShareRecord.Model.BodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: BodyWrapper", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/");
			apiPath = apiPath.concat(this.moduleAPIName.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(this.recordId.toString());
			apiPath = apiPath.concat("/actions/share");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_POST);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_CREATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			handlerInstance.setMandatoryChecker(true);
			return handlerInstance.apiCall("ShareRecord.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to update share permissions
		 * @param {BodyWrapper} request An instance of BodyWrapper
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async updateSharePermissions(request){
			if((request != null) && (!(request instanceof ZCRM.ShareRecord.Model.BodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: BodyWrapper", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/");
			apiPath = apiPath.concat(this.moduleAPIName.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(this.recordId.toString());
			apiPath = apiPath.concat("/actions/share");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_PUT);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_UPDATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			handlerInstance.setMandatoryChecker(true);
			return handlerInstance.apiCall("ShareRecord.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to revoke shared record
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async revokeSharedRecord(){
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/");
			apiPath = apiPath.concat(this.moduleAPIName.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(this.recordId.toString());
			apiPath = apiPath.concat("/actions/share");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_DELETE);
			handlerInstance.setCategoryMethod(Constants.REQUEST_METHOD_DELETE);
			return handlerInstance.apiCall("ShareRecord.Model.DeleteActionHandler", "application/json");

		}

	},

}

ZCRM.Query = {
	Model : {
		ResponseHandler : class{
			constructor(){

			}


		},

		ResponseWrapper : class{
			constructor(){

				this.data=null;
				this.info=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the data
			 * @returns {List} An Array representing the data
			 */
			getData()	{
				return this.data;

			}

			/**
			 * The method to set the value to data
			 * @param {List} data An Array
			 */
			setData(data)	{
				if((data != null) && (!(Object.prototype.toString.call(data) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: data EXPECTED TYPE: Array", null, null);
				}
				this.data = data;
				this.keyModified.set("data", 1);

			}

			/**
			 * The method to get the info
			 * @returns {Info} An instance of Info
			 */
			getInfo()	{
				return this.info;

			}

			/**
			 * The method to set the value to info
			 * @param {Info} info An instance of Info
			 */
			setInfo(info)	{
				if((info != null) && (!(info instanceof ZCRM.Record.Model.Info))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: info EXPECTED TYPE: Info", null, null);
				}
				this.info = info;
				this.keyModified.set("info", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		BodyWrapper : class{
			constructor(){

				this.selectQuery=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the selectQuery
			 * @returns {String} A String representing the selectQuery
			 */
			getSelectQuery()	{
				return this.selectQuery;

			}

			/**
			 * The method to set the value to selectQuery
			 * @param {String} selectQuery A String
			 */
			setSelectQuery(selectQuery)	{
				if((selectQuery != null) && (!(Object.prototype.toString.call(selectQuery) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: selectQuery EXPECTED TYPE: String", null, null);
				}
				this.selectQuery = selectQuery;
				this.keyModified.set("select_query", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		APIException : class{
			constructor(){

				this.status=null;
				this.code=null;
				this.message=null;
				this.details=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		}
	},
	Operations : class {
		constructor(){

		}

		/**
		 * The method to get records
		 * @param {BodyWrapper} request An instance of BodyWrapper
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getRecords(request){
			if((request != null) && (!(request instanceof ZCRM.Query.Model.BodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: BodyWrapper", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/coql");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_POST);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_CREATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			handlerInstance.setMandatoryChecker(true);
			return handlerInstance.apiCall("Query.Model.ResponseHandler", "application/json");

		}
	},

}

ZCRM.Attachment = {
	Model : {
		ActionResponse : class{
			constructor(){

			}


		},

		ResponseHandler : class{
			constructor(){

			}


		},

		ActionHandler : class{
			constructor(){

			}


		},

		SuccessResponse : class{
			constructor(){

				this.code=null;
				this.details=null;
				this.message=null;
				this.status=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		APIException : class{
			constructor(){

				this.status=null;
				this.code=null;
				this.message=null;
				this.details=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		Attachment : class{
			constructor(){

				this.owner=null;
				this.modifiedTime=null;
				this.fileName=null;
				this.createdTime=null;
				this.size=null;
				this.parentId=null;
				this.editable=null;
				this.fileId=null;
				this.type=null;
				this.seModule=null;
				this.modifiedBy=null;
				this.state=null;
				this.id=null;
				this.createdBy=null;
				this.linkUrl=null;
				this.description=null;
				this.category=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the owner
			 * @returns {User} An instance of User
			 */
			getOwner()	{
				return this.owner;

			}

			/**
			 * The method to set the value to owner
			 * @param {User} owner An instance of User
			 */
			setOwner(owner)	{
				if((owner != null) && (!(owner instanceof ZCRM.User.Model.User))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: owner EXPECTED TYPE: User", null, null);
				}
				this.owner = owner;
				this.keyModified.set("Owner", 1);

			}

			/**
			 * The method to get the modifiedTime
			 * @returns {OffsetDateTime} An instance of OffsetDateTime
			 */
			getModifiedTime()	{
				return this.modifiedTime;

			}

			/**
			 * The method to set the value to modifiedTime
			 * @param {OffsetDateTime} modifiedTime An instance of OffsetDateTime
			 */
			setModifiedTime(modifiedTime)	{
				if((modifiedTime != null) && (!(modifiedTime instanceof Date))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modifiedTime EXPECTED TYPE: Date", null, null);
				}
				this.modifiedTime = modifiedTime;
				this.keyModified.set("Modified_Time", 1);

			}

			/**
			 * The method to get the fileName
			 * @returns {String} A String representing the fileName
			 */
			getFileName()	{
				return this.fileName;

			}

			/**
			 * The method to set the value to fileName
			 * @param {String} fileName A String
			 */
			setFileName(fileName)	{
				if((fileName != null) && (!(Object.prototype.toString.call(fileName) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: fileName EXPECTED TYPE: String", null, null);
				}
				this.fileName = fileName;
				this.keyModified.set("File_Name", 1);

			}

			/**
			 * The method to get the createdTime
			 * @returns {OffsetDateTime} An instance of OffsetDateTime
			 */
			getCreatedTime()	{
				return this.createdTime;

			}

			/**
			 * The method to set the value to createdTime
			 * @param {OffsetDateTime} createdTime An instance of OffsetDateTime
			 */
			setCreatedTime(createdTime)	{
				if((createdTime != null) && (!(createdTime instanceof Date))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: createdTime EXPECTED TYPE: Date", null, null);
				}
				this.createdTime = createdTime;
				this.keyModified.set("Created_Time", 1);

			}

			/**
			 * The method to get the size
			 * @returns {Long} A BigInt representing the size
			 */
			getSize()	{
				return this.size;

			}

			/**
			 * The method to set the value to size
			 * @param {Long} size A BigInt
			 */
			setSize(size)	{
				if((size != null) && (!(Object.prototype.toString.call(size) == "[object BigInt]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: size EXPECTED TYPE: BigInt", null, null);
				}
				this.size = size;
				this.keyModified.set("Size", 1);

			}

			/**
			 * The method to get the parentId
			 * @returns {Record} An instance of Record
			 */
			getParentId()	{
				return this.parentId;

			}

			/**
			 * The method to set the value to parentId
			 * @param {Record} parentId An instance of Record
			 */
			setParentId(parentId)	{
				if((parentId != null) && (!(parentId instanceof ZCRM.Record.Model.Record))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: parentId EXPECTED TYPE: Record", null, null);
				}
				this.parentId = parentId;
				this.keyModified.set("Parent_Id", 1);

			}

			/**
			 * The method to get the editable
			 * @returns {Boolean} A Boolean representing the editable
			 */
			getEditable()	{
				return this.editable;

			}

			/**
			 * The method to set the value to editable
			 * @param {Boolean} editable A Boolean
			 */
			setEditable(editable)	{
				if((editable != null) && (!(Object.prototype.toString.call(editable) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: editable EXPECTED TYPE: Boolean", null, null);
				}
				this.editable = editable;
				this.keyModified.set("$editable", 1);

			}

			/**
			 * The method to get the fileId
			 * @returns {String} A String representing the fileId
			 */
			getFileId()	{
				return this.fileId;

			}

			/**
			 * The method to set the value to fileId
			 * @param {String} fileId A String
			 */
			setFileId(fileId)	{
				if((fileId != null) && (!(Object.prototype.toString.call(fileId) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: fileId EXPECTED TYPE: String", null, null);
				}
				this.fileId = fileId;
				this.keyModified.set("$file_id", 1);

			}

			/**
			 * The method to get the type
			 * @returns {String} A String representing the type
			 */
			getType()	{
				return this.type;

			}

			/**
			 * The method to set the value to type
			 * @param {String} type A String
			 */
			setType(type)	{
				if((type != null) && (!(Object.prototype.toString.call(type) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: type EXPECTED TYPE: String", null, null);
				}
				this.type = type;
				this.keyModified.set("$type", 1);

			}

			/**
			 * The method to get the seModule
			 * @returns {String} A String representing the seModule
			 */
			getSeModule()	{
				return this.seModule;

			}

			/**
			 * The method to set the value to seModule
			 * @param {String} seModule A String
			 */
			setSeModule(seModule)	{
				if((seModule != null) && (!(Object.prototype.toString.call(seModule) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: seModule EXPECTED TYPE: String", null, null);
				}
				this.seModule = seModule;
				this.keyModified.set("$se_module", 1);

			}

			/**
			 * The method to get the modifiedBy
			 * @returns {User} An instance of User
			 */
			getModifiedBy()	{
				return this.modifiedBy;

			}

			/**
			 * The method to set the value to modifiedBy
			 * @param {User} modifiedBy An instance of User
			 */
			setModifiedBy(modifiedBy)	{
				if((modifiedBy != null) && (!(modifiedBy instanceof ZCRM.User.Model.User))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modifiedBy EXPECTED TYPE: User", null, null);
				}
				this.modifiedBy = modifiedBy;
				this.keyModified.set("Modified_By", 1);

			}

			/**
			 * The method to get the state
			 * @returns {String} A String representing the state
			 */
			getState()	{
				return this.state;

			}

			/**
			 * The method to set the value to state
			 * @param {String} state A String
			 */
			setState(state)	{
				if((state != null) && (!(Object.prototype.toString.call(state) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: state EXPECTED TYPE: String", null, null);
				}
				this.state = state;
				this.keyModified.set("$state", 1);

			}

			/**
			 * The method to get the id
			 * @returns {Long} A BigInt representing the id
			 */
			getId()	{
				return this.id;

			}

			/**
			 * The method to set the value to id
			 * @param {Long} id A BigInt
			 */
			setId(id)	{
				if((id != null) && (!(Object.prototype.toString.call(id) == "[object BigInt]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
				}
				this.id = id;
				this.keyModified.set("id", 1);

			}

			/**
			 * The method to get the createdBy
			 * @returns {User} An instance of User
			 */
			getCreatedBy()	{
				return this.createdBy;

			}

			/**
			 * The method to set the value to createdBy
			 * @param {User} createdBy An instance of User
			 */
			setCreatedBy(createdBy)	{
				if((createdBy != null) && (!(createdBy instanceof ZCRM.User.Model.User))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: createdBy EXPECTED TYPE: User", null, null);
				}
				this.createdBy = createdBy;
				this.keyModified.set("Created_By", 1);

			}

			/**
			 * The method to get the linkUrl
			 * @returns {String} A String representing the linkUrl
			 */
			getLinkUrl()	{
				return this.linkUrl;

			}

			/**
			 * The method to set the value to linkUrl
			 * @param {String} linkUrl A String
			 */
			setLinkUrl(linkUrl)	{
				if((linkUrl != null) && (!(Object.prototype.toString.call(linkUrl) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: linkUrl EXPECTED TYPE: String", null, null);
				}
				this.linkUrl = linkUrl;
				this.keyModified.set("$link_url", 1);

			}

			/**
			 * The method to get the description
			 * @returns {String} A String representing the description
			 */
			getDescription()	{
				return this.description;

			}

			/**
			 * The method to set the value to description
			 * @param {String} description A String
			 */
			setDescription(description)	{
				if((description != null) && (!(Object.prototype.toString.call(description) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: description EXPECTED TYPE: String", null, null);
				}
				this.description = description;
				this.keyModified.set("description", 1);

			}

			/**
			 * The method to get the category
			 * @returns {String} A String representing the category
			 */
			getCategory()	{
				return this.category;

			}

			/**
			 * The method to set the value to category
			 * @param {String} category A String
			 */
			setCategory(category)	{
				if((category != null) && (!(Object.prototype.toString.call(category) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: category EXPECTED TYPE: String", null, null);
				}
				this.category = category;
				this.keyModified.set("category", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		ActionWrapper : class{
			constructor(){

				this.data=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the data
			 * @returns {List} An Array representing the data
			 */
			getData()	{
				return this.data;

			}

			/**
			 * The method to set the value to data
			 * @param {List} data An Array
			 */
			setData(data)	{
				if((data != null) && (!(Object.prototype.toString.call(data) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: data EXPECTED TYPE: Array", null, null);
				}
				this.data = data;
				this.keyModified.set("data", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		ResponseWrapper : class{
			constructor(){

				this.data=null;
				this.info=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the data
			 * @returns {List} An Array representing the data
			 */
			getData()	{
				return this.data;

			}

			/**
			 * The method to set the value to data
			 * @param {List} data An Array
			 */
			setData(data)	{
				if((data != null) && (!(Object.prototype.toString.call(data) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: data EXPECTED TYPE: Array", null, null);
				}
				this.data = data;
				this.keyModified.set("data", 1);

			}

			/**
			 * The method to get the info
			 * @returns {Info} An instance of Info
			 */
			getInfo()	{
				return this.info;

			}

			/**
			 * The method to set the value to info
			 * @param {Info} info An instance of Info
			 */
			setInfo(info)	{
				if((info != null) && (!(info instanceof ZCRM.Record.Model.Info))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: info EXPECTED TYPE: Info", null, null);
				}
				this.info = info;
				this.keyModified.set("info", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		FileBodyWrapper : class{
			constructor(){

				this.file=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the file
			 * @returns {StreamWrapper} An instance of StreamWrapper
			 */
			getFile()	{
				return this.file;

			}

			/**
			 * The method to set the value to file
			 * @param {StreamWrapper} file An instance of StreamWrapper
			 */
			setFile(file)	{
				if((file != null) && (!(file instanceof StreamWrapper.Model.StreamWrapper))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: file EXPECTED TYPE: StreamWrapper", null, null);
				}
				this.file = file;
				this.keyModified.set("file", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		DeleteAttachmentsParam : {
			IDS : 	new Param("ids", "Attachment.Model.DeleteAttachmentsParam"),


		},

		UploadLinkAttachmentParam : {
			ATTACHMENTURL : 	new Param("attachmentUrl", "Attachment.Model.UploadLinkAttachmentParam"),


		},

		GetAttachmentsParam : {
			FIELDS : 	new Param("fields", "Attachment.Model.GetAttachmentsParam"),

			PAGE : 	new Param("page", "Attachment.Model.GetAttachmentsParam"),

			PER_PAGE : 	new Param("per_page", "Attachment.Model.GetAttachmentsParam"),


		}
	},
	Operations : class {


		/**
		 * Creates an instance of AttachmentsOperations with the given parameters
		 * @param {String} moduleAPIName A String
		 * @param {Long} recordId A BigInt
		 */
		constructor(moduleAPIName, recordId){
			if((!(Object.prototype.toString.call(moduleAPIName) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: moduleAPIName EXPECTED TYPE: String", null, null);
			}
			if((!(Object.prototype.toString.call(recordId) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: recordId EXPECTED TYPE: BigInt", null, null);
			}
						this.moduleAPIName = moduleAPIName;
						this.recordId = recordId;

		}

		/**
		 * The method to download attachment
		 * @param {Long} id A BigInt
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async downloadAttachment(id){
			if((!(Object.prototype.toString.call(id) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/");
			apiPath = apiPath.concat(this.moduleAPIName.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(this.recordId.toString());
			apiPath = apiPath.concat("/Attachments/");
			apiPath = apiPath.concat(id.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			return handlerInstance.apiCall("Attachment.Model.ResponseHandler", "application/x-download");

		}

		/**
		 * The method to delete attachment
		 * @param {Long} id A BigInt
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async deleteAttachment(id){
			if((!(Object.prototype.toString.call(id) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/");
			apiPath = apiPath.concat(this.moduleAPIName.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(this.recordId.toString());
			apiPath = apiPath.concat("/Attachments/");
			apiPath = apiPath.concat(id.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_DELETE);
			handlerInstance.setCategoryMethod(Constants.REQUEST_METHOD_DELETE);
			return handlerInstance.apiCall("Attachment.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to get attachments
		 * @param {ParameterMap} paramInstance An instance of ParameterMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getAttachments(paramInstance=null){
			if((paramInstance != null) && (!(paramInstance instanceof ParameterMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paramInstance EXPECTED TYPE: ParameterMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/");
			apiPath = apiPath.concat(this.moduleAPIName.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(this.recordId.toString());
			apiPath = apiPath.concat("/Attachments");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			handlerInstance.setParam(paramInstance);
			return handlerInstance.apiCall("Attachment.Model.ResponseHandler", "application/json");

		}

		/**
		 * The method to upload attachment
		 * @param {FileBodyWrapper} request An instance of FileBodyWrapper
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async uploadAttachment(request){
			if((request != null) && (!(request instanceof ZCRM.Attachment.Model.FileBodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: FileBodyWrapper", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/");
			apiPath = apiPath.concat(this.moduleAPIName.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(this.recordId.toString());
			apiPath = apiPath.concat("/Attachments");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_POST);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_CREATE);
			handlerInstance.setContentType("multipart/form-data");
			handlerInstance.setRequest(request);
			handlerInstance.setMandatoryChecker(true);
			return handlerInstance.apiCall("Attachment.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to upload link attachment
		 * @param {ParameterMap} paramInstance An instance of ParameterMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async uploadLinkAttachment(paramInstance=null){
			if((paramInstance != null) && (!(paramInstance instanceof ParameterMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paramInstance EXPECTED TYPE: ParameterMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/");
			apiPath = apiPath.concat(this.moduleAPIName.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(this.recordId.toString());
			apiPath = apiPath.concat("/Attachments");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_POST);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_CREATE);
			handlerInstance.setMandatoryChecker(true);
			handlerInstance.setParam(paramInstance);
			return handlerInstance.apiCall("Attachment.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to delete attachments
		 * @param {ParameterMap} paramInstance An instance of ParameterMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async deleteAttachments(paramInstance=null){
			if((paramInstance != null) && (!(paramInstance instanceof ParameterMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: paramInstance EXPECTED TYPE: ParameterMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/");
			apiPath = apiPath.concat(this.moduleAPIName.toString());
			apiPath = apiPath.concat("/");
			apiPath = apiPath.concat(this.recordId.toString());
			apiPath = apiPath.concat("/Attachments");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_DELETE);
			handlerInstance.setCategoryMethod(Constants.REQUEST_METHOD_DELETE);
			handlerInstance.setParam(paramInstance);
			return handlerInstance.apiCall("Attachment.Model.ActionHandler", "application/json");

		}

	},

}

ZCRM.Module = {
	Model : {
		ActionResponse : class{
			constructor(){

			}


		},

		ActionHandler : class{
			constructor(){

			}


		},

		ResponseHandler : class{
			constructor(){

			}


		},

		Module : class{
			constructor(){

				this.name=null;
				this.globalSearchSupported=null;
				this.kanbanView=null;
				this.deletable=null;
				this.description=null;
				this.creatable=null;
				this.filterStatus=null;
				this.inventoryTemplateSupported=null;
				this.modifiedTime=null;
				this.pluralLabel=null;
				this.presenceSubMenu=null;
				this.triggersSupported=null;
				this.id=null;
				this.relatedListProperties=null;
				this.properties=null;
				this.perPage=null;
				this.visibility=null;
				this.convertable=null;
				this.editable=null;
				this.emailtemplateSupport=null;
				this.profiles=null;
				this.filterSupported=null;
				this.displayField=null;
				this.searchLayoutFields=null;
				this.kanbanViewSupported=null;
				this.showAsTab=null;
				this.webLink=null;
				this.sequenceNumber=null;
				this.singularLabel=null;
				this.viewable=null;
				this.apiSupported=null;
				this.apiName=null;
				this.quickCreate=null;
				this.modifiedBy=null;
				this.generatedType=null;
				this.feedsRequired=null;
				this.scoringSupported=null;
				this.webformSupported=null;
				this.arguments1=null;
				this.moduleName=null;
				this.businessCardFieldLimit=null;
				this.customView=null;
				this.parentModule=null;
				this.territory=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the name
			 * @returns {String} A String representing the name
			 */
			getName()	{
				return this.name;

			}

			/**
			 * The method to set the value to name
			 * @param {String} name A String
			 */
			setName(name)	{
				if((name != null) && (!(Object.prototype.toString.call(name) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: name EXPECTED TYPE: String", null, null);
				}
				this.name = name;
				this.keyModified.set("name", 1);

			}

			/**
			 * The method to get the globalSearchSupported
			 * @returns {Boolean} A Boolean representing the globalSearchSupported
			 */
			getGlobalSearchSupported()	{
				return this.globalSearchSupported;

			}

			/**
			 * The method to set the value to globalSearchSupported
			 * @param {Boolean} globalSearchSupported A Boolean
			 */
			setGlobalSearchSupported(globalSearchSupported)	{
				if((globalSearchSupported != null) && (!(Object.prototype.toString.call(globalSearchSupported) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: globalSearchSupported EXPECTED TYPE: Boolean", null, null);
				}
				this.globalSearchSupported = globalSearchSupported;
				this.keyModified.set("global_search_supported", 1);

			}

			/**
			 * The method to get the kanbanView
			 * @returns {Boolean} A Boolean representing the kanbanView
			 */
			getKanbanView()	{
				return this.kanbanView;

			}

			/**
			 * The method to set the value to kanbanView
			 * @param {Boolean} kanbanView A Boolean
			 */
			setKanbanView(kanbanView)	{
				if((kanbanView != null) && (!(Object.prototype.toString.call(kanbanView) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: kanbanView EXPECTED TYPE: Boolean", null, null);
				}
				this.kanbanView = kanbanView;
				this.keyModified.set("kanban_view", 1);

			}

			/**
			 * The method to get the deletable
			 * @returns {Boolean} A Boolean representing the deletable
			 */
			getDeletable()	{
				return this.deletable;

			}

			/**
			 * The method to set the value to deletable
			 * @param {Boolean} deletable A Boolean
			 */
			setDeletable(deletable)	{
				if((deletable != null) && (!(Object.prototype.toString.call(deletable) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: deletable EXPECTED TYPE: Boolean", null, null);
				}
				this.deletable = deletable;
				this.keyModified.set("deletable", 1);

			}

			/**
			 * The method to get the description
			 * @returns {String} A String representing the description
			 */
			getDescription()	{
				return this.description;

			}

			/**
			 * The method to set the value to description
			 * @param {String} description A String
			 */
			setDescription(description)	{
				if((description != null) && (!(Object.prototype.toString.call(description) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: description EXPECTED TYPE: String", null, null);
				}
				this.description = description;
				this.keyModified.set("description", 1);

			}

			/**
			 * The method to get the creatable
			 * @returns {Boolean} A Boolean representing the creatable
			 */
			getCreatable()	{
				return this.creatable;

			}

			/**
			 * The method to set the value to creatable
			 * @param {Boolean} creatable A Boolean
			 */
			setCreatable(creatable)	{
				if((creatable != null) && (!(Object.prototype.toString.call(creatable) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: creatable EXPECTED TYPE: Boolean", null, null);
				}
				this.creatable = creatable;
				this.keyModified.set("creatable", 1);

			}

			/**
			 * The method to get the filterStatus
			 * @returns {Boolean} A Boolean representing the filterStatus
			 */
			getFilterStatus()	{
				return this.filterStatus;

			}

			/**
			 * The method to set the value to filterStatus
			 * @param {Boolean} filterStatus A Boolean
			 */
			setFilterStatus(filterStatus)	{
				if((filterStatus != null) && (!(Object.prototype.toString.call(filterStatus) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: filterStatus EXPECTED TYPE: Boolean", null, null);
				}
				this.filterStatus = filterStatus;
				this.keyModified.set("filter_status", 1);

			}

			/**
			 * The method to get the inventoryTemplateSupported
			 * @returns {Boolean} A Boolean representing the inventoryTemplateSupported
			 */
			getInventoryTemplateSupported()	{
				return this.inventoryTemplateSupported;

			}

			/**
			 * The method to set the value to inventoryTemplateSupported
			 * @param {Boolean} inventoryTemplateSupported A Boolean
			 */
			setInventoryTemplateSupported(inventoryTemplateSupported)	{
				if((inventoryTemplateSupported != null) && (!(Object.prototype.toString.call(inventoryTemplateSupported) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: inventoryTemplateSupported EXPECTED TYPE: Boolean", null, null);
				}
				this.inventoryTemplateSupported = inventoryTemplateSupported;
				this.keyModified.set("inventory_template_supported", 1);

			}

			/**
			 * The method to get the modifiedTime
			 * @returns {OffsetDateTime} An instance of OffsetDateTime
			 */
			getModifiedTime()	{
				return this.modifiedTime;

			}

			/**
			 * The method to set the value to modifiedTime
			 * @param {OffsetDateTime} modifiedTime An instance of OffsetDateTime
			 */
			setModifiedTime(modifiedTime)	{
				if((modifiedTime != null) && (!(modifiedTime instanceof Date))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modifiedTime EXPECTED TYPE: Date", null, null);
				}
				this.modifiedTime = modifiedTime;
				this.keyModified.set("modified_time", 1);

			}

			/**
			 * The method to get the pluralLabel
			 * @returns {String} A String representing the pluralLabel
			 */
			getPluralLabel()	{
				return this.pluralLabel;

			}

			/**
			 * The method to set the value to pluralLabel
			 * @param {String} pluralLabel A String
			 */
			setPluralLabel(pluralLabel)	{
				if((pluralLabel != null) && (!(Object.prototype.toString.call(pluralLabel) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: pluralLabel EXPECTED TYPE: String", null, null);
				}
				this.pluralLabel = pluralLabel;
				this.keyModified.set("plural_label", 1);

			}

			/**
			 * The method to get the presenceSubMenu
			 * @returns {Boolean} A Boolean representing the presenceSubMenu
			 */
			getPresenceSubMenu()	{
				return this.presenceSubMenu;

			}

			/**
			 * The method to set the value to presenceSubMenu
			 * @param {Boolean} presenceSubMenu A Boolean
			 */
			setPresenceSubMenu(presenceSubMenu)	{
				if((presenceSubMenu != null) && (!(Object.prototype.toString.call(presenceSubMenu) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: presenceSubMenu EXPECTED TYPE: Boolean", null, null);
				}
				this.presenceSubMenu = presenceSubMenu;
				this.keyModified.set("presence_sub_menu", 1);

			}

			/**
			 * The method to get the triggersSupported
			 * @returns {Boolean} A Boolean representing the triggersSupported
			 */
			getTriggersSupported()	{
				return this.triggersSupported;

			}

			/**
			 * The method to set the value to triggersSupported
			 * @param {Boolean} triggersSupported A Boolean
			 */
			setTriggersSupported(triggersSupported)	{
				if((triggersSupported != null) && (!(Object.prototype.toString.call(triggersSupported) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: triggersSupported EXPECTED TYPE: Boolean", null, null);
				}
				this.triggersSupported = triggersSupported;
				this.keyModified.set("triggers_supported", 1);

			}

			/**
			 * The method to get the id
			 * @returns {Long} A BigInt representing the id
			 */
			getId()	{
				return this.id;

			}

			/**
			 * The method to set the value to id
			 * @param {Long} id A BigInt
			 */
			setId(id)	{
				if((id != null) && (!(Object.prototype.toString.call(id) == "[object BigInt]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
				}
				this.id = id;
				this.keyModified.set("id", 1);

			}

			/**
			 * The method to get the relatedListProperties
			 * @returns {RelatedListProperties} An instance of RelatedListProperties
			 */
			getRelatedListProperties()	{
				return this.relatedListProperties;

			}

			/**
			 * The method to set the value to relatedListProperties
			 * @param {RelatedListProperties} relatedListProperties An instance of RelatedListProperties
			 */
			setRelatedListProperties(relatedListProperties)	{
				if((relatedListProperties != null) && (!(relatedListProperties instanceof ZCRM.Module.Model.RelatedListProperties))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: relatedListProperties EXPECTED TYPE: RelatedListProperties", null, null);
				}
				this.relatedListProperties = relatedListProperties;
				this.keyModified.set("related_list_properties", 1);

			}

			/**
			 * The method to get the properties
			 * @returns {List} An Array representing the properties
			 */
			getProperties()	{
				return this.properties;

			}

			/**
			 * The method to set the value to properties
			 * @param {List} properties An Array
			 */
			setProperties(properties)	{
				if((properties != null) && (!(Object.prototype.toString.call(properties) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: properties EXPECTED TYPE: Array", null, null);
				}
				this.properties = properties;
				this.keyModified.set("$properties", 1);

			}

			/**
			 * The method to get the perPage
			 * @returns {Integer} An Integer representing the perPage
			 */
			getPerPage()	{
				return this.perPage;

			}

			/**
			 * The method to set the value to perPage
			 * @param {Integer} perPage An Integer
			 */
			setPerPage(perPage)	{
				if((perPage != null) && (!(Object.prototype.toString.call(perPage) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: perPage EXPECTED TYPE: Integer", null, null);
				}
				this.perPage = perPage;
				this.keyModified.set("per_page", 1);

			}

			/**
			 * The method to get the visibility
			 * @returns {Integer} An Integer representing the visibility
			 */
			getVisibility()	{
				return this.visibility;

			}

			/**
			 * The method to set the value to visibility
			 * @param {Integer} visibility An Integer
			 */
			setVisibility(visibility)	{
				if((visibility != null) && (!(Object.prototype.toString.call(visibility) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: visibility EXPECTED TYPE: Integer", null, null);
				}
				this.visibility = visibility;
				this.keyModified.set("visibility", 1);

			}

			/**
			 * The method to get the convertable
			 * @returns {Boolean} A Boolean representing the convertable
			 */
			getConvertable()	{
				return this.convertable;

			}

			/**
			 * The method to set the value to convertable
			 * @param {Boolean} convertable A Boolean
			 */
			setConvertable(convertable)	{
				if((convertable != null) && (!(Object.prototype.toString.call(convertable) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: convertable EXPECTED TYPE: Boolean", null, null);
				}
				this.convertable = convertable;
				this.keyModified.set("convertable", 1);

			}

			/**
			 * The method to get the editable
			 * @returns {Boolean} A Boolean representing the editable
			 */
			getEditable()	{
				return this.editable;

			}

			/**
			 * The method to set the value to editable
			 * @param {Boolean} editable A Boolean
			 */
			setEditable(editable)	{
				if((editable != null) && (!(Object.prototype.toString.call(editable) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: editable EXPECTED TYPE: Boolean", null, null);
				}
				this.editable = editable;
				this.keyModified.set("editable", 1);

			}

			/**
			 * The method to get the emailtemplateSupport
			 * @returns {Boolean} A Boolean representing the emailtemplateSupport
			 */
			getEmailtemplateSupport()	{
				return this.emailtemplateSupport;

			}

			/**
			 * The method to set the value to emailtemplateSupport
			 * @param {Boolean} emailtemplateSupport A Boolean
			 */
			setEmailtemplateSupport(emailtemplateSupport)	{
				if((emailtemplateSupport != null) && (!(Object.prototype.toString.call(emailtemplateSupport) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: emailtemplateSupport EXPECTED TYPE: Boolean", null, null);
				}
				this.emailtemplateSupport = emailtemplateSupport;
				this.keyModified.set("emailTemplate_support", 1);

			}

			/**
			 * The method to get the profiles
			 * @returns {List} An Array representing the profiles
			 */
			getProfiles()	{
				return this.profiles;

			}

			/**
			 * The method to set the value to profiles
			 * @param {List} profiles An Array
			 */
			setProfiles(profiles)	{
				if((profiles != null) && (!(Object.prototype.toString.call(profiles) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: profiles EXPECTED TYPE: Array", null, null);
				}
				this.profiles = profiles;
				this.keyModified.set("profiles", 1);

			}

			/**
			 * The method to get the filterSupported
			 * @returns {Boolean} A Boolean representing the filterSupported
			 */
			getFilterSupported()	{
				return this.filterSupported;

			}

			/**
			 * The method to set the value to filterSupported
			 * @param {Boolean} filterSupported A Boolean
			 */
			setFilterSupported(filterSupported)	{
				if((filterSupported != null) && (!(Object.prototype.toString.call(filterSupported) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: filterSupported EXPECTED TYPE: Boolean", null, null);
				}
				this.filterSupported = filterSupported;
				this.keyModified.set("filter_supported", 1);

			}

			/**
			 * The method to get the displayField
			 * @returns {String} A String representing the displayField
			 */
			getDisplayField()	{
				return this.displayField;

			}

			/**
			 * The method to set the value to displayField
			 * @param {String} displayField A String
			 */
			setDisplayField(displayField)	{
				if((displayField != null) && (!(Object.prototype.toString.call(displayField) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: displayField EXPECTED TYPE: String", null, null);
				}
				this.displayField = displayField;
				this.keyModified.set("display_field", 1);

			}

			/**
			 * The method to get the searchLayoutFields
			 * @returns {List} An Array representing the searchLayoutFields
			 */
			getSearchLayoutFields()	{
				return this.searchLayoutFields;

			}

			/**
			 * The method to set the value to searchLayoutFields
			 * @param {List} searchLayoutFields An Array
			 */
			setSearchLayoutFields(searchLayoutFields)	{
				if((searchLayoutFields != null) && (!(Object.prototype.toString.call(searchLayoutFields) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: searchLayoutFields EXPECTED TYPE: Array", null, null);
				}
				this.searchLayoutFields = searchLayoutFields;
				this.keyModified.set("search_layout_fields", 1);

			}

			/**
			 * The method to get the kanbanViewSupported
			 * @returns {Boolean} A Boolean representing the kanbanViewSupported
			 */
			getKanbanViewSupported()	{
				return this.kanbanViewSupported;

			}

			/**
			 * The method to set the value to kanbanViewSupported
			 * @param {Boolean} kanbanViewSupported A Boolean
			 */
			setKanbanViewSupported(kanbanViewSupported)	{
				if((kanbanViewSupported != null) && (!(Object.prototype.toString.call(kanbanViewSupported) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: kanbanViewSupported EXPECTED TYPE: Boolean", null, null);
				}
				this.kanbanViewSupported = kanbanViewSupported;
				this.keyModified.set("kanban_view_supported", 1);

			}

			/**
			 * The method to get the showAsTab
			 * @returns {Boolean} A Boolean representing the showAsTab
			 */
			getShowAsTab()	{
				return this.showAsTab;

			}

			/**
			 * The method to set the value to showAsTab
			 * @param {Boolean} showAsTab A Boolean
			 */
			setShowAsTab(showAsTab)	{
				if((showAsTab != null) && (!(Object.prototype.toString.call(showAsTab) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: showAsTab EXPECTED TYPE: Boolean", null, null);
				}
				this.showAsTab = showAsTab;
				this.keyModified.set("show_as_tab", 1);

			}

			/**
			 * The method to get the webLink
			 * @returns {String} A String representing the webLink
			 */
			getWebLink()	{
				return this.webLink;

			}

			/**
			 * The method to set the value to webLink
			 * @param {String} webLink A String
			 */
			setWebLink(webLink)	{
				if((webLink != null) && (!(Object.prototype.toString.call(webLink) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: webLink EXPECTED TYPE: String", null, null);
				}
				this.webLink = webLink;
				this.keyModified.set("web_link", 1);

			}

			/**
			 * The method to get the sequenceNumber
			 * @returns {Integer} An Integer representing the sequenceNumber
			 */
			getSequenceNumber()	{
				return this.sequenceNumber;

			}

			/**
			 * The method to set the value to sequenceNumber
			 * @param {Integer} sequenceNumber An Integer
			 */
			setSequenceNumber(sequenceNumber)	{
				if((sequenceNumber != null) && (!(Object.prototype.toString.call(sequenceNumber) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: sequenceNumber EXPECTED TYPE: Integer", null, null);
				}
				this.sequenceNumber = sequenceNumber;
				this.keyModified.set("sequence_number", 1);

			}

			/**
			 * The method to get the singularLabel
			 * @returns {String} A String representing the singularLabel
			 */
			getSingularLabel()	{
				return this.singularLabel;

			}

			/**
			 * The method to set the value to singularLabel
			 * @param {String} singularLabel A String
			 */
			setSingularLabel(singularLabel)	{
				if((singularLabel != null) && (!(Object.prototype.toString.call(singularLabel) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: singularLabel EXPECTED TYPE: String", null, null);
				}
				this.singularLabel = singularLabel;
				this.keyModified.set("singular_label", 1);

			}

			/**
			 * The method to get the viewable
			 * @returns {Boolean} A Boolean representing the viewable
			 */
			getViewable()	{
				return this.viewable;

			}

			/**
			 * The method to set the value to viewable
			 * @param {Boolean} viewable A Boolean
			 */
			setViewable(viewable)	{
				if((viewable != null) && (!(Object.prototype.toString.call(viewable) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: viewable EXPECTED TYPE: Boolean", null, null);
				}
				this.viewable = viewable;
				this.keyModified.set("viewable", 1);

			}

			/**
			 * The method to get the apiSupported
			 * @returns {Boolean} A Boolean representing the apiSupported
			 */
			getAPISupported()	{
				return this.apiSupported;

			}

			/**
			 * The method to set the value to apiSupported
			 * @param {Boolean} apiSupported A Boolean
			 */
			setAPISupported(apiSupported)	{
				if((apiSupported != null) && (!(Object.prototype.toString.call(apiSupported) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: apiSupported EXPECTED TYPE: Boolean", null, null);
				}
				this.apiSupported = apiSupported;
				this.keyModified.set("api_supported", 1);

			}

			/**
			 * The method to get the apiName
			 * @returns {String} A String representing the apiName
			 */
			getAPIName()	{
				return this.apiName;

			}

			/**
			 * The method to set the value to apiName
			 * @param {String} apiName A String
			 */
			setAPIName(apiName)	{
				if((apiName != null) && (!(Object.prototype.toString.call(apiName) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: apiName EXPECTED TYPE: String", null, null);
				}
				this.apiName = apiName;
				this.keyModified.set("api_name", 1);

			}

			/**
			 * The method to get the quickCreate
			 * @returns {Boolean} A Boolean representing the quickCreate
			 */
			getQuickCreate()	{
				return this.quickCreate;

			}

			/**
			 * The method to set the value to quickCreate
			 * @param {Boolean} quickCreate A Boolean
			 */
			setQuickCreate(quickCreate)	{
				if((quickCreate != null) && (!(Object.prototype.toString.call(quickCreate) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: quickCreate EXPECTED TYPE: Boolean", null, null);
				}
				this.quickCreate = quickCreate;
				this.keyModified.set("quick_create", 1);

			}

			/**
			 * The method to get the modifiedBy
			 * @returns {User} An instance of User
			 */
			getModifiedBy()	{
				return this.modifiedBy;

			}

			/**
			 * The method to set the value to modifiedBy
			 * @param {User} modifiedBy An instance of User
			 */
			setModifiedBy(modifiedBy)	{
				if((modifiedBy != null) && (!(modifiedBy instanceof ZCRM.User.Model.User))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modifiedBy EXPECTED TYPE: User", null, null);
				}
				this.modifiedBy = modifiedBy;
				this.keyModified.set("modified_by", 1);

			}

			/**
			 * The method to get the generatedType
			 * @returns {Choice} An instance of Choice
			 */
			getGeneratedType()	{
				return this.generatedType;

			}

			/**
			 * The method to set the value to generatedType
			 * @param {Choice} generatedType An instance of Choice
			 */
			setGeneratedType(generatedType)	{
				if((generatedType != null) && (!(generatedType instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: generatedType EXPECTED TYPE: Choice", null, null);
				}
				this.generatedType = generatedType;
				this.keyModified.set("generated_type", 1);

			}

			/**
			 * The method to get the feedsRequired
			 * @returns {Boolean} A Boolean representing the feedsRequired
			 */
			getFeedsRequired()	{
				return this.feedsRequired;

			}

			/**
			 * The method to set the value to feedsRequired
			 * @param {Boolean} feedsRequired A Boolean
			 */
			setFeedsRequired(feedsRequired)	{
				if((feedsRequired != null) && (!(Object.prototype.toString.call(feedsRequired) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: feedsRequired EXPECTED TYPE: Boolean", null, null);
				}
				this.feedsRequired = feedsRequired;
				this.keyModified.set("feeds_required", 1);

			}

			/**
			 * The method to get the scoringSupported
			 * @returns {Boolean} A Boolean representing the scoringSupported
			 */
			getScoringSupported()	{
				return this.scoringSupported;

			}

			/**
			 * The method to set the value to scoringSupported
			 * @param {Boolean} scoringSupported A Boolean
			 */
			setScoringSupported(scoringSupported)	{
				if((scoringSupported != null) && (!(Object.prototype.toString.call(scoringSupported) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: scoringSupported EXPECTED TYPE: Boolean", null, null);
				}
				this.scoringSupported = scoringSupported;
				this.keyModified.set("scoring_supported", 1);

			}

			/**
			 * The method to get the webformSupported
			 * @returns {Boolean} A Boolean representing the webformSupported
			 */
			getWebformSupported()	{
				return this.webformSupported;

			}

			/**
			 * The method to set the value to webformSupported
			 * @param {Boolean} webformSupported A Boolean
			 */
			setWebformSupported(webformSupported)	{
				if((webformSupported != null) && (!(Object.prototype.toString.call(webformSupported) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: webformSupported EXPECTED TYPE: Boolean", null, null);
				}
				this.webformSupported = webformSupported;
				this.keyModified.set("webform_supported", 1);

			}

			/**
			 * The method to get the arguments
			 * @returns {List} An Array representing the arguments1
			 */
			getArguments()	{
				return this.arguments1;

			}

			/**
			 * The method to set the value to arguments
			 * @param {List} arguments1 An Array
			 */
			setArguments(arguments1)	{
				if((arguments1 != null) && (!(Object.prototype.toString.call(arguments1) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: arguments1 EXPECTED TYPE: Array", null, null);
				}
				this.arguments1 = arguments1;
				this.keyModified.set("arguments", 1);

			}

			/**
			 * The method to get the moduleName
			 * @returns {String} A String representing the moduleName
			 */
			getModuleName()	{
				return this.moduleName;

			}

			/**
			 * The method to set the value to moduleName
			 * @param {String} moduleName A String
			 */
			setModuleName(moduleName)	{
				if((moduleName != null) && (!(Object.prototype.toString.call(moduleName) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: moduleName EXPECTED TYPE: String", null, null);
				}
				this.moduleName = moduleName;
				this.keyModified.set("module_name", 1);

			}

			/**
			 * The method to get the businessCardFieldLimit
			 * @returns {Integer} An Integer representing the businessCardFieldLimit
			 */
			getBusinessCardFieldLimit()	{
				return this.businessCardFieldLimit;

			}

			/**
			 * The method to set the value to businessCardFieldLimit
			 * @param {Integer} businessCardFieldLimit An Integer
			 */
			setBusinessCardFieldLimit(businessCardFieldLimit)	{
				if((businessCardFieldLimit != null) && (!(Object.prototype.toString.call(businessCardFieldLimit) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: businessCardFieldLimit EXPECTED TYPE: Integer", null, null);
				}
				this.businessCardFieldLimit = businessCardFieldLimit;
				this.keyModified.set("business_card_field_limit", 1);

			}

			/**
			 * The method to get the customView
			 * @returns {CustomView} An instance of CustomView
			 */
			getCustomView()	{
				return this.customView;

			}

			/**
			 * The method to set the value to customView
			 * @param {CustomView} customView An instance of CustomView
			 */
			setCustomView(customView)	{
				if((customView != null) && (!(customView instanceof ZCRM.CustomView.Model.CustomView))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: customView EXPECTED TYPE: CustomView", null, null);
				}
				this.customView = customView;
				this.keyModified.set("custom_view", 1);

			}

			/**
			 * The method to get the parentModule
			 * @returns {Module} An instance of Module
			 */
			getParentModule()	{
				return this.parentModule;

			}

			/**
			 * The method to set the value to parentModule
			 * @param {Module} parentModule An instance of Module
			 */
			setParentModule(parentModule)	{
				if((parentModule != null) && (!(parentModule instanceof ZCRM.Module.Model.Module))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: parentModule EXPECTED TYPE: Module", null, null);
				}
				this.parentModule = parentModule;
				this.keyModified.set("parent_module", 1);

			}

			/**
			 * The method to get the territory
			 * @returns {Territory} An instance of Territory
			 */
			getTerritory()	{
				return this.territory;

			}

			/**
			 * The method to set the value to territory
			 * @param {Territory} territory An instance of Territory
			 */
			setTerritory(territory)	{
				if((territory != null) && (!(territory instanceof ZCRM.Module.Model.Territory))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: territory EXPECTED TYPE: Territory", null, null);
				}
				this.territory = territory;
				this.keyModified.set("territory", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		Territory : class{
			constructor(){

				this.id=null;
				this.name=null;
				this.subordinates=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the id
			 * @returns {Long} A BigInt representing the id
			 */
			getId()	{
				return this.id;

			}

			/**
			 * The method to set the value to id
			 * @param {Long} id A BigInt
			 */
			setId(id)	{
				if((id != null) && (!(Object.prototype.toString.call(id) == "[object BigInt]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
				}
				this.id = id;
				this.keyModified.set("id", 1);

			}

			/**
			 * The method to get the name
			 * @returns {String} A String representing the name
			 */
			getName()	{
				return this.name;

			}

			/**
			 * The method to set the value to name
			 * @param {String} name A String
			 */
			setName(name)	{
				if((name != null) && (!(Object.prototype.toString.call(name) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: name EXPECTED TYPE: String", null, null);
				}
				this.name = name;
				this.keyModified.set("name", 1);

			}

			/**
			 * The method to get the subordinates
			 * @returns {Boolean} A Boolean representing the subordinates
			 */
			getSubordinates()	{
				return this.subordinates;

			}

			/**
			 * The method to set the value to subordinates
			 * @param {Boolean} subordinates A Boolean
			 */
			setSubordinates(subordinates)	{
				if((subordinates != null) && (!(Object.prototype.toString.call(subordinates) == "[object Boolean]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: subordinates EXPECTED TYPE: Boolean", null, null);
				}
				this.subordinates = subordinates;
				this.keyModified.set("subordinates", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		APIException : class{
			constructor(){

				this.status=null;
				this.code=null;
				this.message=null;
				this.details=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		SuccessResponse : class{
			constructor(){

				this.status=null;
				this.code=null;
				this.message=null;
				this.details=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the status
			 * @returns {Choice} An instance of Choice
			 */
			getStatus()	{
				return this.status;

			}

			/**
			 * The method to set the value to status
			 * @param {Choice} status An instance of Choice
			 */
			setStatus(status)	{
				if((status != null) && (!(status instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: status EXPECTED TYPE: Choice", null, null);
				}
				this.status = status;
				this.keyModified.set("status", 1);

			}

			/**
			 * The method to get the code
			 * @returns {Choice} An instance of Choice
			 */
			getCode()	{
				return this.code;

			}

			/**
			 * The method to set the value to code
			 * @param {Choice} code An instance of Choice
			 */
			setCode(code)	{
				if((code != null) && (!(code instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: code EXPECTED TYPE: Choice", null, null);
				}
				this.code = code;
				this.keyModified.set("code", 1);

			}

			/**
			 * The method to get the message
			 * @returns {Choice} An instance of Choice
			 */
			getMessage()	{
				return this.message;

			}

			/**
			 * The method to set the value to message
			 * @param {Choice} message An instance of Choice
			 */
			setMessage(message)	{
				if((message != null) && (!(message instanceof Choice))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: message EXPECTED TYPE: Choice", null, null);
				}
				this.message = message;
				this.keyModified.set("message", 1);

			}

			/**
			 * The method to get the details
			 * @returns {Map} A Map representing the details
			 */
			getDetails()	{
				return this.details;

			}

			/**
			 * The method to set the value to details
			 * @param {Map} details A Map
			 */
			setDetails(details)	{
				if((details != null) && (!(Object.prototype.toString.call(details) == "[object Map]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: details EXPECTED TYPE: Map", null, null);
				}
				this.details = details;
				this.keyModified.set("details", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		ActionWrapper : class{
			constructor(){

				this.modules=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the modules
			 * @returns {List} An Array representing the modules
			 */
			getModules()	{
				return this.modules;

			}

			/**
			 * The method to set the value to modules
			 * @param {List} modules An Array
			 */
			setModules(modules)	{
				if((modules != null) && (!(Object.prototype.toString.call(modules) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modules EXPECTED TYPE: Array", null, null);
				}
				this.modules = modules;
				this.keyModified.set("modules", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		ResponseWrapper : class{
			constructor(){

				this.modules=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the modules
			 * @returns {List} An Array representing the modules
			 */
			getModules()	{
				return this.modules;

			}

			/**
			 * The method to set the value to modules
			 * @param {List} modules An Array
			 */
			setModules(modules)	{
				if((modules != null) && (!(Object.prototype.toString.call(modules) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modules EXPECTED TYPE: Array", null, null);
				}
				this.modules = modules;
				this.keyModified.set("modules", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		Argument : class{
			constructor(){

				this.name=null;
				this.value=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the name
			 * @returns {String} A String representing the name
			 */
			getName()	{
				return this.name;

			}

			/**
			 * The method to set the value to name
			 * @param {String} name A String
			 */
			setName(name)	{
				if((name != null) && (!(Object.prototype.toString.call(name) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: name EXPECTED TYPE: String", null, null);
				}
				this.name = name;
				this.keyModified.set("name", 1);

			}

			/**
			 * The method to get the value
			 * @returns {String} A String representing the value
			 */
			getValue()	{
				return this.value;

			}

			/**
			 * The method to set the value to value
			 * @param {String} value A String
			 */
			setValue(value)	{
				if((value != null) && (!(Object.prototype.toString.call(value) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: value EXPECTED TYPE: String", null, null);
				}
				this.value = value;
				this.keyModified.set("value", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		RelatedListProperties : class{
			constructor(){

				this.sortBy=null;
				this.fields=null;
				this.sortOrder=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the sortBy
			 * @returns {String} A String representing the sortBy
			 */
			getSortBy()	{
				return this.sortBy;

			}

			/**
			 * The method to set the value to sortBy
			 * @param {String} sortBy A String
			 */
			setSortBy(sortBy)	{
				if((sortBy != null) && (!(Object.prototype.toString.call(sortBy) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: sortBy EXPECTED TYPE: String", null, null);
				}
				this.sortBy = sortBy;
				this.keyModified.set("sort_by", 1);

			}

			/**
			 * The method to get the fields
			 * @returns {List} An Array representing the fields
			 */
			getFields()	{
				return this.fields;

			}

			/**
			 * The method to set the value to fields
			 * @param {List} fields An Array
			 */
			setFields(fields)	{
				if((fields != null) && (!(Object.prototype.toString.call(fields) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: fields EXPECTED TYPE: Array", null, null);
				}
				this.fields = fields;
				this.keyModified.set("fields", 1);

			}

			/**
			 * The method to get the sortOrder
			 * @returns {String} A String representing the sortOrder
			 */
			getSortOrder()	{
				return this.sortOrder;

			}

			/**
			 * The method to set the value to sortOrder
			 * @param {String} sortOrder A String
			 */
			setSortOrder(sortOrder)	{
				if((sortOrder != null) && (!(Object.prototype.toString.call(sortOrder) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: sortOrder EXPECTED TYPE: String", null, null);
				}
				this.sortOrder = sortOrder;
				this.keyModified.set("sort_order", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		BodyWrapper : class{
			constructor(){

				this.modules=null;
				this.keyModified=new Map();
			}



			/**
			 * The method to get the modules
			 * @returns {List} An Array representing the modules
			 */
			getModules()	{
				return this.modules;

			}

			/**
			 * The method to set the value to modules
			 * @param {List} modules An Array
			 */
			setModules(modules)	{
				if((modules != null) && (!(Object.prototype.toString.call(modules) == "[object Array]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modules EXPECTED TYPE: Array", null, null);
				}
				this.modules = modules;
				this.keyModified.set("modules", 1);

			}

			/**
			 * The method to check if the user has modified the given key
			 * @param {String} key A String
			 * @returns {Integer} An Integer representing the modification
			 */
			isKeyModified(key)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if(this.keyModified.has(key)){
					return this.keyModified.get(key);
				}
				return null;

			}

			/**
			 * The method to mark the given key as modified
			 * @param {String} key A String
			 * @param {Integer} modification An Integer
			 */
			setKeyModified(key, modification)	{
				if((key != null) && (!(Object.prototype.toString.call(key) == "[object String]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: key EXPECTED TYPE: String", null, null);
				}
				if((modification != null) && (!(Object.prototype.toString.call(modification) == "[object Number]"))){
					throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: modification EXPECTED TYPE: Integer", null, null);
				}
				this.keyModified.set(key, modification);

			}
		},

		GetModulesHeader : {
			IF_MODIFIED_SINCE : 	new Header("If-Modified-Since", "Module.Model.GetModulesHeader"),


		}
	},
	Operations : class {
		constructor(){

		}

		/**
		 * The method to get modules
		 * @param {HeaderMap} headerInstance An instance of HeaderMap
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getModules(headerInstance=null){
			if((headerInstance != null) && (!(headerInstance instanceof HeaderMap))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: headerInstance EXPECTED TYPE: HeaderMap", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/settings/modules");
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			handlerInstance.setHeader(headerInstance);
			return handlerInstance.apiCall("Module.Model.ResponseHandler", "application/json");

		}

		/**
		 * The method to get module
		 * @param {String} apiName A String
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async getModule(apiName){
			if((!(Object.prototype.toString.call(apiName) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: apiName EXPECTED TYPE: String", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/settings/modules/");
			apiPath = apiPath.concat(apiName.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_GET);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_READ);
			return handlerInstance.apiCall("Module.Model.ResponseHandler", "application/json");

		}

		/**
		 * The method to update module by api name
		 * @param {String} apiName A String
		 * @param {BodyWrapper} request An instance of BodyWrapper
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async updateModuleByAPIName(apiName, request){
			if((!(Object.prototype.toString.call(apiName) == "[object String]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: apiName EXPECTED TYPE: String", null, null);
			}
			if((request != null) && (!(request instanceof ZCRM.Module.Model.BodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: BodyWrapper", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/settings/modules/");
			apiPath = apiPath.concat(apiName.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_PUT);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_UPDATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			return handlerInstance.apiCall("Module.Model.ActionHandler", "application/json");

		}

		/**
		 * The method to update module by id
		 * @param {Long} id A BigInt
		 * @param {BodyWrapper} request An instance of BodyWrapper
		 * @returns {APIResponse} An instance of APIResponse
		 * @throws {SDKException}
		 */
		async updateModuleById(id, request){
			if((!(Object.prototype.toString.call(id) == "[object BigInt]"))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: id EXPECTED TYPE: BigInt", null, null);
			}
			if((request != null) && (!(request instanceof ZCRM.Module.Model.BodyWrapper))){
				throw new SDKException(Constants.DATA_TYPE_ERROR, "KEY: request EXPECTED TYPE: BodyWrapper", null, null);
			}
			var handlerInstance = new CommonAPIHandler();
			var apiPath = '';
			apiPath = apiPath.concat("/crm/v2/settings/modules/");
			apiPath = apiPath.concat(id.toString());
			handlerInstance.setAPIPath(apiPath);
			handlerInstance.setHttpMethod(Constants.REQUEST_METHOD_PUT);
			handlerInstance.setCategoryMethod(Constants.REQUEST_CATEGORY_UPDATE);
			handlerInstance.setContentType("application/json");
			handlerInstance.setRequest(request);
			return handlerInstance.apiCall("Module.Model.ActionHandler", "application/json");

		}
	},

}

/**
 * This class is the common SDKException object. This stands as a POJO for the SDKException thrown.
 */
class SDKException extends Error {
    /**
     * Creates an SDKException class instance with the specified parameters.
     * @param {String} code A String containing the Exception error code.
     * @param {String} message A String containing the Exception error message.
     * @param {JSON} details A JSON containing the error response.
     * @param {object} cause A Exception class instance.
     */
    constructor(code, message, details = null, cause = null) {
        super();

        this.code = code;

        this.message = (message === null) ? "" : message;

        this.details = details;

        this.cause = cause;

        if (this.details != null) {
            this.message = this.message + JSON.stringify(this.details);
        }

        if (this.cause != null) {
            this.message = this.message.concat(this.cause.toString());
        }
    }
}

/**
 * This class representing the Logger level.
 */
class Logger {
    /**
     * This is a getter method to get logger level.
     * @returns {String} A String representing the logger level.
     */
    getLevel() {
        return this.level;
    }

    /**
     * Creates an Logger class instance with the specified log level
     * @param {Logger} level A class containing the log level.
     */
    static getInstance(level) {
        return new Logger(level)
    }

    constructor(level) {
        this.level = level;
    }
}

/**
 * This class used to give logger levels.
 */
var Levels = {
    ALL: Constants.ALL,

    INFO: Constants.INFO,

    DEBUG: Constants.DEBUG,

    WARN: Constants.WARN,

    ERROR: Constants.ERROR,

    OFF: Constants.OFF
}

/**
 * This class to initialize the SDK logger.
 */
class SDKLogger {
    /**
     * Creates an User SDKLogger instance with the specified Logger class instance.
     * @param {Logger} logger A Logger class instance.
     */
    static initialize(logger) {
        this.logger = logger;
    }

    static log(level, message) {
        let date = new Date();

        if (this.logger.level != Levels.OFF && (level == this.logger.level || this.logger.level == Levels.ALL)) {
            switch (level) {
                case 'debug':
                    console.debug(this.logger.level.toUpperCase() + " - " + date.toString() + " : " + message);
                    break;
                case 'warn':
                    console.warn(this.logger.level.toUpperCase() + " - " + date.toString() + " : " + message);
                    break;
                case 'error':
                    console.error(this.logger.level.toUpperCase() + " - " + date.toString() + " : " + message);
                    break;
                default:
                    console.info(this.logger.level.toUpperCase() + " - " + date.toString() + " : " + message);
            }
        }
    }
}

